var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};

// src/local-framework/system/index.ts
var exports_system = {};
__export(exports_system, {
  utilities: () => {
    {
      return exports_utilities;
    }
  },
  rng: () => {
    {
      return exports_rng;
    }
  },
  metrics: () => {
    {
      return exports_metrics;
    }
  },
  math: () => {
    {
      return exports_math;
    }
  },
  controllers: () => {
    {
      return exports_controllers;
    }
  },
  browser: () => {
    {
      return exports_browser;
    }
  }
});

// src/local-framework/system/browser/index.ts
var exports_browser = {};
__export(exports_browser, {
  isWebWorkerSupported: () => {
    {
      return isWebWorkerSupported;
    }
  },
  isWebGL2Supported: () => {
    {
      return isWebGL2Supported;
    }
  },
  isNumber: () => {
    {
      return isNumber;
    }
  },
  isLetter: () => {
    {
      return isLetter;
    }
  },
  isAlphanumeric: () => {
    {
      return isAlphanumeric;
    }
  },
  GlobalVisibilityManager: () => {
    {
      return GlobalVisibilityManager;
    }
  },
  GlobalTouchManager: () => {
    {
      return GlobalTouchManager;
    }
  },
  GlobalPointerLockManager: () => {
    {
      return GlobalPointerLockManager;
    }
  },
  GlobalMouseManager: () => {
    {
      return GlobalMouseManager;
    }
  },
  GlobalKeyboardManager: () => {
    {
      return GlobalKeyboardManager;
    }
  },
  GlobalFullScreenManager: () => {
    {
      return GlobalFullScreenManager;
    }
  },
  AllKeyCodes: () => {
    {
      return AllKeyCodes;
    }
  }
});

// src/local-framework/system/browser/FullScreenManager.ts
var allRequestEvents = [
  "requestFullscreen",
  "webkitRequestFullscreen",
  "mozRequestFullScreen",
  "msRequestFullscreen"
];
var allChangeEvents = [
  "fullscreenchange",
  "webkitfullscreenchange",
  "mozfullscreenchange",
  "msfullscreenchange"
];

class FullScreenManager {
  _onFullScreenChangeCallbacks = [];
  _isInitialized = false;
  _initialize() {
    if (this._isInitialized) {
      return;
    }
    this._isInitialized = true;
    const onLockChange = () => {
      this._onFullScreenChangeCallbacks.forEach((callback) => callback());
    };
    for (const currEvent of allChangeEvents)
      document.addEventListener(currEvent, onLockChange, false);
  }
  isCompatible(inTargetElement) {
    for (const currEvent of allRequestEvents) {
      if (currEvent in inTargetElement) {
        return true;
      }
    }
    return false;
  }
  isFullScreen(inTargetElement) {
    return document.fullscreenElement === inTargetElement;
  }
  async requestFullScreen(inTargetElement) {
    if (this.isFullScreen(inTargetElement)) {
      return { success: false, message: "element already in full screen" };
    }
    this._initialize();
    for (const currEvent of allRequestEvents) {
      if (currEvent in inTargetElement) {
        inTargetElement[currEvent]();
        return { success: true, message: "request for full screen done" };
      }
    }
    return { success: false, message: "unsupported request for full screen" };
  }
  addOnFullScreenChange(inCallback) {
    this._onFullScreenChangeCallbacks.push(inCallback);
  }
  removeOnFullScreenChange(inCallback) {
    const index = this._onFullScreenChangeCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onFullScreenChangeCallbacks.splice(index, 1);
  }
  removeAllCallbacks() {
    this._onFullScreenChangeCallbacks.length = 0;
  }
}
var GlobalFullScreenManager = new FullScreenManager;
// src/local-framework/system/browser/KeyCodes.ts
var AllKeyCodes = {
  Num0: 48,
  Num1: 49,
  Num2: 50,
  Num3: 51,
  Num4: 52,
  Num5: 53,
  Num6: 54,
  Num7: 55,
  Num8: 56,
  Num9: 57,
  A: 65,
  B: 66,
  C: 67,
  D: 68,
  E: 69,
  F: 70,
  G: 71,
  H: 72,
  I: 73,
  J: 74,
  K: 75,
  L: 76,
  M: 77,
  N: 78,
  O: 79,
  P: 80,
  Q: 81,
  R: 82,
  S: 83,
  T: 84,
  U: 85,
  V: 86,
  W: 87,
  X: 88,
  Y: 89,
  Z: 90,
  Semicolon: 186,
  Equal: 187,
  Comma: 188,
  Minus: 189,
  Period: 190,
  BackQuote: 192,
  BracketLeft: 219,
  Backslash: 220,
  BracketRight: 221,
  Quote: 222,
  Shift: 16,
  Ctrl: 17,
  Alt: 18,
  CapsLock: 20,
  Tab: 9,
  Enter: 13,
  Pause: 19,
  Escape: 27,
  Space: 32,
  PageUp: 33,
  PageDown: 34,
  End: 35,
  Home: 36,
  ArrowLeft: 37,
  ArrowUp: 38,
  ArrowRight: 39,
  ArrowDown: 40,
  PrintScreen: 44,
  Insert: 45,
  Delete: 46,
  ContextMenu: 93,
  ScrollLock: 145,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  F13: 124,
  F14: 125,
  F15: 126,
  F16: 127,
  F17: 128,
  F18: 129,
  F19: 130,
  F20: 131,
  F21: 132,
  F22: 133,
  F23: 134,
  F24: 135,
  NumPad0: 96,
  NumPad1: 97,
  NumPad2: 98,
  NumPad3: 99,
  NumPad4: 100,
  NumPad5: 101,
  NumPad6: 102,
  NumPad7: 103,
  NumPad8: 104,
  NumPad9: 105,
  NumPadMultiply: 106,
  NumPadAdd: 107,
  NumPadSubtract: 109,
  NumPadDecimal: 110,
  NumPadDivide: 111,
  NumLock: 144,
  NumPadComma: 194,
  NumPadEqual: 12
};
var isLetter = (key) => {
  return key >= AllKeyCodes.A && key <= AllKeyCodes.Z;
};
var isNumber = (key) => {
  return key >= AllKeyCodes.Num0 && key <= AllKeyCodes.Num9 || key >= AllKeyCodes.NumPad0 && key <= AllKeyCodes.NumPad9;
};
var isAlphanumeric = (key) => {
  return isNumber(key) || isLetter(key);
};

// src/local-framework/system/browser/KeyboardManager.ts
class KeyboardManager {
  _pressedKeysSet = new Set;
  _preventDefaultKeysSet = new Set;
  _activated = false;
  _handleKeyDown;
  _handleKeyUp;
  _onEvent;
  constructor() {
    const handleKeyDown = (event) => {
      const { keyCode } = event;
      if (this._onEvent) {
        this._onEvent();
      }
      if (this._preventDefaultKeysSet.has(keyCode)) {
        event.preventDefault();
      }
      this._pressedKeysSet.add(keyCode);
    };
    const handleKeyUp = (event) => {
      const { keyCode } = event;
      if (this._onEvent) {
        this._onEvent();
      }
      if (this._preventDefaultKeysSet.has(keyCode)) {
        event.preventDefault();
      }
      this._pressedKeysSet.delete(keyCode);
    };
    this._activated = false;
    this._handleKeyDown = handleKeyDown.bind(this);
    this._handleKeyUp = handleKeyUp.bind(this);
  }
  isPressed(...inKeys) {
    for (const key of inKeys) {
      if (this._pressedKeysSet.has(AllKeyCodes[key])) {
        return true;
      }
    }
    return false;
  }
  preventDefault(inKey) {
    this._preventDefaultKeysSet.add(AllKeyCodes[inKey]);
  }
  enableDefault(inKey) {
    this._preventDefaultKeysSet.delete(AllKeyCodes[inKey]);
  }
  activate() {
    if (this._activated) {
      return;
    }
    this._pressedKeysSet.clear();
    document.addEventListener("keydown", this._handleKeyDown);
    document.addEventListener("keyup", this._handleKeyUp);
    this._activated = true;
  }
  deactivate() {
    if (!this._activated) {
      return;
    }
    this._pressedKeysSet.clear();
    document.removeEventListener("keydown", this._handleKeyDown);
    document.removeEventListener("keyup", this._handleKeyUp);
    this._activated = false;
  }
  onEvent(callback) {
    this._onEvent = callback;
  }
}
var GlobalKeyboardManager = new KeyboardManager;
// src/local-framework/system/browser/MouseManager.ts
var AllMouseButtons = {
  Left: 0,
  Middle: 1,
  Right: 2
};

class MouseManager {
  _pressedButtonsSet = new Set;
  _activated = false;
  _handleMouseDown;
  _handleMouseUp;
  _handleMouseMove;
  _handleMouseWheel;
  _positionX = 0;
  _positionY = 0;
  _deltaX = 0;
  _deltaY = 0;
  _wheelDeltaY = 0;
  _onEvent;
  constructor() {
    const handleMouseDown = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._positionX = event.pageX;
      this._positionY = event.pageY;
      this._pressedButtonsSet.add(event.button);
    };
    const handleMouseUp = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._positionX = event.pageX;
      this._positionY = event.pageY;
      this._pressedButtonsSet.delete(event.button);
    };
    const handleMouseMove = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._positionX = event.pageX;
      this._positionY = event.pageY;
      this._deltaX += event.movementX || event.mozMovementX || event.webkitMovementX || 0;
      this._deltaY += event.movementY || event.mozMovementY || event.webkitMovementY || 0;
    };
    const handleWheelEvent = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._wheelDeltaY += event.deltaY || 0;
    };
    this._activated = false;
    this._handleMouseDown = handleMouseDown.bind(this);
    this._handleMouseUp = handleMouseUp.bind(this);
    this._handleMouseMove = handleMouseMove.bind(this);
    this._handleMouseWheel = handleWheelEvent.bind(this);
  }
  activate(domElement) {
    if (this._activated) {
      return;
    }
    this._pressedButtonsSet.clear();
    domElement.addEventListener("mousedown", this._handleMouseDown);
    domElement.addEventListener("mouseup", this._handleMouseUp);
    domElement.addEventListener("mousemove", this._handleMouseMove);
    domElement.addEventListener("wheel", this._handleMouseWheel);
    this._activated = true;
  }
  deactivate(domElement) {
    if (!this._activated) {
      return;
    }
    this._pressedButtonsSet.clear();
    domElement.removeEventListener("mousedown", this._handleMouseDown);
    domElement.removeEventListener("mouseup", this._handleMouseUp);
    domElement.removeEventListener("mousemove", this._handleMouseMove);
    domElement.removeEventListener("wheel", this._handleMouseWheel);
    this._activated = false;
  }
  isButtonPressed(inKey) {
    return this._pressedButtonsSet.has(AllMouseButtons[inKey]);
  }
  get positionX() {
    return this._positionX;
  }
  get positionY() {
    return this._positionY;
  }
  deltaX() {
    return this._deltaX;
  }
  deltaY() {
    return this._deltaY;
  }
  wheelDeltaY() {
    return this._wheelDeltaY;
  }
  resetDeltas() {
    this._deltaX = 0;
    this._deltaY = 0;
    this._wheelDeltaY = 0;
  }
  onEvent(callback) {
    this._onEvent = callback;
  }
}
var GlobalMouseManager = new MouseManager;
// src/local-framework/system/browser/PointerLockManager.ts
var allRequestEvents2 = ["requestPointerLock", "mozRequestPointerLock", "webkitRequestPointerLock"];
var allExitEvents = ["exitPointerLock", "mozExitPointerLock", "webkitExitPointerLock"];
var allStateEvents = ["pointerLockElement", "mozPointerLockElement", "webkitPointerLockElement"];
var allChangeEvents2 = [
  { methodName: "onpointerlockchange", propertyName: "pointerlockchange" },
  {
    methodName: "onmozpointerlockchange",
    propertyName: "mozpointerlockchange"
  },
  {
    methodName: "onwebkitpointerlockchange",
    propertyName: "webkitpointerlockchange"
  }
];
var allErrorEvents = [
  { methodName: "onpointerlockerror", propertyName: "pointerlockerror" },
  { methodName: "onmozpointerlockerror", propertyName: "mozpointerlockerror" },
  {
    methodName: "onwebkitpointerlockerror",
    propertyName: "webkitpointerlockerror"
  }
];

class PointerLockManager {
  _onLockChangeCallbacks = [];
  _onLockErrorCallbacks = [];
  _timeSinceLastLockChange = 0;
  _latestRequestHtmlElement;
  _isInitialized = false;
  _initialize() {
    if (this._isInitialized) {
      return;
    }
    this._isInitialized = true;
    const onLockChange = () => {
      this._timeSinceLastLockChange = Date.now();
      this._onLockChangeCallbacks.forEach((callback) => callback());
    };
    const onLockError = (event) => {
      this._timeSinceLastLockChange = Date.now();
      this._onLockErrorCallbacks.forEach((callback) => callback(event));
    };
    for (const currEvent of allChangeEvents2) {
      if (currEvent.methodName in document) {
        document.addEventListener(currEvent.propertyName, onLockChange, false);
        break;
      }
    }
    for (const currEvent of allErrorEvents) {
      if (currEvent.methodName in document) {
        document.addEventListener(currEvent.propertyName, onLockError, false);
        break;
      }
    }
  }
  canBePointerLocked(inTargetElement) {
    for (const currEvent of allRequestEvents2) {
      if (currEvent in inTargetElement) {
        return true;
      }
    }
    return false;
  }
  isPointerLocked(inTargetElement) {
    for (const currEvent of allStateEvents) {
      if (currEvent in document) {
        return document[currEvent] === inTargetElement;
      }
    }
    return false;
  }
  async requestPointerLock(inTargetElement) {
    if (this.isPointerLocked(inTargetElement)) {
      return { success: false, message: "element already locked" };
    }
    this._initialize();
    if (this._timeSinceLastLockChange > 0) {
      const elapsedSecTime = (Date.now() - this._timeSinceLastLockChange) / 1000;
      if (elapsedSecTime < 1.1) {
        return {
          success: false,
          message: `request for lock was too early, time to wait: ${elapsedSecTime.toFixed(2)}sec`
        };
      }
    }
    this._timeSinceLastLockChange = Date.now();
    for (const currEvent of allRequestEvents2) {
      if (currEvent in inTargetElement) {
        const options = {
          unadjustedMovement: false
        };
        try {
          await inTargetElement[currEvent](options);
        } catch (err) {
          const elapsedSecTime = (Date.now() - this._timeSinceLastLockChange) / 1000;
          return {
            success: false,
            message: `request for lock was too early, time to wait: ${elapsedSecTime.toFixed(2)}sec`
          };
        }
        this._timeSinceLastLockChange = Date.now();
        return { success: true, message: "request for lock done" };
      }
    }
    return { success: false, message: "unsupported request for lock" };
  }
  allowPointerLockedOnClickEvent(inTargetElement) {
    if (inTargetElement === this._latestRequestHtmlElement) {
      return;
    }
    this._latestRequestHtmlElement = inTargetElement;
    const onClick = async () => {
      inTargetElement.removeEventListener("click", onClick);
      const result = await this.requestPointerLock(inTargetElement);
      this._latestRequestHtmlElement = undefined;
      if (!result.success) {
        this.allowPointerLockedOnClickEvent(inTargetElement);
      }
    };
    inTargetElement.addEventListener("click", onClick);
  }
  exitPointerLock() {
    for (const currEvent of allExitEvents) {
      if (currEvent in document) {
        document[currEvent]();
        break;
      }
    }
  }
  addOnLockChange(inCallback) {
    this._onLockChangeCallbacks.push(inCallback);
  }
  removeOnLockChange(inCallback) {
    const index = this._onLockChangeCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onLockChangeCallbacks.splice(index, 1);
  }
  addOnLockError(inCallback) {
    this._onLockErrorCallbacks.push(inCallback);
  }
  removeOnLockError(inCallback) {
    const index = this._onLockErrorCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onLockErrorCallbacks.splice(index, 1);
  }
  removeAllCallbacks() {
    this._onLockChangeCallbacks.length = 0;
    this._onLockErrorCallbacks.length = 0;
  }
}
var GlobalPointerLockManager = new PointerLockManager;
// src/local-framework/system/browser/TouchManager.ts
class TouchData {
  id;
  createdAt = Date.now();
  positionX;
  positionY;
  deltaX = 0;
  deltaY = 0;
  constructor(id, positionX, positionY) {
    this.id = id;
    this.positionX = positionX;
    this.positionY = positionY;
  }
  resetDelta() {
    this.deltaX = 0;
    this.deltaY = 0;
  }
}

class TouchManager {
  _activated = false;
  _allTouchDataMap = new Map;
  _allCachedTouchDataArray = [];
  _handleTouchStart;
  _handleTouchEnd;
  _handleTouchMove;
  _onEvent;
  constructor() {
    const handleTouchStart = (event) => {
      event.preventDefault();
      if (this._onEvent) {
        this._onEvent();
      }
      for (let ii = 0;ii < event.changedTouches.length; ++ii) {
        const { identifier, pageX, pageY } = event.changedTouches[ii];
        const newData = new TouchData(identifier, pageX, pageY);
        this._allTouchDataMap.set(`${identifier}`, newData);
        this._allCachedTouchDataArray.length = 0;
      }
    };
    const handleTouchEnd = (event) => {
      event.preventDefault();
      if (this._onEvent) {
        this._onEvent();
      }
      for (let ii = 0;ii < event.changedTouches.length; ++ii) {
        const { identifier } = event.changedTouches[ii];
        this._allTouchDataMap.delete(`${identifier}`);
        this._allCachedTouchDataArray.length = 0;
      }
    };
    const handleTouchMove = (event) => {
      event.preventDefault();
      if (this._onEvent) {
        this._onEvent();
      }
      for (let ii = 0;ii < event.changedTouches.length; ++ii) {
        const { identifier, pageX, pageY } = event.changedTouches[ii];
        const currData = this._allTouchDataMap.get(`${identifier}`);
        if (!currData) {
          continue;
        }
        const deltaX = pageX - currData.positionX;
        const deltaY = pageY - currData.positionY;
        currData.deltaX += deltaX;
        currData.deltaY += deltaY;
        currData.positionX = pageX;
        currData.positionY = pageY;
      }
    };
    this._activated = false;
    this._handleTouchStart = handleTouchStart.bind(this);
    this._handleTouchEnd = handleTouchEnd.bind(this);
    this._handleTouchMove = handleTouchMove.bind(this);
  }
  isSupported(inTargetElement) {
    return "ontouchstart" in inTargetElement;
  }
  activate(inTargetElement) {
    if (!this.isSupported(inTargetElement)) {
      return;
    }
    if (this._activated) {
      return;
    }
    this._allTouchDataMap.clear();
    this._allCachedTouchDataArray.length = 0;
    inTargetElement.addEventListener("touchstart", this._handleTouchStart);
    inTargetElement.addEventListener("touchend", this._handleTouchEnd);
    inTargetElement.addEventListener("touchcancel", this._handleTouchEnd);
    inTargetElement.addEventListener("touchmove", this._handleTouchMove, {
      passive: false
    });
    this._activated = true;
  }
  deactivate(inTargetElement) {
    if (!this._activated) {
      return;
    }
    this._allTouchDataMap.clear();
    this._allCachedTouchDataArray.length = 0;
    inTargetElement.removeEventListener("touchstart", this._handleTouchStart);
    inTargetElement.removeEventListener("touchend", this._handleTouchEnd);
    inTargetElement.removeEventListener("touchcancel", this._handleTouchEnd);
    inTargetElement.removeEventListener("touchmove", this._handleTouchMove);
    this._activated = false;
  }
  _refreshCache() {
    if (this._allCachedTouchDataArray.length === 0) {
      this._allCachedTouchDataArray = [...this._allTouchDataMap.values()];
    }
  }
  getTouchData() {
    this._refreshCache();
    return this._allCachedTouchDataArray;
  }
  resetDeltas() {
    this._refreshCache();
    this._allCachedTouchDataArray.forEach((item) => item.resetDelta());
  }
  onEvent(callback) {
    this._onEvent = callback;
  }
}
var GlobalTouchManager = new TouchManager;
// src/local-framework/system/browser/VisibilityManager.ts
class VisibilityManager {
  _activated = false;
  _onVisibilityChangeCallbacks = [];
  _handleVisibilityChange;
  constructor() {
    const handleVisibilityChange = () => {
      const isVisible = this.isVisible();
      this._onVisibilityChangeCallbacks.forEach((callback) => callback(isVisible));
    };
    this._handleVisibilityChange = handleVisibilityChange.bind(this);
  }
  activate() {
    if (!this.isSupported()) {
      return;
    }
    if (this._activated) {
      return;
    }
    document.addEventListener("visibilitychange", this._handleVisibilityChange, false);
    this._activated = true;
  }
  deactivate() {
    if (!this._activated) {
      return;
    }
    document.removeEventListener("visibilitychange", this._handleVisibilityChange, false);
    this._activated = false;
  }
  isSupported() {
    return "onvisibilitychange" in document;
  }
  isVisible() {
    return document.visibilityState === "visible";
  }
  addVisibilityChange(inCallback) {
    this._onVisibilityChangeCallbacks.push(inCallback);
  }
  removeVisibilityChange(inCallback) {
    const index = this._onVisibilityChangeCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onVisibilityChangeCallbacks.splice(index, 1);
  }
  removeAllCallbacks() {
    this._onVisibilityChangeCallbacks.length = 0;
  }
}
var GlobalVisibilityManager = new VisibilityManager;
// src/local-framework/system/browser/isWebWorkerSupported.ts
var isWebWorkerSupported = () => {
  return !!window.Worker;
};
// src/local-framework/system/browser/isWebGL2Supported.ts
var isWebGL2Supported = () => {
  return !!window.WebGL2RenderingContext;
};
// src/local-framework/system/controllers/index.ts
var exports_controllers = {};
__export(exports_controllers, {
  FreeFlyController: () => {
    {
      return FreeFlyController;
    }
  }
});

// node_modules/gl-matrix/esm/common.js
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
var RANDOM = Math.random;
var degree = Math.PI / 180;
if (!Math.hypot)
  Math.hypot = function() {
    var y = 0, i = arguments.length;
    while (i--) {
      y += arguments[i] * arguments[i];
    }
    return Math.sqrt(y);
  };

// node_modules/gl-matrix/esm/mat4.js
var exports_mat4 = {};
__export(exports_mat4, {
  transpose: () => {
    {
      return transpose;
    }
  },
  translate: () => {
    {
      return translate;
    }
  },
  targetTo: () => {
    {
      return targetTo;
    }
  },
  subtract: () => {
    {
      return subtract;
    }
  },
  sub: () => {
    {
      return sub;
    }
  },
  str: () => {
    {
      return str;
    }
  },
  set: () => {
    {
      return set;
    }
  },
  scale: () => {
    {
      return scale;
    }
  },
  rotateZ: () => {
    {
      return rotateZ;
    }
  },
  rotateY: () => {
    {
      return rotateY;
    }
  },
  rotateX: () => {
    {
      return rotateX;
    }
  },
  rotate: () => {
    {
      return rotate;
    }
  },
  perspectiveZO: () => {
    {
      return perspectiveZO;
    }
  },
  perspectiveNO: () => {
    {
      return perspectiveNO;
    }
  },
  perspectiveFromFieldOfView: () => {
    {
      return perspectiveFromFieldOfView;
    }
  },
  perspective: () => {
    {
      return perspective;
    }
  },
  orthoZO: () => {
    {
      return orthoZO;
    }
  },
  orthoNO: () => {
    {
      return orthoNO;
    }
  },
  ortho: () => {
    {
      return ortho;
    }
  },
  multiplyScalarAndAdd: () => {
    {
      return multiplyScalarAndAdd;
    }
  },
  multiplyScalar: () => {
    {
      return multiplyScalar;
    }
  },
  multiply: () => {
    {
      return multiply;
    }
  },
  mul: () => {
    {
      return mul;
    }
  },
  lookAt: () => {
    {
      return lookAt;
    }
  },
  invert: () => {
    {
      return invert;
    }
  },
  identity: () => {
    {
      return identity;
    }
  },
  getTranslation: () => {
    {
      return getTranslation;
    }
  },
  getScaling: () => {
    {
      return getScaling;
    }
  },
  getRotation: () => {
    {
      return getRotation;
    }
  },
  frustum: () => {
    {
      return frustum;
    }
  },
  fromZRotation: () => {
    {
      return fromZRotation;
    }
  },
  fromYRotation: () => {
    {
      return fromYRotation;
    }
  },
  fromXRotation: () => {
    {
      return fromXRotation;
    }
  },
  fromValues: () => {
    {
      return fromValues;
    }
  },
  fromTranslation: () => {
    {
      return fromTranslation;
    }
  },
  fromScaling: () => {
    {
      return fromScaling;
    }
  },
  fromRotationTranslationScaleOrigin: () => {
    {
      return fromRotationTranslationScaleOrigin;
    }
  },
  fromRotationTranslationScale: () => {
    {
      return fromRotationTranslationScale;
    }
  },
  fromRotationTranslation: () => {
    {
      return fromRotationTranslation;
    }
  },
  fromRotation: () => {
    {
      return fromRotation;
    }
  },
  fromQuat2: () => {
    {
      return fromQuat2;
    }
  },
  fromQuat: () => {
    {
      return fromQuat;
    }
  },
  frob: () => {
    {
      return frob;
    }
  },
  exactEquals: () => {
    {
      return exactEquals;
    }
  },
  equals: () => {
    {
      return equals;
    }
  },
  determinant: () => {
    {
      return determinant;
    }
  },
  create: () => {
    {
      return create;
    }
  },
  copy: () => {
    {
      return copy;
    }
  },
  clone: () => {
    {
      return clone;
    }
  },
  adjoint: () => {
    {
      return adjoint;
    }
  },
  add: () => {
    {
      return add;
    }
  }
});
function create() {
  var out = new ARRAY_TYPE(16);
  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }
  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
function clone(a) {
  var out = new ARRAY_TYPE(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function transpose(out, a) {
  if (out === a) {
    var a01 = a[1], a02 = a[2], a03 = a[3];
    var a12 = a[6], a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }
  return out;
}
function invert(out, a) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;
  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  if (!det) {
    return null;
  }
  det = 1 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
function adjoint(out, a) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
function determinant(a) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;
  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
function multiply(out, a, b) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
function translate(out, a, v) {
  var x = v[0], y = v[1], z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }
  return out;
}
function scale(out, a, v) {
  var x = v[0], y = v[1], z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
function rotate(out, a, rad, axis) {
  var x = axis[0], y = axis[1], z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;
  if (len < EPSILON) {
    return null;
  }
  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11];
  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c;
  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;
  if (a !== out) {
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  return out;
}
function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];
  if (a !== out) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];
  if (a !== out) {
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  if (a !== out) {
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromRotation(out, rad, axis) {
  var x = axis[0], y = axis[1], z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  if (len < EPSILON) {
    return null;
  }
  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromRotationTranslation(out, q, v) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
function fromQuat2(out, a) {
  var translation = new ARRAY_TYPE(3);
  var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw;
  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }
  fromRotationTranslation(out, a, translation);
  return out;
}
function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
function getRotation(out, mat) {
  var scaling = new ARRAY_TYPE(3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;
  if (trace > 0) {
    S = Math.sqrt(trace + 1) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }
  return out;
}
function fromRotationTranslationScale(out, q, v, s) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
function fromQuat(out, q) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
function perspectiveNO(out, fovy, aspect, near, far) {
  var f = 1 / Math.tan(fovy / 2), nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;
  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }
  return out;
}
function perspectiveZO(out, fovy, aspect, near, far) {
  var f = 1 / Math.tan(fovy / 2), nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;
  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = far * nf;
    out[14] = far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -near;
  }
  return out;
}
function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
  var xScale = 2 / (leftTan + rightTan);
  var yScale = 2 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = yScale;
  out[6] = 0;
  out[7] = 0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near / (near - far);
  out[15] = 0;
  return out;
}
function orthoNO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
function orthoZO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = near * nf;
  out[15] = 1;
  return out;
}
function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];
  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
    return identity(out);
  }
  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);
  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }
  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);
  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }
  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
function targetTo(out, eye, target, up) {
  var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
  var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }
  var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }
  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
function str(a) {
  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
function multiplyScalarAndAdd(out, a, b, scale2) {
  out[0] = a[0] + b[0] * scale2;
  out[1] = a[1] + b[1] * scale2;
  out[2] = a[2] + b[2] * scale2;
  out[3] = a[3] + b[3] * scale2;
  out[4] = a[4] + b[4] * scale2;
  out[5] = a[5] + b[5] * scale2;
  out[6] = a[6] + b[6] * scale2;
  out[7] = a[7] + b[7] * scale2;
  out[8] = a[8] + b[8] * scale2;
  out[9] = a[9] + b[9] * scale2;
  out[10] = a[10] + b[10] * scale2;
  out[11] = a[11] + b[11] * scale2;
  out[12] = a[12] + b[12] * scale2;
  out[13] = a[13] + b[13] * scale2;
  out[14] = a[14] + b[14] * scale2;
  out[15] = a[15] + b[15] * scale2;
  return out;
}
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
function equals(a, b) {
  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
  var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
  var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
  var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
  var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15));
}
var perspective = perspectiveNO;
var ortho = orthoNO;
var mul = multiply;
var sub = subtract;

// node_modules/gl-matrix/esm/vec3.js
var exports_vec3 = {};
__export(exports_vec3, {
  zero: () => {
    {
      return zero;
    }
  },
  transformQuat: () => {
    {
      return transformQuat;
    }
  },
  transformMat4: () => {
    {
      return transformMat4;
    }
  },
  transformMat3: () => {
    {
      return transformMat3;
    }
  },
  subtract: () => {
    {
      return subtract2;
    }
  },
  sub: () => {
    {
      return sub2;
    }
  },
  str: () => {
    {
      return str2;
    }
  },
  squaredLength: () => {
    {
      return squaredLength;
    }
  },
  squaredDistance: () => {
    {
      return squaredDistance;
    }
  },
  sqrLen: () => {
    {
      return sqrLen;
    }
  },
  sqrDist: () => {
    {
      return sqrDist;
    }
  },
  set: () => {
    {
      return set2;
    }
  },
  scaleAndAdd: () => {
    {
      return scaleAndAdd;
    }
  },
  scale: () => {
    {
      return scale2;
    }
  },
  round: () => {
    {
      return round;
    }
  },
  rotateZ: () => {
    {
      return rotateZ2;
    }
  },
  rotateY: () => {
    {
      return rotateY2;
    }
  },
  rotateX: () => {
    {
      return rotateX2;
    }
  },
  random: () => {
    {
      return random;
    }
  },
  normalize: () => {
    {
      return normalize;
    }
  },
  negate: () => {
    {
      return negate;
    }
  },
  multiply: () => {
    {
      return multiply2;
    }
  },
  mul: () => {
    {
      return mul2;
    }
  },
  min: () => {
    {
      return min;
    }
  },
  max: () => {
    {
      return max;
    }
  },
  lerp: () => {
    {
      return lerp;
    }
  },
  length: () => {
    {
      return length;
    }
  },
  len: () => {
    {
      return len;
    }
  },
  inverse: () => {
    {
      return inverse;
    }
  },
  hermite: () => {
    {
      return hermite;
    }
  },
  fromValues: () => {
    {
      return fromValues2;
    }
  },
  forEach: () => {
    {
      return forEach;
    }
  },
  floor: () => {
    {
      return floor;
    }
  },
  exactEquals: () => {
    {
      return exactEquals2;
    }
  },
  equals: () => {
    {
      return equals2;
    }
  },
  dot: () => {
    {
      return dot;
    }
  },
  divide: () => {
    {
      return divide;
    }
  },
  div: () => {
    {
      return div;
    }
  },
  distance: () => {
    {
      return distance;
    }
  },
  dist: () => {
    {
      return dist;
    }
  },
  cross: () => {
    {
      return cross;
    }
  },
  create: () => {
    {
      return create2;
    }
  },
  copy: () => {
    {
      return copy2;
    }
  },
  clone: () => {
    {
      return clone2;
    }
  },
  ceil: () => {
    {
      return ceil;
    }
  },
  bezier: () => {
    {
      return bezier;
    }
  },
  angle: () => {
    {
      return angle;
    }
  },
  add: () => {
    {
      return add2;
    }
  }
});
function create2() {
  var out = new ARRAY_TYPE(3);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  return out;
}
function clone2(a) {
  var out = new ARRAY_TYPE(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
function fromValues2(x, y, z) {
  var out = new ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
function copy2(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
function set2(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
function add2(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
function subtract2(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
function multiply2(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
function scale2(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
function scaleAndAdd(out, a, b, scale3) {
  out[0] = a[0] + b[0] * scale3;
  out[1] = a[1] + b[1] * scale3;
  out[2] = a[2] + b[2] * scale3;
  return out;
}
function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
function inverse(out, a) {
  out[0] = 1 / a[0];
  out[1] = 1 / a[1];
  out[2] = 1 / a[2];
  return out;
}
function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }
  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cross(out, a, b) {
  var ax = a[0], ay = a[1], az = a[2];
  var bx = b[0], by = b[1], bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
function random(out, scale3) {
  scale3 = scale3 || 1;
  var r = RANDOM() * 2 * Math.PI;
  var z = RANDOM() * 2 - 1;
  var zScale = Math.sqrt(1 - z * z) * scale3;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale3;
  return out;
}
function transformMat4(out, a, m) {
  var x = a[0], y = a[1], z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
function transformMat3(out, a, m) {
  var x = a[0], y = a[1], z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
function transformQuat(out, a, q) {
  var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
  var x = a[0], y = a[1], z = a[2];
  var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x;
  var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx;
  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2;
  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2;
  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
function rotateX2(out, a, b, rad) {
  var p = [], r = [];
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];
  r[0] = p[0];
  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
function rotateY2(out, a, b, rad) {
  var p = [], r = [];
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];
  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
function rotateZ2(out, a, b, rad) {
  var p = [], r = [];
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];
  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
  r[2] = p[2];
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
function angle(a, b) {
  var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  return out;
}
function str2(a) {
  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
function exactEquals2(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
function equals2(a, b) {
  var a0 = a[0], a1 = a[1], a2 = a[2];
  var b0 = b[0], b1 = b[1], b2 = b[2];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2));
}
var sub2 = subtract2;
var mul2 = multiply2;
var div = divide;
var dist = distance;
var sqrDist = squaredDistance;
var len = length;
var sqrLen = squaredLength;
var forEach = function() {
  var vec = create2();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 3;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }
    return a;
  };
}();

// node_modules/gl-matrix/esm/vec4.js
var exports_vec4 = {};
__export(exports_vec4, {
  zero: () => {
    {
      return zero2;
    }
  },
  transformQuat: () => {
    {
      return transformQuat2;
    }
  },
  transformMat4: () => {
    {
      return transformMat42;
    }
  },
  subtract: () => {
    {
      return subtract3;
    }
  },
  sub: () => {
    {
      return sub3;
    }
  },
  str: () => {
    {
      return str3;
    }
  },
  squaredLength: () => {
    {
      return squaredLength2;
    }
  },
  squaredDistance: () => {
    {
      return squaredDistance2;
    }
  },
  sqrLen: () => {
    {
      return sqrLen2;
    }
  },
  sqrDist: () => {
    {
      return sqrDist2;
    }
  },
  set: () => {
    {
      return set3;
    }
  },
  scaleAndAdd: () => {
    {
      return scaleAndAdd2;
    }
  },
  scale: () => {
    {
      return scale3;
    }
  },
  round: () => {
    {
      return round2;
    }
  },
  random: () => {
    {
      return random2;
    }
  },
  normalize: () => {
    {
      return normalize2;
    }
  },
  negate: () => {
    {
      return negate2;
    }
  },
  multiply: () => {
    {
      return multiply3;
    }
  },
  mul: () => {
    {
      return mul3;
    }
  },
  min: () => {
    {
      return min2;
    }
  },
  max: () => {
    {
      return max2;
    }
  },
  lerp: () => {
    {
      return lerp2;
    }
  },
  length: () => {
    {
      return length2;
    }
  },
  len: () => {
    {
      return len2;
    }
  },
  inverse: () => {
    {
      return inverse2;
    }
  },
  fromValues: () => {
    {
      return fromValues3;
    }
  },
  forEach: () => {
    {
      return forEach2;
    }
  },
  floor: () => {
    {
      return floor2;
    }
  },
  exactEquals: () => {
    {
      return exactEquals3;
    }
  },
  equals: () => {
    {
      return equals3;
    }
  },
  dot: () => {
    {
      return dot2;
    }
  },
  divide: () => {
    {
      return divide2;
    }
  },
  div: () => {
    {
      return div2;
    }
  },
  distance: () => {
    {
      return distance2;
    }
  },
  dist: () => {
    {
      return dist2;
    }
  },
  cross: () => {
    {
      return cross2;
    }
  },
  create: () => {
    {
      return create3;
    }
  },
  copy: () => {
    {
      return copy3;
    }
  },
  clone: () => {
    {
      return clone3;
    }
  },
  ceil: () => {
    {
      return ceil2;
    }
  },
  add: () => {
    {
      return add3;
    }
  }
});
function create3() {
  var out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }
  return out;
}
function clone3(a) {
  var out = new ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
function fromValues3(x, y, z, w) {
  var out = new ARRAY_TYPE(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
function copy3(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
function set3(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
function add3(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
function subtract3(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
function multiply3(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}
function divide2(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}
function ceil2(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}
function floor2(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}
function min2(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}
function max2(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}
function round2(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}
function scale3(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
function scaleAndAdd2(out, a, b, scale4) {
  out[0] = a[0] + b[0] * scale4;
  out[1] = a[1] + b[1] * scale4;
  out[2] = a[2] + b[2] * scale4;
  out[3] = a[3] + b[3] * scale4;
  return out;
}
function distance2(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.hypot(x, y, z, w);
}
function squaredDistance2(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}
function length2(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.hypot(x, y, z, w);
}
function squaredLength2(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
function negate2(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}
function inverse2(out, a) {
  out[0] = 1 / a[0];
  out[1] = 1 / a[1];
  out[2] = 1 / a[2];
  out[3] = 1 / a[3];
  return out;
}
function normalize2(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len2 = x * x + y * y + z * z + w * w;
  if (len2 > 0) {
    len2 = 1 / Math.sqrt(len2);
  }
  out[0] = x * len2;
  out[1] = y * len2;
  out[2] = z * len2;
  out[3] = w * len2;
  return out;
}
function dot2(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
function cross2(out, u, v, w) {
  var A = v[0] * w[1] - v[1] * w[0], B = v[0] * w[2] - v[2] * w[0], C = v[0] * w[3] - v[3] * w[0], D = v[1] * w[2] - v[2] * w[1], E = v[1] * w[3] - v[3] * w[1], F = v[2] * w[3] - v[3] * w[2];
  var G = u[0];
  var H = u[1];
  var I = u[2];
  var J = u[3];
  out[0] = H * F - I * E + J * D;
  out[1] = -(G * F) + I * C - J * B;
  out[2] = G * E - H * C + J * A;
  out[3] = -(G * D) + H * B - I * A;
  return out;
}
function lerp2(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
function random2(out, scale4) {
  scale4 = scale4 || 1;
  var v1, v2, v3, v4;
  var s1, s2;
  do {
    v1 = RANDOM() * 2 - 1;
    v2 = RANDOM() * 2 - 1;
    s1 = v1 * v1 + v2 * v2;
  } while (s1 >= 1);
  do {
    v3 = RANDOM() * 2 - 1;
    v4 = RANDOM() * 2 - 1;
    s2 = v3 * v3 + v4 * v4;
  } while (s2 >= 1);
  var d = Math.sqrt((1 - s1) / s2);
  out[0] = scale4 * v1;
  out[1] = scale4 * v2;
  out[2] = scale4 * v3 * d;
  out[3] = scale4 * v4 * d;
  return out;
}
function transformMat42(out, a, m) {
  var x = a[0], y = a[1], z = a[2], w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
function transformQuat2(out, a, q) {
  var x = a[0], y = a[1], z = a[2];
  var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z;
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}
function zero2(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  return out;
}
function str3(a) {
  return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
function exactEquals3(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
function equals3(a, b) {
  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
}
var sub3 = subtract3;
var mul3 = multiply3;
var div2 = divide2;
var dist2 = distance2;
var sqrDist2 = squaredDistance2;
var len2 = length2;
var sqrLen2 = squaredLength2;
var forEach2 = function() {
  var vec = create3();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 4;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }
    return a;
  };
}();

// node_modules/gl-matrix/esm/vec2.js
var exports_vec2 = {};
__export(exports_vec2, {
  zero: () => {
    {
      return zero3;
    }
  },
  transformMat4: () => {
    {
      return transformMat43;
    }
  },
  transformMat3: () => {
    {
      return transformMat32;
    }
  },
  transformMat2d: () => {
    {
      return transformMat2d;
    }
  },
  transformMat2: () => {
    {
      return transformMat2;
    }
  },
  subtract: () => {
    {
      return subtract4;
    }
  },
  sub: () => {
    {
      return sub4;
    }
  },
  str: () => {
    {
      return str4;
    }
  },
  squaredLength: () => {
    {
      return squaredLength3;
    }
  },
  squaredDistance: () => {
    {
      return squaredDistance3;
    }
  },
  sqrLen: () => {
    {
      return sqrLen3;
    }
  },
  sqrDist: () => {
    {
      return sqrDist3;
    }
  },
  set: () => {
    {
      return set4;
    }
  },
  scaleAndAdd: () => {
    {
      return scaleAndAdd3;
    }
  },
  scale: () => {
    {
      return scale4;
    }
  },
  round: () => {
    {
      return round3;
    }
  },
  rotate: () => {
    {
      return rotate2;
    }
  },
  random: () => {
    {
      return random3;
    }
  },
  normalize: () => {
    {
      return normalize3;
    }
  },
  negate: () => {
    {
      return negate3;
    }
  },
  multiply: () => {
    {
      return multiply4;
    }
  },
  mul: () => {
    {
      return mul4;
    }
  },
  min: () => {
    {
      return min3;
    }
  },
  max: () => {
    {
      return max3;
    }
  },
  lerp: () => {
    {
      return lerp3;
    }
  },
  length: () => {
    {
      return length3;
    }
  },
  len: () => {
    {
      return len3;
    }
  },
  inverse: () => {
    {
      return inverse3;
    }
  },
  fromValues: () => {
    {
      return fromValues4;
    }
  },
  forEach: () => {
    {
      return forEach3;
    }
  },
  floor: () => {
    {
      return floor3;
    }
  },
  exactEquals: () => {
    {
      return exactEquals4;
    }
  },
  equals: () => {
    {
      return equals4;
    }
  },
  dot: () => {
    {
      return dot3;
    }
  },
  divide: () => {
    {
      return divide3;
    }
  },
  div: () => {
    {
      return div3;
    }
  },
  distance: () => {
    {
      return distance3;
    }
  },
  dist: () => {
    {
      return dist3;
    }
  },
  cross: () => {
    {
      return cross3;
    }
  },
  create: () => {
    {
      return create4;
    }
  },
  copy: () => {
    {
      return copy4;
    }
  },
  clone: () => {
    {
      return clone4;
    }
  },
  ceil: () => {
    {
      return ceil3;
    }
  },
  angle: () => {
    {
      return angle2;
    }
  },
  add: () => {
    {
      return add4;
    }
  }
});
function create4() {
  var out = new ARRAY_TYPE(2);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }
  return out;
}
function clone4(a) {
  var out = new ARRAY_TYPE(2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
function fromValues4(x, y) {
  var out = new ARRAY_TYPE(2);
  out[0] = x;
  out[1] = y;
  return out;
}
function copy4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
function set4(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}
function add4(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
function subtract4(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}
function multiply4(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
}
function divide3(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
}
function ceil3(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
}
function floor3(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
}
function min3(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
}
function max3(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
}
function round3(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
}
function scale4(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
}
function scaleAndAdd3(out, a, b, scale5) {
  out[0] = a[0] + b[0] * scale5;
  out[1] = a[1] + b[1] * scale5;
  return out;
}
function distance3(a, b) {
  var x = b[0] - a[0], y = b[1] - a[1];
  return Math.hypot(x, y);
}
function squaredDistance3(a, b) {
  var x = b[0] - a[0], y = b[1] - a[1];
  return x * x + y * y;
}
function length3(a) {
  var x = a[0], y = a[1];
  return Math.hypot(x, y);
}
function squaredLength3(a) {
  var x = a[0], y = a[1];
  return x * x + y * y;
}
function negate3(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
function inverse3(out, a) {
  out[0] = 1 / a[0];
  out[1] = 1 / a[1];
  return out;
}
function normalize3(out, a) {
  var x = a[0], y = a[1];
  var len3 = x * x + y * y;
  if (len3 > 0) {
    len3 = 1 / Math.sqrt(len3);
  }
  out[0] = a[0] * len3;
  out[1] = a[1] * len3;
  return out;
}
function dot3(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
function cross3(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
}
function lerp3(out, a, b, t) {
  var ax = a[0], ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
function random3(out, scale5) {
  scale5 = scale5 || 1;
  var r = RANDOM() * 2 * Math.PI;
  out[0] = Math.cos(r) * scale5;
  out[1] = Math.sin(r) * scale5;
  return out;
}
function transformMat2(out, a, m) {
  var x = a[0], y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
}
function transformMat2d(out, a, m) {
  var x = a[0], y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
}
function transformMat32(out, a, m) {
  var x = a[0], y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
}
function transformMat43(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}
function rotate2(out, a, b, rad) {
  var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(rad), cosC = Math.cos(rad);
  out[0] = p0 * cosC - p1 * sinC + b[0];
  out[1] = p0 * sinC + p1 * cosC + b[1];
  return out;
}
function angle2(a, b) {
  var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1], mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2), cosine = mag && (x1 * x2 + y1 * y2) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero3(out) {
  out[0] = 0;
  out[1] = 0;
  return out;
}
function str4(a) {
  return "vec2(" + a[0] + ", " + a[1] + ")";
}
function exactEquals4(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
function equals4(a, b) {
  var a0 = a[0], a1 = a[1];
  var b0 = b[0], b1 = b[1];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1));
}
var len3 = length3;
var sub4 = subtract4;
var mul4 = multiply4;
var div3 = divide3;
var dist3 = distance3;
var sqrDist3 = squaredDistance3;
var sqrLen3 = squaredLength3;
var forEach3 = function() {
  var vec = create4();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 2;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }
    return a;
  };
}();

// src/local-framework/system/math/angles.ts
var rad2Deg = (rad) => rad / Math.PI * 180;
var deg2Rad = (deg) => deg * Math.PI / 180;
var getEuler = (vector3) => {
  const theta = Math.atan2(vector3[1], vector3[0]);
  const magnitude = exports_vec2.length([vector3[0], vector3[1]]);
  const phi = Math.atan2(vector3[2], magnitude);
  return [theta, phi];
};

// src/local-framework/system/controllers/FreeFlyController.ts
var AllAxises = {
  X: 0,
  Y: 1,
  Z: 2
};

class FreeFlyController {
  _isActivated = false;
  _theta = 0;
  _phi = 0;
  _mouseSensibility;
  _keyboardSensibility;
  _touchSensibility;
  _movingSpeed;
  _touchWasActive = false;
  _touchStartTime = 0;
  _touchMoveForward = false;
  _axisIndices;
  _position = exports_vec3.fromValues(0, 0, 0);
  _target = exports_vec3.fromValues(0, 0, 0);
  _forwardAxis = exports_vec3.fromValues(1, 0, 0);
  _leftAxis = exports_vec3.fromValues(0, 0, 1);
  _upAxis = exports_vec3.fromValues(0, 1, 0);
  _move_forwardAxis = exports_vec3.fromValues(1, 0, 0);
  _move_leftAxis = exports_vec3.fromValues(0, 0, 1);
  _move_upAxis = exports_vec3.fromValues(0, 1, 0);
  constructor(def) {
    this._mouseSensibility = def.mouseSensibility;
    this._keyboardSensibility = def.keyboardSensibility;
    this._touchSensibility = def.touchSensibility;
    this._movingSpeed = def.movingSpeed;
    exports_vec3.copy(this._position, def.position);
    this._axisIndices = [
      def.coordinates ? AllAxises[def.coordinates[0]] : AllAxises.X,
      def.coordinates ? AllAxises[def.coordinates[1]] : AllAxises.Y,
      def.coordinates ? AllAxises[def.coordinates[2]] : AllAxises.Z
    ];
    this._theta = def.theta;
    this._phi = def.phi;
  }
  isActivated() {
    return this._isActivated;
  }
  activate() {
    this._isActivated = true;
    GlobalKeyboardManager.preventDefault("Z");
    GlobalKeyboardManager.preventDefault("W");
    GlobalKeyboardManager.preventDefault("S");
    GlobalKeyboardManager.preventDefault("A");
    GlobalKeyboardManager.preventDefault("Q");
    GlobalKeyboardManager.preventDefault("D");
    GlobalKeyboardManager.preventDefault("Shift");
    GlobalKeyboardManager.preventDefault("C");
    GlobalKeyboardManager.preventDefault("Space");
    GlobalKeyboardManager.preventDefault("ArrowUp");
    GlobalKeyboardManager.preventDefault("ArrowDown");
    GlobalKeyboardManager.preventDefault("ArrowLeft");
    GlobalKeyboardManager.preventDefault("ArrowRight");
  }
  deactivate() {
    this._isActivated = false;
    GlobalKeyboardManager.enableDefault("Z");
    GlobalKeyboardManager.enableDefault("W");
    GlobalKeyboardManager.enableDefault("S");
    GlobalKeyboardManager.enableDefault("A");
    GlobalKeyboardManager.enableDefault("Q");
    GlobalKeyboardManager.enableDefault("D");
    GlobalKeyboardManager.enableDefault("Shift");
    GlobalKeyboardManager.enableDefault("C");
    GlobalKeyboardManager.enableDefault("Space");
    GlobalKeyboardManager.enableDefault("ArrowUp");
    GlobalKeyboardManager.enableDefault("ArrowDown");
    GlobalKeyboardManager.enableDefault("ArrowLeft");
    GlobalKeyboardManager.enableDefault("ArrowRight");
  }
  isInteractedWith() {
    return GlobalKeyboardManager.isPressed("Z", "W", "S", "A", "Q", "D") || GlobalKeyboardManager.isPressed("Shift", "C", "Space") || GlobalKeyboardManager.isPressed("ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight");
  }
  update(deltaMsTime, fpsControls = false) {
    let moveForward = false;
    let moveBackward = false;
    let strafeLeft = false;
    let strafeRight = false;
    let isRunning = false;
    let isDiving = false;
    let isRising = false;
    let lookDeltaX = 0;
    let lookDeltaY = 0;
    {
      const deltaX = GlobalMouseManager.deltaX() * this._mouseSensibility;
      const deltaY = GlobalMouseManager.deltaY() * this._mouseSensibility;
      lookDeltaX -= deg2Rad(deltaX) * deltaMsTime;
      lookDeltaY -= deg2Rad(deltaY) * deltaMsTime;
    }
    const isTouched = GlobalTouchManager.getTouchData().length > 0;
    if (isTouched) {
      if (!this._touchWasActive) {
        const currTime = Date.now();
        const elapsed = (currTime - this._touchStartTime) / 1000;
        if (elapsed < 0.25) {
          this._touchMoveForward = true;
        } else {
          this._touchStartTime = currTime;
        }
      }
      const firstTouch = GlobalTouchManager.getTouchData()[0];
      const deltaX = firstTouch.deltaX * this._touchSensibility;
      const deltaY = firstTouch.deltaY * this._touchSensibility;
      lookDeltaX -= deg2Rad(deltaX) * deltaMsTime;
      lookDeltaY -= deg2Rad(deltaY) * deltaMsTime;
    } else {
      this._touchMoveForward = false;
    }
    this._touchWasActive = isTouched;
    if (this._touchMoveForward) {
      moveForward = true;
    }
    if (GlobalKeyboardManager.isPressed("Z", "W")) {
      moveForward = true;
    }
    if (GlobalKeyboardManager.isPressed("S")) {
      moveBackward = true;
    }
    if (GlobalKeyboardManager.isPressed("A", "Q")) {
      strafeLeft = true;
    }
    if (GlobalKeyboardManager.isPressed("D")) {
      strafeRight = true;
    }
    if (GlobalKeyboardManager.isPressed("Shift")) {
      isRunning = true;
    }
    if (!fpsControls) {
      if (GlobalKeyboardManager.isPressed("C")) {
        isDiving = true;
      }
      if (GlobalKeyboardManager.isPressed("Space")) {
        isRising = true;
      }
    }
    const currentLinearSpeed = this._movingSpeed * (isRunning ? 4 : 1) * deltaMsTime;
    const currentAngularSpeed = this._keyboardSensibility * deltaMsTime;
    if (GlobalKeyboardManager.isPressed("ArrowUp")) {
      lookDeltaY += currentAngularSpeed;
    } else if (GlobalKeyboardManager.isPressed("ArrowDown")) {
      lookDeltaY -= currentAngularSpeed;
    }
    if (GlobalKeyboardManager.isPressed("ArrowLeft")) {
      lookDeltaX += currentAngularSpeed;
    } else if (GlobalKeyboardManager.isPressed("ArrowRight")) {
      lookDeltaX -= currentAngularSpeed;
    }
    this._theta += lookDeltaX;
    this._phi += lookDeltaY;
    const hPi = Math.PI * 0.5;
    const verticalLimit = hPi * 0.95;
    this._phi = Math.min(Math.max(this._phi, -verticalLimit), +verticalLimit);
    const cosTheta = Math.cos(this._theta);
    const sinTheta = Math.sin(this._theta);
    const [axisX, axisY, axisZ] = this._axisIndices;
    const upRadius = Math.cos(this._phi + hPi);
    this._upAxis[axisX] = upRadius * cosTheta;
    this._upAxis[axisY] = upRadius * sinTheta;
    this._upAxis[axisZ] = Math.sin(this._phi + hPi);
    const forwardRadius = Math.cos(this._phi);
    this._forwardAxis[axisX] = forwardRadius * cosTheta;
    this._forwardAxis[axisY] = forwardRadius * sinTheta;
    this._forwardAxis[axisZ] = Math.sin(this._phi);
    exports_vec3.cross(this._leftAxis, this._upAxis, this._forwardAxis);
    if (fpsControls) {
      this._move_forwardAxis[axisX] = cosTheta;
      this._move_forwardAxis[axisY] = sinTheta;
      this._move_forwardAxis[axisZ] = 0;
      this._move_leftAxis[axisX] = -sinTheta;
      this._move_leftAxis[axisY] = cosTheta;
      this._move_leftAxis[axisZ] = 0;
      this._move_upAxis[axisX] = 0;
      this._move_upAxis[axisY] = 0;
      this._move_upAxis[axisZ] = 1;
    } else {
      exports_vec3.copy(this._move_forwardAxis, this._forwardAxis);
      exports_vec3.copy(this._move_leftAxis, this._leftAxis);
      exports_vec3.copy(this._move_upAxis, this._upAxis);
    }
    const scaledForward = exports_vec3.fromValues(0, 0, 0);
    exports_vec3.scale(scaledForward, this._move_forwardAxis, currentLinearSpeed);
    const scaledLeft = exports_vec3.fromValues(0, 0, 0);
    exports_vec3.scale(scaledLeft, this._move_leftAxis, currentLinearSpeed);
    const scaledUp = exports_vec3.fromValues(0, 0, 0);
    exports_vec3.scale(scaledUp, this._move_upAxis, currentLinearSpeed);
    if (moveForward) {
      exports_vec3.add(this._position, this._position, scaledForward);
    } else if (moveBackward) {
      exports_vec3.sub(this._position, this._position, scaledForward);
    }
    if (strafeLeft) {
      exports_vec3.add(this._position, this._position, scaledLeft);
    } else if (strafeRight) {
      exports_vec3.sub(this._position, this._position, scaledLeft);
    }
    if (isRising) {
      exports_vec3.add(this._position, this._position, scaledUp);
    } else if (isDiving) {
      exports_vec3.sub(this._position, this._position, scaledUp);
    }
    exports_vec3.add(this._target, this._position, this._forwardAxis);
  }
  getPosition() {
    return this._position;
  }
  setPosition(inPos) {
    exports_vec3.copy(this._position, inPos);
    exports_vec3.add(this._target, this._position, this._forwardAxis);
  }
  getTarget() {
    return this._target;
  }
  getUpAxis() {
    return this._upAxis;
  }
  getTheta() {
    return this._theta;
  }
  getPhi() {
    return this._phi;
  }
  getTouchMoveForward() {
    return this._touchMoveForward;
  }
}
// src/local-framework/system/math/index.ts
var exports_math = {};
__export(exports_math, {
  rayCaster: () => {
    {
      return exports_rayCaster;
    }
  },
  rad2Deg: () => {
    {
      return rad2Deg;
    }
  },
  polarCoords: () => {
    {
      return exports_polarCoords;
    }
  },
  lerp: () => {
    {
      return lerp4;
    }
  },
  getEuler: () => {
    {
      return getEuler;
    }
  },
  easing: () => {
    {
      return exports_easing;
    }
  },
  deg2Rad: () => {
    {
      return deg2Rad;
    }
  },
  collisions: () => {
    {
      return exports_collisions;
    }
  },
  clamp: () => {
    {
      return clamp;
    }
  }
});

// src/local-framework/system/math/clamp.ts
var clamp = (currVal, minVal, maxVal) => Math.min(Math.max(currVal, minVal), maxVal);
// src/local-framework/system/math/collisions.ts
var exports_collisions = {};
__export(exports_collisions, {
  intersectSegment: () => {
    {
      return intersectSegment;
    }
  },
  collisionLinesStrip: () => {
    {
      return collisionLinesStrip;
    }
  }
});
var intersectSegment = (A, B, I, P) => {
  const D = exports_vec2.fromValues(0, 0);
  const E = exports_vec2.fromValues(0, 0);
  D[0] = B[0] - A[0];
  D[1] = B[1] - A[1];
  E[0] = P[0] - I[0];
  E[1] = P[1] - I[1];
  const denom = D[0] * E[1] - D[1] * E[0];
  if (denom == 0) {
    return -1;
  }
  const t = -(A[0] * E[1] - I[0] * E[1] - E[0] * A[1] + E[0] * I[1]) / denom;
  if (t < 0 || t >= 1) {
    return 0;
  }
  const u = -(-D[0] * A[1] + D[0] * I[1] + D[1] * A[0] - D[1] * I[0]) / denom;
  if (u < 0 || u >= 1) {
    return 0;
  }
  return 1;
};
var collisionLinesStrip = (tab, P) => {
  const I = exports_vec2.fromValues(0, 0);
  I[0] = 1e4 + Math.random() * 100;
  I[1] = 1e4 + Math.random() * 100;
  let nbIntersections = 0;
  for (let ii = 0;ii < tab.length; ++ii) {
    let jj = (ii + 1) % tab.length;
    const result = intersectSegment(tab[ii], tab[jj], I, P);
    if (result == -1) {
      return collisionLinesStrip(tab, P);
    }
    nbIntersections += result;
  }
  if (nbIntersections % 2 == 1) {
    return true;
  }
  return false;
};
// src/local-framework/system/math/easing.ts
var exports_easing = {};
__export(exports_easing, {
  easePinPong: () => {
    {
      return easePinPong;
    }
  },
  easeOutSine: () => {
    {
      return easeOutSine;
    }
  },
  easeOutQuint: () => {
    {
      return easeOutQuint;
    }
  },
  easeOutQuart: () => {
    {
      return easeOutQuart;
    }
  },
  easeOutQuad: () => {
    {
      return easeOutQuad;
    }
  },
  easeOutExpo: () => {
    {
      return easeOutExpo;
    }
  },
  easeOutElastic: () => {
    {
      return easeOutElastic;
    }
  },
  easeOutCubic: () => {
    {
      return easeOutCubic;
    }
  },
  easeOutCirc: () => {
    {
      return easeOutCirc;
    }
  },
  easeOutBounce: () => {
    {
      return easeOutBounce;
    }
  },
  easeOutBack: () => {
    {
      return easeOutBack;
    }
  },
  easeInSine: () => {
    {
      return easeInSine;
    }
  },
  easeInQuint: () => {
    {
      return easeInQuint;
    }
  },
  easeInQuart: () => {
    {
      return easeInQuart;
    }
  },
  easeInQuad: () => {
    {
      return easeInQuad;
    }
  },
  easeInOutSine: () => {
    {
      return easeInOutSine;
    }
  },
  easeInOutQuint: () => {
    {
      return easeInOutQuint;
    }
  },
  easeInOutQuart: () => {
    {
      return easeInOutQuart;
    }
  },
  easeInOutQuad: () => {
    {
      return easeInOutQuad;
    }
  },
  easeInOutExpo: () => {
    {
      return easeInOutExpo;
    }
  },
  easeInOutElastic: () => {
    {
      return easeInOutElastic;
    }
  },
  easeInOutCubic: () => {
    {
      return easeInOutCubic;
    }
  },
  easeInOutCirc: () => {
    {
      return easeInOutCirc;
    }
  },
  easeInOutBounce: () => {
    {
      return easeInOutBounce;
    }
  },
  easeInOutBack: () => {
    {
      return easeInOutBack;
    }
  },
  easeInExpo: () => {
    {
      return easeInExpo;
    }
  },
  easeInElastic: () => {
    {
      return easeInElastic;
    }
  },
  easeInCubic: () => {
    {
      return easeInCubic;
    }
  },
  easeInCirc: () => {
    {
      return easeInCirc;
    }
  },
  easeInBounce: () => {
    {
      return easeInBounce;
    }
  },
  easeInBack: () => {
    {
      return easeInBack;
    }
  },
  easeClamp: () => {
    {
      return easeClamp;
    }
  }
});
var easeClamp = (t) => {
  if (t > 1) {
    return t - Math.floor(t);
  }
  return t;
};
var easePinPong = (t) => {
  t *= 2;
  if (t < 1)
    return t;
  t -= 1;
  return 1 - t;
};
var easeInSine = (t) => {
  return Math.sin(1.5707963 * t);
};
var easeOutSine = (t) => {
  return 1 + Math.sin(1.5707963 * (t - 1));
};
var easeInOutSine = (t) => {
  return 0.5 * (1 + Math.sin(3.1415926 * (t - 0.5)));
};
var easeInQuad = (t) => {
  return t * t;
};
var easeOutQuad = (t) => {
  return t * (2 - t);
};
var easeInOutQuad = (t) => {
  return t < 0.5 ? 2 * t * t : t * (4 - 2 * t) - 1;
};
var easeInCubic = (t) => {
  return t * t * t;
};
var easeOutCubic = (t) => {
  const t2 = t - 1;
  return 1 + t2 * t2 * t2;
};
var easeInOutCubic = (t) => {
  const t2 = t - 1;
  const t3 = t2 - 1;
  return t < 0.5 ? 4 * t * t * t : 1 + t2 * (2 * t3) * (2 * t3);
};
var easeInQuart = (t) => {
  t *= t;
  return t * t;
};
var easeOutQuart = (t) => {
  const t2 = t - 1;
  t = t2 * t2;
  return 1 - t * t;
};
var easeInOutQuart = (t) => {
  if (t < 0.5) {
    t *= t;
    return 8 * t * t;
  }
  const t2 = t - 1;
  t = t2 * t2;
  return 1 - 8 * t * t;
};
var easeInQuint = (t) => {
  const t2 = t * t;
  return t * t2 * t2;
};
var easeOutQuint = (t) => {
  const tx = t - 1;
  const t2 = tx * tx;
  return 1 + tx * t2 * t2;
};
var easeInOutQuint = (t) => {
  let t2;
  if (t < 0.5) {
    t2 = t * t;
    return 16 * t * t2 * t2;
  }
  const tx = t - 1;
  t2 = tx * tx;
  return 1 + 16 * tx * t2 * t2;
};
var easeInExpo = (t) => {
  return (Math.pow(2, 8 * t) - 1) / 255;
};
var easeOutExpo = (t) => {
  return 1 - Math.pow(2, -8 * t);
};
var easeInOutExpo = (t) => {
  if (t < 0.5)
    return (Math.pow(2, 16 * t) - 1) / 510;
  return 1 - 0.5 * Math.pow(2, -16 * (t - 0.5));
};
var easeInCirc = (t) => {
  return 1 - Math.sqrt(1 - t);
};
var easeOutCirc = (t) => {
  return Math.sqrt(t);
};
var easeInOutCirc = (t) => {
  if (t < 0.5)
    return (1 - Math.sqrt(1 - 2 * t)) * 0.5;
  return (1 + Math.sqrt(2 * t - 1)) * 0.5;
};
var easeInBack = (t) => {
  return t * t * (2.70158 * t - 1.70158);
};
var easeOutBack = (t) => {
  const tx = t - 1;
  return 1 + tx * tx * (2.70158 * tx + 1.70158);
};
var easeInOutBack = (t) => {
  if (t < 0.5)
    return t * t * (7 * t - 2.5) * 2;
  const tx = t - 1;
  return 1 + tx * tx * 2 * (7 * tx + 2.5);
};
var easeInElastic = (t) => {
  const t2 = t * t;
  return t2 * t2 * Math.sin(t * Math.PI * 4.5);
};
var easeOutElastic = (t) => {
  const t2 = (t - 1) * (t - 1);
  return 1 - t2 * t2 * Math.cos(t * Math.PI * 4.5);
};
var easeInOutElastic = (t) => {
  let t2;
  if (t < 0.45) {
    t2 = t * t;
    return 8 * t2 * t2 * Math.sin(t * Math.PI * 9);
  }
  if (t < 0.55)
    return 0.5 + 0.75 * Math.sin(t * Math.PI * 4);
  t2 = (t - 1) * (t - 1);
  return 1 - 8 * t2 * t2 * Math.sin(t * Math.PI * 9);
};
var easeInBounce = (t) => {
  return Math.pow(2, 6 * (t - 1)) * Math.abs(Math.sin(t * Math.PI * 3.5));
};
var easeOutBounce = (t) => {
  return 1 - Math.pow(2, -6 * t) * Math.abs(Math.cos(t * Math.PI * 3.5));
};
var easeInOutBounce = (t) => {
  if (t < 0.5)
    return 8 * Math.pow(2, 8 * (t - 1)) * Math.abs(Math.sin(t * Math.PI * 7));
  return 1 - 8 * Math.pow(2, -8 * t) * Math.abs(Math.sin(t * Math.PI * 7));
};
// src/local-framework/system/math/lerp.ts
var lerp4 = (ratio, minVal, maxVal) => minVal + (maxVal - minVal) * ratio;
// src/local-framework/system/math/polarCoords.ts
var exports_polarCoords = {};
__export(exports_polarCoords, {
  polar2Cartesian: () => {
    {
      return polar2Cartesian;
    }
  },
  cartesian2Polar: () => {
    {
      return cartesian2Polar;
    }
  }
});
var polar2Cartesian = (lat, lng, relAltitude = 0, globRadius = 100) => {
  const phi = (90 - lat) * Math.PI / 180;
  const theta = (90 - lng) * Math.PI / 180;
  const r = globRadius * (1 + relAltitude);
  return [r * Math.sin(phi) * Math.cos(theta), r * Math.cos(phi), r * Math.sin(phi) * Math.sin(theta)];
};
var cartesian2Polar = (x, y, z, globRadius = 100) => {
  const r = Math.sqrt(x * x + y * y + z * z);
  const phi = Math.acos(y / r);
  const theta = Math.atan2(z, x);
  return {
    lat: 90 - phi * 180 / Math.PI,
    lng: 90 - theta * 180 / Math.PI - (theta < -Math.PI / 2 ? 360 : 0),
    altitude: r / globRadius - 1
  };
};
// src/local-framework/system/math/rayCaster.ts
var exports_rayCaster = {};
__export(exports_rayCaster, {
  intersectRaySphere: () => {
    {
      return intersectRaySphere;
    }
  }
});
var intersectRaySphere = (pos, dir, center, radius) => {
  const m = exports_vec3.sub(exports_vec3.create(), pos, center);
  const b = exports_vec3.dot(m, dir);
  const c = exports_vec3.dot(m, m) - radius * radius;
  if (c > 0 && b > 0) {
    return null;
  }
  const discr = b * b - c;
  if (discr < 0) {
    return null;
  }
  let t = -b - Math.sqrt(discr);
  if (t < 0) {
    t = 0;
  }
  return exports_vec3.fromValues(pos[0] + t * dir[0], pos[1] + t * dir[1], pos[2] + t * dir[2]);
};
// src/local-framework/system/metrics/index.ts
var exports_metrics = {};
__export(exports_metrics, {
  FrameProfiler: () => {
    {
      return FrameProfiler;
    }
  }
});

// src/local-framework/system/metrics/FrameProfiler.ts
class FrameProfiler {
  _framesDelta = [];
  _averageDelta = 0;
  _minDelta = 0;
  _maxDelta = 0;
  pushDelta(inDelta) {
    if (this._framesDelta.length >= 100) {
      this._framesDelta.shift();
    }
    this._framesDelta.push(inDelta);
    this._minDelta = 999999999;
    this._maxDelta = -999999999;
    this._averageDelta = 0;
    for (const currDelta of this._framesDelta) {
      this._minDelta = Math.min(this._minDelta, currDelta);
      this._maxDelta = Math.max(this._maxDelta, currDelta);
      this._averageDelta += currDelta;
    }
    this._averageDelta /= this._framesDelta.length;
  }
  get framesDelta() {
    return this._framesDelta;
  }
  get averageDelta() {
    return this._averageDelta;
  }
  get minDelta() {
    return this._minDelta;
  }
  get maxDelta() {
    return this._maxDelta;
  }
}
// src/local-framework/system/utilities/index.ts
var exports_utilities = {};
__export(exports_utilities, {
  FetchHelpers: () => {
    {
      return exports_FetchHelpers;
    }
  },
  AsyncHelpers: () => {
    {
      return exports_AsyncHelpers;
    }
  }
});

// src/local-framework/system/utilities/FetchHelpers.ts
var exports_FetchHelpers = {};
__export(exports_FetchHelpers, {
  progressFetch: () => {
    {
      return progressFetch;
    }
  }
});
var progressFetch = async (url, onProgress) => {
  const response = await fetch(url);
  const reader = response.body.getReader();
  let totalProgress = 0;
  const stream = new ReadableStream({
    start(controller) {
      return pump();
      function pump() {
        return reader.read().then(({ done, value }) => {
          if (done) {
            controller.close();
            return;
          }
          if (onProgress) {
            totalProgress += value.length;
            onProgress(totalProgress);
          }
          controller.enqueue(value);
          return pump();
        });
      }
    }
  });
  await stream;
  return new Response(stream);
};
// src/local-framework/system/utilities/AsyncHelpers.ts
var exports_AsyncHelpers = {};
__export(exports_AsyncHelpers, {
  sleep: () => {
    {
      return sleep;
    }
  },
  cancellableSleep: () => {
    {
      return cancellableSleep;
    }
  }
});
var sleep = async (delay) => {
  await new Promise((resolve) => setTimeout(resolve, delay));
};
var cancellableSleep = (delay) => {
  let timeoutHandle = -1;
  let resolveCallback = undefined;
  const promise = new Promise((resolve) => {
    resolveCallback = resolve;
    timeoutHandle = window.setTimeout(resolve, delay);
  });
  return {
    promise,
    cancel: () => {
      if (timeoutHandle >= 0) {
        window.clearTimeout(timeoutHandle);
      }
      if (resolveCallback) {
        resolveCallback();
      }
    }
  };
};
// src/local-framework/system/rng/index.ts
var exports_rng = {};
__export(exports_rng, {
  DeterministicRng: () => {
    {
      return DeterministicRng;
    }
  }
});

// src/local-framework/system/rng/DeterministicRng.ts
var RAND_MAX = 2147483648 | 0;

class DeterministicRng {
  _seed = 1 | 0;
  random() {
    if (this._seed == 0) {
      this._seed = 123459876 | 0;
    }
    const hi = this._seed / 127773 | 0;
    const lo = this._seed % 127773 | 0;
    let x = 16807 * lo - 2836 * hi | 0;
    if (x < 0) {
      x += 2147483647 | 0;
    }
    this._seed = x;
    return x % (RAND_MAX + 1) / -RAND_MAX;
  }
  setSeed(inSeed) {
    this._seed = inSeed | 0;
  }
}
// src/local-framework/graphics/index.ts
var exports_graphics = {};
__export(exports_graphics, {
  webgl2: () => {
    {
      return exports_webgl2;
    }
  },
  renderers: () => {
    {
      return exports_renderers;
    }
  },
  images: () => {
    {
      return exports_images;
    }
  },
  geometries: () => {
    {
      return exports_geometries;
    }
  },
  camera: () => {
    {
      return exports_camera;
    }
  }
});

// src/local-framework/graphics/camera/index.ts
var exports_camera = {};
__export(exports_camera, {
  screenToSceneCoordinatesFromInvComposed: () => {
    {
      return screenToSceneCoordinatesFromInvComposed;
    }
  },
  screenToSceneCoordinatesFromComposed: () => {
    {
      return screenToSceneCoordinatesFromComposed;
    }
  },
  screenToSceneCoordinates: () => {
    {
      return screenToSceneCoordinates;
    }
  },
  sceneToScreenCoordsFromComposed: () => {
    {
      return sceneToScreenCoordsFromComposed;
    }
  },
  sceneToScreenCoordinates: () => {
    {
      return sceneToScreenCoordinates;
    }
  },
  FrustumCulling: () => {
    {
      return FrustumCulling;
    }
  },
  Camera: () => {
    {
      return Camera;
    }
  }
});

// src/local-framework/graphics/camera/Camera.ts
var ProjectionType;
(function(ProjectionType2) {
  ProjectionType2[ProjectionType2["perspective"] = 0] = "perspective";
  ProjectionType2[ProjectionType2["orthogonal"] = 1] = "orthogonal";
})(ProjectionType || (ProjectionType = {}));

class Camera {
  _projectionType = ProjectionType.perspective;
  _perspectiveData;
  _orthogonalData;
  _viewportPos = exports_vec2.fromValues(0, 0);
  _viewportSize = exports_vec2.fromValues(0, 0);
  _projectionMatrix = exports_mat4.create();
  _viewMatrix = exports_mat4.create();
  _composedMatrix = exports_mat4.create();
  _eye = exports_vec3.fromValues(0, 0, 0);
  _target = exports_vec3.fromValues(0, 0, 0);
  _upAxis = exports_vec3.fromValues(0, 0, 0);
  setAsPerspective(inData) {
    this._projectionType = ProjectionType.perspective;
    let aspectRatio = inData.aspectRatio;
    if (aspectRatio === undefined) {
      aspectRatio = this._viewportSize[0] / this._viewportSize[1];
    }
    this._perspectiveData = {
      fovy: inData.fovy,
      aspectRatio,
      near: inData.near,
      far: inData.far
    };
  }
  setAsOrthogonal(inData) {
    this._projectionType = ProjectionType.orthogonal;
    this._orthogonalData = { ...inData };
  }
  setViewportPos(width, height) {
    this._viewportPos[0] = width;
    this._viewportPos[1] = height;
  }
  getViewportPos() {
    return this._viewportPos;
  }
  setViewportSize(width, height) {
    this._viewportSize[0] = width;
    this._viewportSize[1] = height;
    if (this._projectionType !== ProjectionType.perspective && this._perspectiveData) {
      this._perspectiveData.aspectRatio = this._viewportSize[0] / this._viewportSize[1];
    }
  }
  getViewportSize() {
    return this._viewportSize;
  }
  lookAt(inEye, inTarget, inUpAxis) {
    this.setEye(inEye);
    this.setTarget(inTarget);
    this.setUpAxis(inUpAxis);
  }
  setEye(inEye) {
    exports_vec3.copy(this._eye, inEye);
  }
  setTarget(inTarget) {
    exports_vec3.copy(this._target, inTarget);
  }
  setUpAxis(inUpAxis) {
    exports_vec3.copy(this._upAxis, inUpAxis);
  }
  getEye() {
    return this._eye;
  }
  getTarget() {
    return this._target;
  }
  getUpAxis() {
    return this._upAxis;
  }
  computeMatrices() {
    if (this._projectionType === ProjectionType.perspective) {
      const { fovy, aspectRatio, near, far } = this._perspectiveData;
      exports_mat4.perspective(this._projectionMatrix, deg2Rad(fovy), aspectRatio, near, far);
    } else if (this._projectionType === ProjectionType.orthogonal) {
      const { left, right, top, bottom, near, far } = this._orthogonalData;
      exports_mat4.ortho(this._projectionMatrix, left, right, top, bottom, near, far);
    }
    exports_mat4.lookAt(this._viewMatrix, this._eye, this._target, this._upAxis);
    this.computeComposedMatrix();
  }
  computeComposedMatrix() {
    exports_mat4.multiply(this._composedMatrix, this._projectionMatrix, this._viewMatrix);
  }
  setProjectionMatrix(inMat4) {
    exports_mat4.copy(this._projectionMatrix, inMat4);
  }
  setViewMatrix(inMat4) {
    exports_mat4.copy(this._viewMatrix, inMat4);
  }
  setComposedMatrix(inMat4) {
    exports_mat4.copy(this._composedMatrix, inMat4);
  }
  getProjectionMatrix() {
    return this._projectionMatrix;
  }
  getViewMatrix() {
    return this._viewMatrix;
  }
  getComposedMatrix() {
    return this._composedMatrix;
  }
  getPerspectiveData() {
    if (this._projectionType !== ProjectionType.perspective) {
      throw new Error("not a perspective projection");
    }
    return this._perspectiveData;
  }
  getOrthogonalData() {
    if (this._projectionType !== ProjectionType.orthogonal) {
      throw new Error("not an orthogonal projection");
    }
    return this._orthogonalData;
  }
}
// src/local-framework/graphics/camera/FrustumCulling.ts
var FrustumSide;
(function(FrustumSide2) {
  FrustumSide2[FrustumSide2["Right"] = 0] = "Right";
  FrustumSide2[FrustumSide2["Left"] = 1] = "Left";
  FrustumSide2[FrustumSide2["Bottom"] = 2] = "Bottom";
  FrustumSide2[FrustumSide2["Top"] = 3] = "Top";
  FrustumSide2[FrustumSide2["Back"] = 4] = "Back";
  FrustumSide2[FrustumSide2["Front"] = 5] = "Front";
})(FrustumSide || (FrustumSide = {}));

class FrustumCulling {
  _frustum = new Float32Array(24);
  _setPlane(side, left, right, coef) {
    const index = side * 4;
    this._frustum[index + 0] = left[0] + right[0] * coef;
    this._frustum[index + 1] = left[1] + right[1] * coef;
    this._frustum[index + 2] = left[2] + right[2] * coef;
    this._frustum[index + 3] = left[3] + right[3] * coef;
    const magnitude = Math.sqrt(this._frustum[index + 0] * this._frustum[index + 0] + this._frustum[index + 1] * this._frustum[index + 1] + this._frustum[index + 2] * this._frustum[index + 2]);
    if (magnitude === 0)
      return;
    this._frustum[index + 0] /= magnitude;
    this._frustum[index + 1] /= magnitude;
    this._frustum[index + 2] /= magnitude;
    this._frustum[index + 3] /= magnitude;
  }
  calculateFrustum(proj, view) {
    const clip = exports_mat4.multiply(exports_mat4.create(), proj, view);
    const row0 = exports_vec4.fromValues(clip[0], clip[4], clip[8], clip[12]);
    const row1 = exports_vec4.fromValues(clip[1], clip[5], clip[9], clip[13]);
    const row2 = exports_vec4.fromValues(clip[2], clip[6], clip[10], clip[14]);
    const row3 = exports_vec4.fromValues(clip[3], clip[7], clip[11], clip[15]);
    this._setPlane(FrustumSide.Right, row3, row0, -1);
    this._setPlane(FrustumSide.Left, row3, row0, 1);
    this._setPlane(FrustumSide.Bottom, row3, row1, 1);
    this._setPlane(FrustumSide.Top, row3, row1, -1);
    this._setPlane(FrustumSide.Back, row3, row2, -1);
    this._setPlane(FrustumSide.Front, row3, row2, 1);
  }
  sphereInFrustum(x, y, z, radius) {
    for (let ii = 0;ii < 6; ++ii) {
      const index = ii * 4;
      if (this._frustum[index + 0] * x + this._frustum[index + 1] * y + this._frustum[index + 2] * z + this._frustum[index + 3] <= -radius) {
        return false;
      }
    }
    return true;
  }
  pointInFrustum(x, y, z) {
    return this.sphereInFrustum(x, y, z, 0);
  }
  cubeInFrustumVec3(center, inSize) {
    return this.cubeInFrustum(center[0], center[1], center[2], inSize);
  }
  cubeInFrustum(inX, inY, inZ, inSize) {
    const hSize = inSize * 0.5;
    const minX = inX - hSize;
    const minY = inY - hSize;
    const minZ = inZ - hSize;
    const maxX = inX + hSize;
    const maxY = inY + hSize;
    const maxZ = inZ + hSize;
    for (let ii = 0;ii < 6; ++ii) {
      const index = ii * 4;
      const planA = this._frustum[index + 0];
      const planB = this._frustum[index + 1];
      const planC = this._frustum[index + 2];
      const planD = this._frustum[index + 3];
      if (planA * minX + planB * minY + planC * minZ + planD > 0 || planA * maxX + planB * minY + planC * minZ + planD > 0 || planA * minX + planB * maxY + planC * minZ + planD > 0 || planA * maxX + planB * maxY + planC * minZ + planD > 0 || planA * minX + planB * minY + planC * maxZ + planD > 0 || planA * maxX + planB * minY + planC * maxZ + planD > 0 || planA * minX + planB * maxY + planC * maxZ + planD > 0 || planA * maxX + planB * maxY + planC * maxZ + planD > 0) {
        continue;
      }
      return false;
    }
    return true;
  }
}
// src/local-framework/graphics/camera/sceneToScreenCoordinates.ts
var sceneToScreenCoordinates = (scenePos, modelView, projection, viewport) => {
  const composedMatrix = exports_mat4.create();
  exports_mat4.multiply(composedMatrix, projection, modelView);
  return sceneToScreenCoordsFromComposed(scenePos, composedMatrix, viewport);
};
var sceneToScreenCoordsFromComposed = (allScenePos, composedMatrix, viewport) => {
  const inputVec4 = exports_vec4.create();
  const multipliedVec4 = exports_vec4.create();
  const results = [];
  allScenePos.forEach((scenePos) => {
    inputVec4[0] = scenePos[0];
    inputVec4[1] = scenePos[1];
    inputVec4[2] = scenePos[2];
    inputVec4[3] = 1;
    exports_vec4.transformMat4(multipliedVec4, inputVec4, composedMatrix);
    if (multipliedVec4[3] === 0) {
      return null;
    }
    multipliedVec4[3] = 1 / multipliedVec4[3];
    multipliedVec4[0] *= multipliedVec4[3];
    multipliedVec4[1] *= multipliedVec4[3];
    multipliedVec4[2] *= multipliedVec4[3];
    multipliedVec4[0] = (multipliedVec4[0] * 0.5 + 0.5) * viewport[2] + viewport[0], multipliedVec4[1] = (multipliedVec4[1] * 0.5 + 0.5) * viewport[3] + viewport[1];
    results.push(exports_vec3.copy(exports_vec3.create(), multipliedVec4));
  });
  return results;
};
// src/local-framework/graphics/camera/screenToSceneCoordinates.ts
var screenToSceneCoordinates = (allScreenPos, modelView, projection, viewport) => {
  const composedMatrix = exports_mat4.multiply(exports_mat4.create(), projection, modelView);
  return screenToSceneCoordinatesFromComposed(allScreenPos, composedMatrix, viewport);
};
var screenToSceneCoordinatesFromComposed = (allScreenPos, composedMatrix, viewport) => {
  const invertedComposedMatrix = exports_mat4.invert(exports_mat4.create(), composedMatrix);
  return screenToSceneCoordinatesFromInvComposed(allScreenPos, invertedComposedMatrix, viewport);
};
var screenToSceneCoordinatesFromInvComposed = (allScreenPos, invertedComposedMatrix, viewport) => {
  const results = [];
  const multipliedVec4 = exports_vec4.create();
  allScreenPos.forEach((screenPos) => {
    multipliedVec4[0] = (screenPos[0] - viewport[0]) / viewport[2] * 2 - 1;
    multipliedVec4[1] = (screenPos[1] - viewport[1]) / viewport[3] * 2 - 1;
    multipliedVec4[2] = 2 * screenPos[2] - 1;
    multipliedVec4[3] = 1;
    exports_vec4.transformMat4(multipliedVec4, multipliedVec4, invertedComposedMatrix);
    if (multipliedVec4[3] === 0) {
      return;
    }
    multipliedVec4[3] = 1 / multipliedVec4[3];
    multipliedVec4[0] *= multipliedVec4[3];
    multipliedVec4[1] *= multipliedVec4[3];
    multipliedVec4[2] *= multipliedVec4[3];
    results.push(exports_vec3.copy(exports_vec3.create(), multipliedVec4));
  });
  return results;
};
// src/local-framework/graphics/renderers/index.ts
var exports_renderers = {};
__export(exports_renderers, {
  widgets: () => {
    {
      return exports_widgets;
    }
  },
  TextRenderer: () => {
    {
      return TextRenderer;
    }
  },
  StackRenderers: () => {
    {
      return StackRenderers;
    }
  },
  MultiBuffersRendering: () => {
    {
      return MultiBuffersRendering;
    }
  },
  GeometryRendererFlat: () => {
    {
      return GeometryRendererFlat;
    }
  },
  GeometryRenderer: () => {
    {
      return GeometryRenderer;
    }
  }
});

// src/local-framework/graphics/webgl2/index.ts
var exports_webgl2 = {};
__export(exports_webgl2, {
  getCubeMapType: () => {
    {
      return getCubeMapType;
    }
  },
  checkError: () => {
    {
      return checkError;
    }
  },
  WebGLContext: () => {
    {
      return WebGLContext;
    }
  },
  TextureRepeat: () => {
    {
      return TextureRepeat;
    }
  },
  TextureFilter: () => {
    {
      return TextureFilter;
    }
  },
  TextureArray: () => {
    {
      return TextureArray;
    }
  },
  Texture: () => {
    {
      return Texture;
    }
  },
  ShaderProgram: () => {
    {
      return ShaderProgram;
    }
  },
  RenderBuffer: () => {
    {
      return RenderBuffer;
    }
  },
  GeometryWrapper: () => {
    {
      return exports_GeometryWrapper;
    }
  },
  FrameBuffer: () => {
    {
      return FrameBuffer;
    }
  },
  FenceSync: () => {
    {
      return FenceSync;
    }
  },
  DataTextureVec4: () => {
    {
      return DataTextureVec4;
    }
  },
  DataTexture: () => {
    {
      return DataTexture;
    }
  },
  CubeMapType: () => {
    {
      return CubeMapType;
    }
  },
  CubeMap: () => {
    {
      return CubeMap;
    }
  }
});

// src/local-framework/graphics/webgl2/WebGLContext.ts
class WebGLContext {
  static _gl = null;
  static _extensionLoseContext = null;
  static initialize(canvas) {
    const renderingContextAttribs = {
      alpha: false,
      antialias: false,
      depth: true,
      failIfMajorPerformanceCaveat: false,
      powerPreference: "high-performance",
      premultipliedAlpha: true,
      preserveDrawingBuffer: true,
      stencil: false
    };
    WebGLContext._gl = canvas.getContext("webgl2", renderingContextAttribs);
    if (!WebGLContext._gl)
      throw new Error("could not create webgl context");
    WebGLContext._extensionLoseContext = WebGLContext._gl.getExtension("WEBGL_lose_context");
    WebGLContext._gl.getExtension("EXT_color_buffer_float");
    WebGLContext._gl.getExtension("EXT_float_blend");
  }
  static getContext() {
    if (!WebGLContext._gl) {
      throw new Error("webgl context not initialized");
    }
    return WebGLContext._gl;
  }
  static getExtensionLoseContext() {
    return WebGLContext._extensionLoseContext;
  }
  static getExtensionLoseContextStrict() {
    if (!WebGLContext._extensionLoseContext) {
      throw new Error("lose context extension not available");
    }
    return WebGLContext._extensionLoseContext;
  }
}

// src/local-framework/graphics/webgl2/CubeMap.ts
var CubeMapType;
(function(CubeMapType2) {
  CubeMapType2[CubeMapType2["positiveX"] = 0] = "positiveX";
  CubeMapType2[CubeMapType2["negativeX"] = 1] = "negativeX";
  CubeMapType2[CubeMapType2["positiveY"] = 2] = "positiveY";
  CubeMapType2[CubeMapType2["negativeY"] = 3] = "negativeY";
  CubeMapType2[CubeMapType2["positiveZ"] = 4] = "positiveZ";
  CubeMapType2[CubeMapType2["negativeZ"] = 5] = "negativeZ";
})(CubeMapType || (CubeMapType = {}));
var getCubeMapType = (inType) => {
  const gl = WebGLContext.getContext();
  switch (inType) {
    case CubeMapType.positiveX:
      return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
    case CubeMapType.negativeX:
      return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
    case CubeMapType.positiveY:
      return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
    case CubeMapType.negativeY:
      return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
    case CubeMapType.positiveZ:
      return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
    case CubeMapType.negativeZ:
      return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
  }
};

class CubeMap {
  _width = 0;
  _height = 0;
  _minBufferSize = 0;
  _texture = null;
  initialize(width, height) {
    if (width < 1)
      throw new Error(`cube map: width is < 1, input: ${width}`);
    if (height < 1)
      throw new Error(`cube map: height is < 1, input: ${height}`);
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
    this._width = width;
    this._height = height;
    this._minBufferSize = this._width * this._height * 4;
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  rawBind() {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._texture);
  }
  bind(inCallback) {
    this.rawBind();
    inCallback(this);
    CubeMap.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
  }
  loadFromMemory(inType, inPixels) {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    if (inPixels.length < this._minBufferSize)
      throw new Error(`cube map: miss-matching pixels buffer size, input: ${inPixels.length}`);
    const gl = WebGLContext.getContext();
    const level = 0;
    const internalFormat = gl.RGBA;
    const border = 0;
    const srcFormat = gl.RGBA;
    const srcType = gl.UNSIGNED_BYTE;
    gl.texImage2D(getCubeMapType(inType), level, internalFormat, this._width, this._height, border, srcFormat, srcType, inPixels);
  }
  allocate() {
    const gl = WebGLContext.getContext();
    const level = 0;
    const internalFormat = gl.RGBA;
    const border = 0;
    const srcFormat = gl.RGBA;
    const srcType = gl.UNSIGNED_BYTE;
    const pixels = new Uint8Array(this._width * this._height * 4);
    [
      CubeMapType.negativeX,
      CubeMapType.negativeY,
      CubeMapType.negativeZ,
      CubeMapType.positiveX,
      CubeMapType.positiveY,
      CubeMapType.positiveZ
    ].forEach((type) => {
      gl.texImage2D(getCubeMapType(type), level, internalFormat, this._width, this._height, border, srcFormat, srcType, pixels);
    });
  }
  complete() {
    const gl = WebGLContext.getContext();
    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
  }
  getWidth() {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    return this._width;
  }
  getHeight() {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    return this._height;
  }
  getRawObject() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._texture;
  }
}
// src/local-framework/graphics/webgl2/DataTexture.ts
class DataTexture {
  _texture = null;
  _buffer;
  initialize(data) {
    if (this._texture) {
      throw new Error("data texture already initialized");
    }
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
    if (!this._texture) {
      throw new Error("data texture failed to be created");
    }
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    this.allocate(data);
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  allocate(data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    const dataSize = Array.isArray(data) ? data.length : data;
    if (dataSize <= 0) {
      throw new Error("texture: width must be positive");
    }
    if (dataSize > 2048) {
      throw new Error(`data texture max size is 2048 (input was ${dataSize})`);
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    if (Array.isArray(data)) {
      this._buffer = new Float32Array(data);
    } else {
      this._buffer = new Float32Array(data);
    }
    const level = 0;
    const internalFormat = gl.R32F;
    const width = dataSize;
    const height = 1;
    const border = 0;
    const format = gl.RED;
    const type = gl.FLOAT;
    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, this._buffer);
  }
  update(start, data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    if (!this._buffer) {
      throw new Error("data texture update but not previously allocated");
    }
    if (start + data.length > this._buffer.length) {
      throw new Error(`data texture update but size is larger (start: ${start}, length: ${data.length}, max: ${this._buffer.length})`);
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    for (let ii = 0;ii < data.length; ++ii) {
      this._buffer[ii] = data[ii];
    }
    const level = 0;
    const width = data.length;
    const height = 1;
    const format = gl.RED;
    const type = gl.FLOAT;
    const xoffset = start;
    const yoffset = 0;
    const srcOffset = 0;
    gl.texSubImage2D(gl.TEXTURE_2D, level, xoffset, yoffset, width, height, format, type, this._buffer, srcOffset);
  }
  rawBind() {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    DataTexture.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, null);
  }
}
// src/local-framework/graphics/webgl2/DataTextureVec4.ts
class DataTextureVec4 {
  _texture = null;
  _buffer;
  initialize(data = []) {
    if (this._texture) {
      throw new Error("data texture already initialized");
    }
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
    if (!this._texture) {
      throw new Error("data texture failed to be created");
    }
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    this.allocate(data);
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  allocate(data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    if (data.length <= 0) {
      throw new Error("texture: width must be positive");
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    this._buffer = new Uint8Array(data.flat());
    const level = 0;
    const internalFormat = gl.RGBA;
    const width = data.length;
    const height = 1;
    const border = 0;
    const format = gl.RGBA;
    const type = gl.UNSIGNED_BYTE;
    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, this._buffer);
  }
  update(start, data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    if (!this._buffer) {
      throw new Error("data texture update but not previously allocated");
    }
    if (start + data.length > this._buffer.length) {
      throw new Error(`data texture update but size is larger (start: ${start}, length: ${data.length}, max: ${this._buffer.length})`);
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    for (let ii = 0;ii < data.length; ++ii) {
      this._buffer[ii * 4 + 0] = data[ii][0];
      this._buffer[ii * 4 + 1] = data[ii][1];
      this._buffer[ii * 4 + 2] = data[ii][2];
      this._buffer[ii * 4 + 3] = data[ii][3];
    }
    const level = 0;
    const width = data.length;
    const height = 1;
    const format = gl.RGBA;
    const type = gl.UNSIGNED_BYTE;
    const xoffset = start;
    const yoffset = 0;
    const srcOffset = 0;
    gl.texSubImage2D(gl.TEXTURE_2D, level, xoffset, yoffset, width, height, format, type, this._buffer, srcOffset);
  }
  rawBind() {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    DataTextureVec4.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, null);
  }
}
// src/local-framework/graphics/webgl2/Error.ts
var checkError = () => {
  const gl = WebGLContext.getContext();
  const errorId = gl.getError();
  switch (errorId) {
    case gl.INVALID_ENUM:
      throw new Error("gl.INVALID_ENUM\nAn unacceptable value is specified for an enumerated argument. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.INVALID_VALUE:
      throw new Error("gl.INVALID_VALUE\nA numeric argument is out of range. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.INVALID_OPERATION:
      throw new Error("gl.INVALID_OPERATION\nThe specified operation is not allowed in the current state. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.INVALID_FRAMEBUFFER_OPERATION:
      throw new Error("gl.INVALID_FRAMEBUFFER_OPERATION\nThe framebuffer object is not complete. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.OUT_OF_MEMORY:
      throw new Error("gl.OUT_OF_MEMORY\nThere is not enough memory left to execute the command. The state of the GL is undefined, except for the state of the error flags, after this error is recorded.");
    case gl.CONTEXT_LOST_WEBGL:
      throw new Error("gl.CONTEXT_LOST_WEBGL\n If the WebGL context is lost, this error is returned on the first call to getError. Afterwards and until the context has been restored, it returns gl.NO_ERROR.");
  }
};
// src/local-framework/graphics/webgl2/Fence.ts
class FenceSync {
  _sync;
  constructor() {
  }
  dispose() {
    if (!this._sync) {
      return;
    }
    const gl = WebGLContext.getContext();
    gl.deleteSync(this._sync);
    this._sync = undefined;
  }
  isStarted() {
    return this._sync !== undefined;
  }
  start() {
    if (this._sync) {
      this.dispose();
    }
    const gl = WebGLContext.getContext();
    const tmpSync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
    if (tmpSync === null) {
      throw new Error("could not create a webgl fence");
    }
    this._sync = tmpSync;
    gl.flush();
    gl.finish();
  }
  isSignaled() {
    if (!this._sync) {
      throw new Error("fence not started");
    }
    const gl = WebGLContext.getContext();
    const signaled = gl.getSyncParameter(this._sync, gl.SYNC_STATUS);
    return signaled === gl.SIGNALED;
  }
  wait(timeoutNanoSec) {
    if (!this._sync) {
      throw new Error("fence not started");
    }
    const gl = WebGLContext.getContext();
    const bitflags = 0;
    const status = gl.clientWaitSync(this._sync, bitflags, timeoutNanoSec);
    switch (status) {
      case gl.TIMEOUT_EXPIRED:
        return "timed-out";
      case gl.WAIT_FAILED:
        console.warn("fence.wait -> should never get here");
        this.dispose();
        return "done";
      case gl.ALREADY_SIGNALED:
      case gl.CONDITION_SATISFIED:
      default:
        this.dispose();
        return "done";
    }
  }
}
// src/local-framework/graphics/webgl2/FrameBuffer.ts
class FrameBuffer {
  _frameBuffer;
  constructor() {
    const gl = WebGLContext.getContext();
    const tmpFbo = gl.createFramebuffer();
    if (tmpFbo === null)
      throw new Error("null frame buffer object");
    this._frameBuffer = tmpFbo;
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteFramebuffer(this._frameBuffer);
  }
  rawBind() {
    const gl = WebGLContext.getContext();
    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
  }
  bind(inCallback) {
    this.rawBind();
    inCallback(this);
    FrameBuffer.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  }
  attachTexture(texture) {
    const gl = WebGLContext.getContext();
    const mipmapLevel = 0;
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture.getRawObject(), mipmapLevel);
  }
  attachDepthTexture(texture) {
    const gl = WebGLContext.getContext();
    const mipmapLevel = 0;
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture.getRawObject(), mipmapLevel);
  }
  attachRenderBuffer(texture) {
    const gl = WebGLContext.getContext();
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, texture.getRawObject());
  }
  attachCubeMap(texture, type) {
    const gl = WebGLContext.getContext();
    const mipmapLevel = 0;
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, getCubeMapType(type), texture.getRawObject(), mipmapLevel);
  }
  getPixels(x, y, width, height, outDst) {
    const gl = WebGLContext.getContext();
    gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, outDst);
  }
}
// src/local-framework/graphics/webgl2/GeometryWrapper.ts
var exports_GeometryWrapper = {};
__export(exports_GeometryWrapper, {
  PrimitiveType: () => {
    {
      return PrimitiveType;
    }
  },
  GeometryBuilder: () => {
    {
      return GeometryBuilder;
    }
  },
  Geometry: () => {
    {
      return Geometry;
    }
  },
  BytesPerPixel: () => {
    {
      return BytesPerPixel;
    }
  },
  AttributeType: () => {
    {
      return AttributeType;
    }
  }
});
var BytesPerPixel = 4;
var AttributeType;
(function(AttributeType2) {
  AttributeType2[AttributeType2["float"] = 0] = "float";
  AttributeType2[AttributeType2["vec2f"] = 1] = "vec2f";
  AttributeType2[AttributeType2["vec3f"] = 2] = "vec3f";
  AttributeType2[AttributeType2["vec4f"] = 3] = "vec4f";
  AttributeType2[AttributeType2["mat3f"] = 4] = "mat3f";
  AttributeType2[AttributeType2["mat4f"] = 5] = "mat4f";
})(AttributeType || (AttributeType = {}));
var getAttrTypeSize = (inType) => {
  switch (inType) {
    case AttributeType.float:
      return 1;
    case AttributeType.vec2f:
      return 2;
    case AttributeType.vec3f:
      return 3;
    case AttributeType.vec4f:
      return 4;
    case AttributeType.mat3f:
      return 9;
    case AttributeType.mat4f:
      return 16;
  }
};
var PrimitiveType;
(function(PrimitiveType2) {
  PrimitiveType2[PrimitiveType2["lines"] = 0] = "lines";
  PrimitiveType2[PrimitiveType2["lineStrip"] = 1] = "lineStrip";
  PrimitiveType2[PrimitiveType2["lineLoop"] = 2] = "lineLoop";
  PrimitiveType2[PrimitiveType2["triangles"] = 3] = "triangles";
  PrimitiveType2[PrimitiveType2["triangleStrip"] = 4] = "triangleStrip";
  PrimitiveType2[PrimitiveType2["triangleFan"] = 5] = "triangleFan";
})(PrimitiveType || (PrimitiveType = {}));
var _ensureFloatBuffer = (vertices) => {
  if (vertices instanceof Float32Array) {
    return vertices;
  }
  return new Float32Array(vertices);
};
var _getBufferUsage = (inMode) => {
  const gl = WebGLContext.getContext();
  if (inMode === "dynamic") {
    return gl.DYNAMIC_DRAW;
  }
  if (inMode === "streaming") {
    return gl.STREAM_DRAW;
  }
  return gl.STATIC_DRAW;
};

class Geometry {
  _def;
  _vao;
  _vbos;
  _primitiveType;
  _primitiveStart = 0;
  _primitiveCount = 0;
  _instanceCount = 0;
  _isInstanced = false;
  constructor(shader, def) {
    const gl = WebGLContext.getContext();
    if (def.vbos.length === 0) {
      throw new Error("empty vbo definition");
    }
    for (const vbo of def.vbos) {
      if (vbo.attrs.length === 0) {
        throw new Error("empty vbo attribute definition");
      }
      for (const attr of vbo.attrs) {
        if (!shader.hasAttribute(attr.name)) {
          throw new Error(`attribute not found, name="${attr.name}"`);
        }
      }
    }
    this._def = def;
    switch (def.primitiveType) {
      case PrimitiveType.lines:
        this._primitiveType = gl.LINES;
        break;
      case PrimitiveType.lineStrip:
        this._primitiveType = gl.LINE_STRIP;
        break;
      case PrimitiveType.lineLoop:
        this._primitiveType = gl.LINE_LOOP;
        break;
      case PrimitiveType.triangles:
        this._primitiveType = gl.TRIANGLES;
        break;
      case PrimitiveType.triangleStrip:
        this._primitiveType = gl.TRIANGLE_STRIP;
        break;
      case PrimitiveType.triangleFan:
        this._primitiveType = gl.TRIANGLE_FAN;
        break;
      default:
        throw new Error("primitive type not found");
    }
    const newVao = gl.createVertexArray();
    if (!newVao) {
      throw new Error("fail o create a vao unit");
    }
    this._vao = newVao;
    gl.bindVertexArray(this._vao);
    this._vbos = [];
    for (const vboDef of this._def.vbos) {
      const newVbo = gl.createBuffer();
      if (!newVbo) {
        throw new Error("fail o create a vbo unit");
      }
      this._vbos.push({
        object: newVbo,
        maxSize: 0,
        mode: vboDef.mode || "static"
      });
      gl.bindBuffer(gl.ARRAY_BUFFER, newVbo);
      let stride = vboDef.stride || 0;
      if (!stride) {
        for (const attr of vboDef.attrs) {
          switch (attr.type) {
            case AttributeType.float:
              stride += 1;
              break;
            case AttributeType.vec2f:
              stride += 2;
              break;
            case AttributeType.vec3f:
              stride += 3;
              break;
            case AttributeType.vec4f:
              stride += 4;
              break;
            case AttributeType.mat3f:
              stride += 9;
              break;
            case AttributeType.mat4f:
              stride += 16;
              break;
          }
        }
        stride *= BytesPerPixel;
      }
      for (const attr of vboDef.attrs) {
        let rowSize = 1;
        let totalRows = 1;
        switch (attr.type) {
          case AttributeType.float:
            rowSize = 1;
            totalRows = 1;
            break;
          case AttributeType.vec2f:
            rowSize = 2;
            totalRows = 1;
            break;
          case AttributeType.vec3f:
            rowSize = 3;
            totalRows = 1;
            break;
          case AttributeType.vec4f:
            rowSize = 4;
            totalRows = 1;
            break;
          case AttributeType.mat3f:
            rowSize = 3;
            totalRows = 3;
            break;
          case AttributeType.mat4f:
            rowSize = 4;
            totalRows = 4;
            break;
        }
        const attrLocation = shader.getAttribute(attr.name);
        for (let ii = 0;ii < totalRows; ++ii) {
          const attrId = attrLocation + ii;
          const rowIndex = (attr.index + ii * rowSize) * BytesPerPixel;
          gl.enableVertexAttribArray(attrId);
          gl.vertexAttribPointer(attrId, rowSize, gl.FLOAT, false, stride, rowIndex);
          if (vboDef.instanced === true) {
            gl.vertexAttribDivisor(attrId, 1);
            this._isInstanced = true;
          }
        }
      }
    }
    gl.bindVertexArray(null);
  }
  dispose() {
    const gl = WebGLContext.getContext();
    for (const vbo of this._vbos) {
      gl.deleteBuffer(vbo.object);
    }
    this._vbos.length = 0;
    gl.deleteVertexArray(this._vao);
  }
  setBufferSize(inIndex, inSize) {
    if (inIndex < 0 || inIndex >= this._vbos.length) {
      throw new Error(`no vbo available to that index (input: ${inIndex})`);
    }
    if (inSize <= 0) {
      throw new Error(`vbo must be > 0 (input: ${inSize})`);
    }
    const currVbo = this._vbos[inIndex];
    if (inSize < currVbo.maxSize) {
      return;
    }
    currVbo.maxSize = inSize;
    const gl = WebGLContext.getContext();
    gl.bindBuffer(gl.ARRAY_BUFFER, currVbo.object);
    gl.bufferData(gl.ARRAY_BUFFER, inSize, _getBufferUsage(currVbo.mode));
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  }
  setFloatBufferSize(index, inSize) {
    this.setBufferSize(index, inSize * 4);
  }
  allocateBuffer(inIndex, inVertices, inSize) {
    if (inIndex < 0 || inIndex >= this._vbos.length) {
      throw new Error(`no vbo available to that index (input: ${inIndex}, total vbos: ${this._vbos.length})`);
    }
    if (inSize <= 0) {
      throw new Error(`size must be > 0 (input: ${inSize})`);
    }
    const currVbo = this._vbos[inIndex];
    if (inSize <= 0) {
      throw new Error(`vbo must be > 0 (input: ${inSize})`);
    }
    currVbo.maxSize = inSize;
    const buffer = _ensureFloatBuffer(inVertices);
    const gl = WebGLContext.getContext();
    gl.bindBuffer(gl.ARRAY_BUFFER, currVbo.object);
    gl.bufferData(gl.ARRAY_BUFFER, buffer, _getBufferUsage(currVbo.mode), 0, inSize);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  }
  updateBuffer(inIndex, inVertices, inSize, inStartOffset) {
    if (inIndex < 0 || inIndex >= this._vbos.length) {
      throw new Error(`no vbo available to that index (input: ${inIndex}, total vbos: ${this._vbos.length})`);
    }
    if (inSize <= 0) {
      throw new Error(`size must be > 0 (input: ${inSize})`);
    }
    const currVbo = this._vbos[inIndex];
    if (inStartOffset !== undefined) {
      if (inStartOffset < 0) {
        throw new Error(`offset must be >= 0 (input: ${inStartOffset})`);
      }
      const endIndex = inStartOffset + inSize;
      if (endIndex > currVbo.maxSize) {
        throw new Error(`offset + size > to vbo max size (input: ${endIndex}, max size: ${currVbo.maxSize})`);
      }
    } else if (inSize > currVbo.maxSize) {
      throw new Error(`size must be < to vbo max size (input: ${inSize}, max size: ${currVbo.maxSize})`);
    }
    const buffer = _ensureFloatBuffer(inVertices);
    const gl = WebGLContext.getContext();
    gl.bindBuffer(gl.ARRAY_BUFFER, currVbo.object);
    gl.bufferSubData(gl.ARRAY_BUFFER, inStartOffset ?? 0, buffer, 0, inSize);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  }
  render() {
    if (this._primitiveCount == 0) {
      return;
    }
    if (this._isInstanced && this._instanceCount == 0) {
      return;
    }
    const gl = WebGLContext.getContext();
    gl.bindVertexArray(this._vao);
    if (this._isInstanced === true) {
      gl.drawArraysInstanced(this._primitiveType, this._primitiveStart, this._primitiveCount, this._instanceCount);
    } else {
      gl.drawArrays(this._primitiveType, this._primitiveStart, this._primitiveCount);
    }
    gl.bindVertexArray(null);
  }
  setPrimitiveStart(start) {
    this._primitiveStart = start;
  }
  setPrimitiveCount(count) {
    this._primitiveCount = count;
  }
  setInstancedCount(count) {
    this._instanceCount = count;
  }
}

class GeometryBuilder {
  _def = {
    vbos: [],
    primitiveType: PrimitiveType.lines
  };
  reset() {
    this._def = {
      vbos: [],
      primitiveType: PrimitiveType.lines
    };
    return this;
  }
  getDef() {
    return this._def;
  }
  setPrimitiveType(inPrimitive) {
    this._def.primitiveType = PrimitiveType[inPrimitive];
    return this;
  }
  addVbo() {
    this._def.vbos.push({
      attrs: [],
      instanced: false
    });
    return this;
  }
  setVboAsInstanced() {
    this._getLastVbo().instanced = true;
    return this;
  }
  setVboAsDynamic() {
    this._getLastVbo().mode = "dynamic";
    return this;
  }
  setVboAsStreaming() {
    this._getLastVbo().mode = "streaming";
    return this;
  }
  setStride(inStride) {
    this._getLastVbo().stride = inStride;
    return this;
  }
  addVboAttribute(inName, inType) {
    const currVbo = this._getLastVbo();
    const lastAttr = currVbo.attrs.length > 0 ? currVbo.attrs[currVbo.attrs.length - 1] : null;
    currVbo.attrs.push({
      name: inName,
      type: AttributeType[inType],
      index: lastAttr ? lastAttr.index + getAttrTypeSize(lastAttr.type) : 0
    });
    return this;
  }
  _getLastVbo() {
    if (this._def.vbos.length === 0) {
      throw new Error("no VBO setup");
    }
    return this._def.vbos[this._def.vbos.length - 1];
  }
}
// src/local-framework/graphics/webgl2/RenderBuffer.ts
class RenderBuffer {
  _buffer;
  constructor() {
    const gl = WebGLContext.getContext();
    const tmpBuf = gl.createRenderbuffer();
    if (tmpBuf === null) {
      throw new Error("null render buffer object");
    }
    this._buffer = tmpBuf;
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteRenderbuffer(this._buffer);
  }
  rawBind() {
    const gl = WebGLContext.getContext();
    gl.bindRenderbuffer(gl.RENDERBUFFER, this._buffer);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    RenderBuffer.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
  }
  setSize(type, width, height) {
    const gl = WebGLContext.getContext();
    let internalFormat = gl.DEPTH_COMPONENT32F;
    switch (type) {
      case "depth16": {
        internalFormat = gl.DEPTH_COMPONENT16;
        break;
      }
      case "depth24": {
        internalFormat = gl.DEPTH_COMPONENT16;
        break;
      }
    }
    gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);
  }
  getRawObject() {
    return this._buffer;
  }
}
// src/local-framework/graphics/webgl2/ShaderProgram.ts
class ShaderProgram {
  static _isBound = null;
  _name;
  _program;
  _attributes = new Map;
  _uniforms = new Map;
  constructor(inName, opt) {
    this._name = inName;
    const gl = WebGLContext.getContext();
    const vertexShader = this._getShader(opt.vertexSrc, gl.VERTEX_SHADER);
    const fragmentShader = this._getShader(opt.fragmentSrc, gl.FRAGMENT_SHADER);
    const program = gl.createProgram();
    if (!program) {
      throw new Error("could not create a shader program");
    }
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    gl.deleteShader(vertexShader);
    gl.deleteShader(fragmentShader);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      const lastError = gl.getProgramInfoLog(program);
      throw new Error("Failed to initialized shaders, Error linking:" + lastError);
    }
    this._program = program;
    this.bind(() => {
      this._getAttributes(opt.attributes);
      this._getUniforms(opt.uniforms);
    });
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteProgram(this._program);
  }
  bind(inCallback) {
    if (ShaderProgram._isBound !== null) {
      throw new Error(`Double shader binding (bound: ${ShaderProgram._isBound._name}, binding: ${this._name})`);
    }
    ShaderProgram._isBound = this;
    const gl = WebGLContext.getContext();
    gl.useProgram(this._program);
    inCallback(this);
    ShaderProgram.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.useProgram(null);
    ShaderProgram._isBound = null;
  }
  isBound() {
    return ShaderProgram._isBound === this;
  }
  hasAttribute(name) {
    return this._attributes.has(name);
  }
  getAttribute(name) {
    const attribute = this._attributes.get(name);
    if (attribute === undefined) {
      throw new Error(`attribute not found: ${name}`);
    }
    return attribute;
  }
  getUniform(name) {
    const uniform = this._uniforms.get(name);
    if (uniform === undefined) {
      throw new Error(`uniform not found: ${name}`);
    }
    return uniform;
  }
  setTextureUniform(inName, inTexture, inIndex) {
    const gl = WebGLContext.getContext();
    gl.activeTexture(gl.TEXTURE0 + inIndex);
    gl.uniform1i(this.getUniform(inName), inIndex);
    inTexture.rawBind();
  }
  setInteger1Uniform(inName, inValue) {
    const gl = WebGLContext.getContext();
    gl.uniform1i(this.getUniform(inName), inValue);
  }
  setInteger2Uniform(inName, inValueX, inValueY) {
    const gl = WebGLContext.getContext();
    gl.uniform2i(this.getUniform(inName), inValueX, inValueY);
  }
  setInteger3Uniform(inName, inValueX, inValueY, inValueZ) {
    const gl = WebGLContext.getContext();
    gl.uniform3i(this.getUniform(inName), inValueX, inValueY, inValueZ);
  }
  setFloat1Uniform(inName, inValue) {
    const gl = WebGLContext.getContext();
    gl.uniform1f(this.getUniform(inName), inValue);
  }
  setFloat2Uniform(inName, inValueX, inValueY) {
    const gl = WebGLContext.getContext();
    gl.uniform2f(this.getUniform(inName), inValueX, inValueY);
  }
  setFloat3Uniform(inName, inValueX, inValueY, inValueZ) {
    const gl = WebGLContext.getContext();
    gl.uniform3f(this.getUniform(inName), inValueX, inValueY, inValueZ);
  }
  setMatrix3Uniform(inName, inMatrix) {
    const gl = WebGLContext.getContext();
    gl.uniformMatrix3fv(this.getUniform(inName), false, inMatrix);
  }
  setMatrix4Uniform(inName, inMatrix) {
    const gl = WebGLContext.getContext();
    gl.uniformMatrix4fv(this.getUniform(inName), false, inMatrix);
  }
  _getAttributes(attributes) {
    const gl = WebGLContext.getContext();
    for (let ii = 0;ii < attributes.length; ++ii) {
      const value = gl.getAttribLocation(this._program, attributes[ii]);
      if (value < 0) {
        throw new Error(`attribute not found => ${attributes[ii]}`);
      }
      this._attributes.set(attributes[ii], value);
    }
  }
  _getUniforms(uniforms) {
    const gl = WebGLContext.getContext();
    for (let ii = 0;ii < uniforms.length; ++ii) {
      const value = gl.getUniformLocation(this._program, uniforms[ii]);
      if (value === null) {
        throw new Error(`uniform not found => ${uniforms[ii]}`);
      }
      this._uniforms.set(uniforms[ii], value);
    }
  }
  _getShader(src, type) {
    const gl = WebGLContext.getContext();
    const shader = gl.createShader(type);
    if (!shader) {
      throw new Error("could not create a shader");
    }
    gl.shaderSource(shader, src);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      let error_str = gl.getShaderInfoLog(shader);
      if (!error_str)
        error_str = "failed to compile a shader";
      throw new Error(error_str);
    }
    return shader;
  }
}
// src/local-framework/graphics/webgl2/Texture.ts
var TextureFilter;
(function(TextureFilter2) {
  TextureFilter2[TextureFilter2["pixelated"] = 0] = "pixelated";
  TextureFilter2[TextureFilter2["linear"] = 1] = "linear";
  TextureFilter2[TextureFilter2["mipmap"] = 2] = "mipmap";
})(TextureFilter || (TextureFilter = {}));
var TextureRepeat;
(function(TextureRepeat2) {
  TextureRepeat2[TextureRepeat2["noRepeat"] = 0] = "noRepeat";
  TextureRepeat2[TextureRepeat2["repeat"] = 1] = "repeat";
})(TextureRepeat || (TextureRepeat = {}));

class Texture {
  _width = 0;
  _height = 0;
  _texture = null;
  initialize() {
    if (this._texture)
      throw new Error("texture: already initialized");
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
  }
  rawBind() {
    if (!this._texture)
      throw new Error("texture: not initialized");
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    Texture.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, null);
  }
  loadFromImage(inImage, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inImage.width, inImage.height, inImage, mode, repeat);
  }
  loadFromMemory(inWidth, inHeight, inPixels, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, inPixels, mode, repeat);
  }
  allocate(inWidth, inHeight, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, null, mode, repeat);
  }
  allocateDepth(inWidth, inHeight, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, null, mode, repeat, true);
  }
  resize(inWidth, inHeight, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, null, mode, repeat);
  }
  _allocate(inWidth, inHeight, inPixels = null, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat, isDepthTexture = false) {
    if (!this._texture) {
      throw new Error("texture: not initialized");
    }
    if (inWidth <= 0) {
      throw new Error("texture: width must be positive");
    }
    if (inHeight <= 0) {
      throw new Error("texture: height must be positive");
    }
    const gl = WebGLContext.getContext();
    this._width = inWidth;
    this._height = inHeight;
    const level = 0;
    const internalFormat = isDepthTexture ? gl.DEPTH_COMPONENT32F : gl.RGBA;
    const border = 0;
    const srcFormat = isDepthTexture ? gl.DEPTH_COMPONENT : gl.RGBA;
    const srcType = isDepthTexture ? gl.FLOAT : gl.UNSIGNED_BYTE;
    if (inPixels instanceof HTMLImageElement) {
      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, inPixels);
    } else {
      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, inWidth, inHeight, border, srcFormat, srcType, inPixels);
    }
    if (repeat === TextureRepeat.noRepeat) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    } else if (repeat === TextureRepeat.repeat) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
    }
    if (mode === TextureFilter.pixelated) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    } else if (mode === TextureFilter.linear) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    } else if (mode === TextureFilter.mipmap) {
      gl.generateMipmap(gl.TEXTURE_2D);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
    }
  }
  getWidth() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._width;
  }
  getHeight() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._height;
  }
  getRawObject() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._texture;
  }
}
// src/local-framework/graphics/webgl2/TextureArray.ts
class TextureArray {
  _width = 0;
  _height = 0;
  _texture = null;
  initialize() {
    if (this._texture)
      throw new Error("texture: already initialized");
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  rawBind() {
    if (!this._texture)
      throw new Error("texture: not initialized");
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D_ARRAY, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    TextureArray.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D_ARRAY, null);
  }
  loadFromImage(inWidth, inHeight, inTotalLayers, inImage, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, inTotalLayers, inImage, mode, repeat);
  }
  loadFromMemory(inWidth, inHeight, inTotalLayers, inPixels, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, inTotalLayers, inPixels, mode, repeat);
  }
  _allocate(inWidth, inHeight, inTotalLayers, inPixels = null, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    if (!this._texture) {
      throw new Error("texture: not initialized");
    }
    if (inWidth <= 0) {
      throw new Error("texture: width must be positive");
    }
    if (inHeight <= 0) {
      throw new Error("texture: height must be positive");
    }
    const gl = WebGLContext.getContext();
    this._width = inWidth;
    this._height = inHeight;
    const level = 0;
    const internalFormat = gl.RGBA;
    const border = 0;
    const srcFormat = gl.RGBA;
    const srcType = gl.UNSIGNED_BYTE;
    if (inPixels instanceof HTMLImageElement) {
      gl.texImage3D(gl.TEXTURE_2D_ARRAY, level, internalFormat, inWidth, inHeight, inTotalLayers, border, srcFormat, srcType, inPixels);
    } else {
      gl.texImage3D(gl.TEXTURE_2D_ARRAY, level, internalFormat, inWidth, inHeight, inTotalLayers, border, srcFormat, srcType, inPixels);
    }
    if (repeat === TextureRepeat.noRepeat) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    } else if (repeat === TextureRepeat.repeat) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, gl.REPEAT);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, gl.REPEAT);
    }
    if (mode === TextureFilter.pixelated) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    } else if (mode === TextureFilter.linear) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    } else if (mode === TextureFilter.mipmap) {
      gl.generateMipmap(gl.TEXTURE_2D_ARRAY);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
    }
  }
  getWidth() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._width;
  }
  getHeight() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._height;
  }
  getRawObject() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._texture;
  }
}
// src/local-framework/graphics/renderers/geometry-renderer/shaders/geometry-renderer.glsl.vert
var geometry_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3 a_vertex_position;
in vec3 a_vertex_normal;

in vec3 a_offset_center;
in vec4 a_offset_orientation;
in vec3 a_offset_color;
in vec3 a_offset_scale;

flat out vec4 v_color;
out vec3 v_worldSpacePosition;
out vec3 v_worldSpaceNormal;


vec3 apply_quat_to_vec3(vec3 position, vec4 q)
{
  vec3 v = position.xyz;
  return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

void main(void)
{
	vec3 worldSpacePosition = a_offset_center + apply_quat_to_vec3(a_vertex_position * a_offset_scale, a_offset_orientation);
	vec3 worldSpaceNormal = apply_quat_to_vec3(a_vertex_normal, a_offset_orientation);

  gl_Position = u_composedMatrix * vec4(worldSpacePosition, 1.0);

  v_color = vec4(a_offset_color, 1.0);
  v_worldSpacePosition = worldSpacePosition;
  v_worldSpaceNormal = worldSpaceNormal;
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer/shaders/geometry-renderer.glsl.frag
var geometry_renderer_glsl_default2 = `
#version 300 es

precision lowp float;

uniform vec3 u_lightPos;

flat in vec4 v_color;
in vec3 v_worldSpacePosition;
in vec3 v_worldSpaceNormal;

out vec4 o_color;

//
//
//

const float k_ambiantCoef = 0.1;

const vec3 k_specColor = vec3(1.0, 1.0, 1.0);

vec3 _getLightColor(vec4 currentColor)
{
  vec3 normal = normalize(v_worldSpaceNormal);
  vec3 lightDir = normalize(u_lightPos - v_worldSpacePosition);

  float diffuseCoef = max(dot(lightDir, v_worldSpaceNormal.xyz), 0.0);
  float specularCoef = 0.0;

  // if (diffuseCoef > 0.0 && v_skipSpecular < 0.5)
  // {
  //   // specular

  //   vec3 reflectDir = reflect(-lightDir, normal);
  //   vec3 viewDir = normalize(u_lightPos - v_worldSpacePosition);

  //   float specAngle = max(dot(reflectDir, viewDir), 0.0);
  //   specularCoef = pow(specAngle, 32.0);
  // }

  vec3 diffuseColor = currentColor.rgb * (k_ambiantCoef + diffuseCoef);
  vec3 specularColor = k_specColor * specularCoef * currentColor.a;

  return diffuseColor + specularColor;
}

//
//
//

void main(void)
{
  o_color = vec4(_getLightColor(v_color), 1.0);
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer/GeometryRenderer.ts
var k_bufferSize = 14336;

class GeometryRenderer {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize);
  _currentSize = 0;
  constructor() {
    this._shader = new ShaderProgram("GeometryRenderer", {
      vertexSrc: geometry_renderer_glsl_default,
      fragmentSrc: geometry_renderer_glsl_default2,
      attributes: [
        "a_vertex_position",
        "a_vertex_normal",
        "a_offset_center",
        "a_offset_orientation",
        "a_offset_color",
        "a_offset_scale"
      ],
      uniforms: ["u_composedMatrix", "u_lightPos"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangles").addVbo().addVboAttribute("a_vertex_position", "vec3f").addVboAttribute("a_vertex_normal", "vec3f").addVbo().setVboAsStreaming().setVboAsInstanced().addVboAttribute("a_offset_center", "vec3f").addVboAttribute("a_offset_orientation", "vec4f").addVboAttribute("a_offset_color", "vec3f").addVboAttribute("a_offset_scale", "vec3f");
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    this._geometry.setFloatBufferSize(1, k_bufferSize);
  }
  setGeometryVertices(vertices) {
    const buf = new Float32Array([...vertices.map((val) => [...val.pos, ...val.normal]).flat()]);
    this._geometry.allocateBuffer(0, buf, buf.length);
    this._geometry.setPrimitiveCount(buf.length / 6);
  }
  push(inPointA, inQuat, inColor, inScale) {
    if (this._currentSize + 13 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this._flush();
      } else {
        return;
      }
    }
    this._buffer[this._currentSize++] = inPointA[0];
    this._buffer[this._currentSize++] = inPointA[1];
    this._buffer[this._currentSize++] = inPointA[2];
    this._buffer[this._currentSize++] = inQuat[0];
    this._buffer[this._currentSize++] = inQuat[1];
    this._buffer[this._currentSize++] = inQuat[2];
    this._buffer[this._currentSize++] = inQuat[3];
    this._buffer[this._currentSize++] = inColor[0];
    this._buffer[this._currentSize++] = inColor[1];
    this._buffer[this._currentSize++] = inColor[2];
    this._buffer[this._currentSize++] = inScale[0];
    this._buffer[this._currentSize++] = inScale[1];
    this._buffer[this._currentSize++] = inScale[2];
  }
  flush(inCamera) {
    if (!this.canRender()) {
      return;
    }
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      const eyePos = inCamera.getEye();
      bound.setFloat3Uniform("u_lightPos", eyePos[0], eyePos[1], eyePos[2]);
      this._flush();
    });
  }
  safeRender(inCamera, inCallback) {
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      const eyePos = inCamera.getEye();
      bound.setFloat3Uniform("u_lightPos", eyePos[0], eyePos[1], eyePos[2]);
      inCallback();
      this._flush();
    });
  }
  _flush() {
    this._geometry.updateBuffer(1, this._buffer, this._currentSize, 0);
    this._geometry.setInstancedCount(this._currentSize / 13);
    this._geometry.render();
    this.clear();
  }
  canRender() {
    return this._currentSize > 0;
  }
  clear() {
    this._currentSize = 0;
  }
}
// src/local-framework/graphics/renderers/geometry-renderer-flat/shaders/geometry-renderer-flat.glsl.vert
var geometry_renderer_flat_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3 a_vertex_position;

in vec3 a_offset_center;
in vec4 a_offset_orientation;
in vec3 a_offset_color;
in vec3 a_offset_scale;

flat out vec4 v_color;

vec3 apply_quat_to_vec3(vec3 position, vec4 q)
{
  vec3 v = position.xyz;
  return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

void main(void)
{
	vec3 worldSpacePosition = a_offset_center + apply_quat_to_vec3(a_vertex_position * a_offset_scale, a_offset_orientation);

  gl_Position = u_composedMatrix * vec4(worldSpacePosition, 1.0);

  v_color = vec4(a_offset_color, 1.0);
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer-flat/shaders/geometry-renderer-flat.glsl.frag
var geometry_renderer_flat_glsl_default2 = `
#version 300 es

precision lowp float;

flat in vec4 v_color;

out vec4 o_color;

void main(void)
{
  o_color = vec4(v_color.rbg, 1.0);
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer-flat/GeometryRendererFlat.ts
var k_bufferSize2 = 14336;

class GeometryRendererFlat {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize2);
  _currentSize = 0;
  constructor() {
    this._shader = new ShaderProgram("GeometryRendererFlat", {
      vertexSrc: geometry_renderer_flat_glsl_default,
      fragmentSrc: geometry_renderer_flat_glsl_default2,
      attributes: [
        "a_vertex_position",
        "a_offset_center",
        "a_offset_orientation",
        "a_offset_color",
        "a_offset_scale"
      ],
      uniforms: [
        "u_composedMatrix"
      ]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangles").addVbo().addVboAttribute("a_vertex_position", "vec3f").addVbo().setVboAsStreaming().setVboAsInstanced().addVboAttribute("a_offset_center", "vec3f").addVboAttribute("a_offset_orientation", "vec4f").addVboAttribute("a_offset_color", "vec3f").addVboAttribute("a_offset_scale", "vec3f");
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    this._geometry.setFloatBufferSize(1, k_bufferSize2);
  }
  setGeometryVertices(vertices) {
    const buf = new Float32Array([
      ...vertices.map((val) => [...val.pos]).flat()
    ]);
    this._geometry.allocateBuffer(0, buf, buf.length);
    this._geometry.setPrimitiveCount(buf.length / 3);
  }
  push(inPointA, inQuat, inColor, inScale) {
    if (this._currentSize + 13 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this._flush();
      } else {
        return;
      }
    }
    this._buffer[this._currentSize++] = inPointA[0];
    this._buffer[this._currentSize++] = inPointA[1];
    this._buffer[this._currentSize++] = inPointA[2];
    this._buffer[this._currentSize++] = inQuat[0];
    this._buffer[this._currentSize++] = inQuat[1];
    this._buffer[this._currentSize++] = inQuat[2];
    this._buffer[this._currentSize++] = inQuat[3];
    this._buffer[this._currentSize++] = inColor[0];
    this._buffer[this._currentSize++] = inColor[1];
    this._buffer[this._currentSize++] = inColor[2];
    this._buffer[this._currentSize++] = inScale[0];
    this._buffer[this._currentSize++] = inScale[1];
    this._buffer[this._currentSize++] = inScale[2];
  }
  flush(inCamera) {
    if (!this.canRender()) {
      return;
    }
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      this._flush();
    });
  }
  safeRender(inCamera, inCallback) {
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      inCallback();
      this._flush();
    });
  }
  _flush() {
    this._geometry.updateBuffer(1, this._buffer, this._currentSize, 0);
    this._geometry.setInstancedCount(this._currentSize / 13);
    this._geometry.render();
    this.clear();
  }
  canRender() {
    return this._currentSize > 0;
  }
  clear() {
    this._currentSize = 0;
  }
}
// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/SceneCapturer.ts
class SceneCapturer {
  _width = 0;
  _height = 0;
  _frameBuffer = new FrameBuffer;
  _renderBuffer = new RenderBuffer;
  _colorTextures = [];
  _currentIndex = 0;
  constructor(width, height) {
    this._colorTextures.push(new Texture);
    this._colorTextures.push(new Texture);
    this._colorTextures.forEach((texture) => texture.initialize());
    this.resize(width, height);
  }
  resize(width, height) {
    this._width = width;
    this._height = height;
    this._renderBuffer.bind((boundBuffer) => {
      boundBuffer.setSize("depth32f", this._width, this._height);
    });
    this._colorTextures.forEach((texture) => {
      texture.bind((boundTexture) => {
        boundTexture.allocate(this._width, this._height);
      });
    });
    this._frameBuffer.bind((boundFrameBuffer) => {
      this._renderBuffer.bind((boundBuffer) => {
        boundFrameBuffer.attachRenderBuffer(boundBuffer);
      });
    });
  }
  captureScene(renderCallback) {
    this._frameBuffer.bind((boundFrameBuffer) => {
      this._colorTextures[this._currentIndex].bind((boundTexture) => {
        boundFrameBuffer.attachTexture(boundTexture);
      });
      const gl = WebGLContext.getContext();
      gl.viewport(0, 0, this._width, this._height);
      gl.clearColor(0, 0, 0, 0);
      renderCallback();
    });
    this._currentIndex = (this._currentIndex + 1) % this._colorTextures.length;
  }
  get colorTexture() {
    return this._colorTextures[this._currentIndex];
  }
}

// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/shaders/hud-texture-renderer.glsl.vert
var hud_texture_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3  a_vertex_position;
in vec2  a_vertex_texCoord;

out vec2 v_texCoord;

void main(void)
{
  v_texCoord = a_vertex_texCoord;
  gl_Position = u_composedMatrix * vec4(a_vertex_position, 1.0);
}

`.trim();

// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/shaders/hud-texture-renderer.glsl.frag
var hud_texture_renderer_glsl_default2 = `
#version 300 es

precision highp float;

uniform sampler2D u_texture;

in vec2 v_texCoord;

out vec4 o_color;

void main(void)
{
  o_color = texture(u_texture, v_texCoord);
}
`.trim();

// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/RenderHudTexture.ts
class RenderHudTexture {
  _width = 0;
  _height = 0;
  _shader;
  _geometry;
  constructor(width, height) {
    this._shader = new ShaderProgram("RenderHudTexture", {
      vertexSrc: hud_texture_renderer_glsl_default,
      fragmentSrc: hud_texture_renderer_glsl_default2,
      attributes: ["a_vertex_position", "a_vertex_texCoord"],
      uniforms: ["u_composedMatrix", "u_texture"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangleStrip").addVbo().addVboAttribute("a_vertex_position", "vec3f").addVboAttribute("a_vertex_texCoord", "vec2f");
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    this.resize(width, height);
  }
  resize(width, height) {
    this._width = width;
    this._height = height;
    const tmpVertices = [
      { pos: [this._width * 0, this._height * 0, -1], tex: [0, 0] },
      { pos: [this._width * 1, this._height * 0, -1], tex: [1, 0] },
      { pos: [this._width * 0, this._height * 1, -1], tex: [0, 1] },
      { pos: [this._width * 1, this._height * 1, -1], tex: [1, 1] }
    ];
    const vertArr = tmpVertices.map((vertex) => {
      return [vertex.pos[0], vertex.pos[1], vertex.pos[2], vertex.tex[0], vertex.tex[1]];
    }).flat();
    this._geometry.allocateBuffer(0, vertArr, vertArr.length);
    this._geometry.setPrimitiveCount(vertArr.length / 5);
  }
  flush(composedMatrix, cubeMap) {
    this._shader.bind((boundShader) => {
      boundShader.setMatrix4Uniform("u_composedMatrix", composedMatrix);
      boundShader.setTextureUniform("u_texture", cubeMap, 0);
      this._geometry.render();
    });
  }
}

// src/local-framework/graphics/renderers/multi-buffers-rendering/MultiBuffersRendering.ts
class MultiBuffersRendering {
  _sceneCapturer;
  _renderHudTexture;
  constructor(width, height) {
    this._sceneCapturer = new SceneCapturer(width, height);
    this._renderHudTexture = new RenderHudTexture(width, height);
  }
  resize(width, height) {
    this._sceneCapturer.resize(width, height);
    this._renderHudTexture.resize(width, height);
  }
  captureScene(renderCallback) {
    this._sceneCapturer.captureScene(renderCallback);
  }
  renderHud(composedMat4) {
    this._renderHudTexture.flush(composedMat4, this._sceneCapturer.colorTexture);
  }
}
// src/local-framework/graphics/renderers/stack-renderers/shaders/stack-renderer.glsl.vert
var stack_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3 a_vertex_position;
in vec4 a_vertex_color;

flat out vec4 v_color;

void main(void)
{
  gl_Position = u_composedMatrix * vec4(a_vertex_position, 1.0);

  v_color = a_vertex_color;
}
`.trim();

// src/local-framework/graphics/renderers/stack-renderers/shaders/stack-renderer.glsl.frag
var stack_renderer_glsl_default2 = `
#version 300 es

precision lowp float;

flat in vec4 v_color;

out vec4 o_color;

void main(void)
{
  o_color = v_color;
}
`.trim();

// src/local-framework/graphics/renderers/stack-renderers/internals/WireFramesStackRenderer.ts
var k_bufferSize3 = 14336;

class WireFramesStackRenderer {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize3);
  _currentSize = 0;
  constructor(inShader, inGeometryDef) {
    this._shader = inShader;
    const geometryDef = {
      ...inGeometryDef,
      primitiveType: exports_GeometryWrapper.PrimitiveType.lines
    };
    this._geometry = new exports_GeometryWrapper.Geometry(inShader, geometryDef);
  }
  pushLine(inPointA, inPointB, inColor) {
    if (this._currentSize + 14 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this.flush();
      } else {
        return;
      }
    }
    const alphaValue = inColor[3] ?? 1;
    this._buffer[this._currentSize + 0] = inPointA[0];
    this._buffer[this._currentSize + 1] = inPointA[1];
    this._buffer[this._currentSize + 2] = inPointA[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
    this._buffer[this._currentSize + 0] = inPointB[0];
    this._buffer[this._currentSize + 1] = inPointB[1];
    this._buffer[this._currentSize + 2] = inPointB[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
  }
  canRender() {
    return this._currentSize > 0;
  }
  flush() {
    if (!this.canRender())
      return;
    this._geometry.allocateBuffer(0, this._buffer, this._currentSize);
    this._geometry.setPrimitiveCount(this._currentSize / 7);
    this._geometry.render();
    this.clear();
  }
  clear() {
    this._currentSize = 0;
  }
}

// src/local-framework/graphics/renderers/stack-renderers/internals/TrianglesStackRenderer.ts
var k_bufferSize4 = 7168;

class TrianglesStackRenderer {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize4);
  _currentSize = 0;
  constructor(inShader, inGeometryDef) {
    this._shader = inShader;
    const geometryDef = {
      ...inGeometryDef,
      primitiveType: exports_GeometryWrapper.PrimitiveType.triangles
    };
    this._geometry = new exports_GeometryWrapper.Geometry(inShader, geometryDef);
  }
  pushTriangle(inPointA, inPointB, inPointC, inColor) {
    if (this._currentSize + 42 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this.flush();
      } else {
        return;
      }
    }
    const alphaValue = inColor[3] ?? 1;
    this._buffer[this._currentSize + 0] = inPointA[0];
    this._buffer[this._currentSize + 1] = inPointA[1];
    this._buffer[this._currentSize + 2] = inPointA[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
    this._buffer[this._currentSize + 0] = inPointB[0];
    this._buffer[this._currentSize + 1] = inPointB[1];
    this._buffer[this._currentSize + 2] = inPointB[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
    this._buffer[this._currentSize + 0] = inPointC[0];
    this._buffer[this._currentSize + 1] = inPointC[1];
    this._buffer[this._currentSize + 2] = inPointC[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
  }
  pushLine(inPointA, inPointB, thickness, inColor) {
    if (this._currentSize + 42 >= this._buffer.length) {
      return;
    }
    const diffX = inPointB[0] - inPointA[0];
    const diffY = inPointB[1] - inPointA[1];
    const angle3 = Math.atan2(diffY, diffX) + Math.PI * 0.5;
    const stepX = Math.cos(angle3) * thickness * 0.5;
    const stepY = Math.sin(angle3) * thickness * 0.5;
    this.pushTriangle([inPointA[0] - stepX, inPointA[1] - stepY, inPointA[2]], [inPointB[0] - stepX, inPointB[1] - stepY, inPointB[2]], [inPointB[0] + stepX, inPointB[1] + stepY, inPointB[2]], inColor);
    this.pushTriangle([inPointA[0] - stepX, inPointA[1] - stepY, inPointA[2]], [inPointB[0] + stepX, inPointB[1] + stepY, inPointB[2]], [inPointA[0] + stepX, inPointA[1] + stepY, inPointA[2]], inColor);
  }
  pushRotatedLine(center, angle3, length4, thickness, color) {
    this.pushLine([center[0] - length4 * Math.cos(angle3), center[1] - length4 * Math.sin(angle3), center[2]], [center[0] + length4 * Math.cos(angle3), center[1] + length4 * Math.sin(angle3), center[2]], thickness, color);
  }
  pushOriginBoundRectangle(inOrigin, inSize, inColor) {
    if (this._currentSize + 42 >= this._buffer.length) {
      return;
    }
    const maxCoord = [inOrigin[0] + inSize[0], inOrigin[1] + inSize[1]];
    this.pushTriangle([inOrigin[0], inOrigin[1], inOrigin[2]], [maxCoord[0], maxCoord[1], inOrigin[2]], [inOrigin[0], maxCoord[1], inOrigin[2]], inColor);
    this.pushTriangle([inOrigin[0], inOrigin[1], inOrigin[2]], [maxCoord[0], inOrigin[1], inOrigin[2]], [maxCoord[0], maxCoord[1], inOrigin[2]], inColor);
  }
  pushCenteredRectangle(inCenter, inSize, inColor) {
    const origin = [inCenter[0] - inSize[0] * 0.5, inCenter[1] - inSize[1] * 0.5, inCenter[2]];
    this.pushOriginBoundRectangle(origin, inSize, inColor);
  }
  canRender() {
    return this._currentSize > 0;
  }
  flush() {
    if (!this.canRender()) {
      return;
    }
    this._geometry.allocateBuffer(0, this._buffer, this._currentSize);
    this._geometry.setPrimitiveCount(this._currentSize / 7);
    this._geometry.render();
    this.clear();
  }
  clear() {
    this._currentSize = 0;
  }
}

// src/local-framework/graphics/renderers/stack-renderers/StackRenderers.ts
class StackRenderers {
  _shader;
  _wireFramesStackRenderer;
  _trianglesStackRenderer;
  constructor() {
    this._shader = new ShaderProgram("StackRenderers", {
      vertexSrc: stack_renderer_glsl_default,
      fragmentSrc: stack_renderer_glsl_default2,
      attributes: ["a_vertex_position", "a_vertex_color"],
      uniforms: ["u_composedMatrix"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("lines").addVbo().setVboAsDynamic().addVboAttribute("a_vertex_position", "vec3f").addVboAttribute("a_vertex_color", "vec4f");
    this._wireFramesStackRenderer = new WireFramesStackRenderer(this._shader, geoBuilder.getDef());
    this._trianglesStackRenderer = new TrianglesStackRenderer(this._shader, geoBuilder.getDef());
  }
  pushLine(inPointA, inPointB, inColor) {
    this._wireFramesStackRenderer.pushLine(inPointA, inPointB, inColor);
  }
  pushCross(inCenter, inSize, inColor) {
    const crossVertices = [
      [inCenter[0] - inSize, inCenter[1], inCenter[2]],
      [inCenter[0] + inSize, inCenter[1], inCenter[2]],
      [inCenter[0], inCenter[1] - inSize, inCenter[2]],
      [inCenter[0], inCenter[1] + inSize, inCenter[2]],
      [inCenter[0], inCenter[1], inCenter[2] - inSize],
      [inCenter[0], inCenter[1], inCenter[2] + inSize]
    ];
    const crossIndices = [0, 1, 2, 3, 4, 5];
    for (let ii = 0;ii < crossIndices.length; ii += 2) {
      const vertexA = crossVertices[ii + 0];
      const vertexB = crossVertices[ii + 1];
      this._wireFramesStackRenderer.pushLine(vertexA, vertexB, inColor);
    }
  }
  pushThickLine(inPointA, inPointB, thickness, inColor) {
    this._trianglesStackRenderer.pushLine(inPointA, inPointB, thickness, inColor);
  }
  pushRotatedLine(center, angle3, length4, thickness, color) {
    this._trianglesStackRenderer.pushRotatedLine(center, angle3, length4, thickness, color);
  }
  pushOriginBoundRectangle(inOrigin, inSize, inColor) {
    this._trianglesStackRenderer.pushOriginBoundRectangle(inOrigin, inSize, inColor);
  }
  pushCenteredRectangle(inCenter, inSize, inColor) {
    this._trianglesStackRenderer.pushCenteredRectangle(inCenter, inSize, inColor);
  }
  pushTriangle(inPosA, inPosB, inPosC, inColor) {
    this._trianglesStackRenderer.pushTriangle(inPosA, inPosB, inPosC, inColor);
  }
  pushQuad(inPos, inSize, inColor) {
    this.pushTriangle([inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 0, inPos[2]], [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 1, inPos[2]], [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 0, inPos[2]], inColor);
    this.pushTriangle([inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 0, inPos[2]], [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 1, inPos[2]], [inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 1, inPos[2]], inColor);
  }
  flush(inComposedMatrix) {
    if (!this._wireFramesStackRenderer.canRender() && !this._trianglesStackRenderer.canRender()) {
      return;
    }
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inComposedMatrix);
      this._wireFramesStackRenderer.flush();
      this._trianglesStackRenderer.flush();
    });
  }
  safeRender(inComposedMatrix, inCallback) {
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inComposedMatrix);
      inCallback();
      this._wireFramesStackRenderer.flush();
      this._trianglesStackRenderer.flush();
    });
  }
  clear() {
    this._wireFramesStackRenderer.clear();
    this._trianglesStackRenderer.clear();
  }
}
// src/local-framework/graphics/renderers/text-renderer/shaders/text-renderer.glsl.vert
var text_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec2 a_vertex_position;
in vec2 a_vertex_texCoord;
in vec3 a_offset_position;
in vec2 a_offset_texCoord;
in vec3 a_offset_color;
in float a_offset_scale;

out vec2 v_texCoord;
flat out vec3 v_color;

void main(void)
{
  vec3 position = vec3(a_vertex_position, 0.0) * a_offset_scale + a_offset_position;

  gl_Position = u_composedMatrix * vec4(position, 1.0);

  v_texCoord = a_vertex_texCoord + a_offset_texCoord;
  v_color = a_offset_color;
}
`.trim();

// src/local-framework/graphics/renderers/text-renderer/shaders/text-renderer.glsl.frag
var text_renderer_glsl_default2 = `
#version 300 es

precision mediump float;

uniform sampler2D u_texture;

in vec2 v_texCoord;
flat in vec3 v_color;

out vec4 o_color;

void main(void)
{
  vec4 textureColor = texture(u_texture, v_texCoord);
  if (textureColor.a < 0.5)
  {
    discard;
  }
  else
  {
    o_color = vec4(v_color, textureColor.a);
  }
}
`.trim();

// src/local-framework/graphics/renderers/text-renderer/internals/asciiTextureHex.ts
var asciiTextureHex = "7e7e28fd03fd07fe04fe0aff02ff7e4dfd0cfd03fd07fe04fe0aff02ff1afc0dfd10fc08fc0ffe55ff15fb0bfd03fd07fe04fe08f707fd04ff07fe02fe0cfd0ffd0cfd0aff03fe03ff0afe44fe15fb0bfd03fd04f204f607fd03fe07fe02fe0cfd0efd0efd0aff02fe02ff0bfe43fd15fb0cfe03fe05f204fe01ff02ff0afd02fd07fe02fe0bfd0efd10fd0afa0cfe42fd16fb1bfe04fe07fe01ff02ff0efd09fc1cfd12fd09fa0cfe41fd17fb1bfe04fe07f70bfd0afc04ff17fd12fd06f405f616f61cfd19fd1cfe04fe08f709fd0bfb02fe17fd12fd06f405f616f61bfd1afd1cfe04fe0aff02ff01fe08fd0bfe02fa17fd12fd09fa0cfe3efd37f207ff02ff01fe07fd02fd07fe03fc19fd10fd0afa0cfe3dfd38f204f607fe03fd07fe03fd1bfd0efd0aff02fe02ff0bfe0cfd1dfd0dfd1dfd1cfe04fe07f708ff04fd07fe02fb1bfd0cfd0aff03fe03ff0afe0cfd1dfd0cfd1efd1cfe04fe0aff02ff1afb02fe1bfc08fc0ffe1cfd1dfd0bfd1ffd1cfe04fe0aff02ff7afd7e7e7e7e7e7e0efd17fd10fc0af80bfe0bf909f90dfd08f609fb08f506f808f82cfd19fd0df807fd04fd0afe0afd03fd07fd03fd0bfc08fd0ffd0bfd05fd05fd04fd06fd04fd2afd1bfd0bfc02fc06fd03fc09fd0afd04fd06fd04fd09fb08fd0efd0cfd05fd05fd04fd06fd04fd09fd0cfd0efd1dfd0afe05fd06fd02fb06fa11fd0dfd08fe01fd08fd0dfd0dfd05fd05fd04fd06fd04fd09fd0cfd0dfd0af409fd10fd06fd02fb06fa10fd0dfd08fe02fd08fd0dfd15fd05fb02fd06fd04fd09fd0cfd0cfd0bf40afd0efd07fd01fe01fd09fd0ffd0bfb08fe03fd08f808f70efd08fa08f626fd23fd0cfd08fd01fe01fd09fd0efd0cfb08f606f707f60cfd09fa09f726fd23fd0bfd09fb02fd09fd0dfd10fd07f60cfc06fd04fd0bfd08fd02fb0dfd09fd0cfd0cfd0bf40afd0cfd09fb02fd09fd0cfd12fd0bfd0ffd06fd04fd0afd09fd04fd0dfd09fd0cfd0dfd0af409fd19fc03fd09fd0bfd03fd06fd04fd0bfd08fd04fd06fd04fd09fd0afd04fd0cfd0afd0cfd0efd1dfd1afd04fd09fd0afd04fd06fd03fd0cfd08fd03fd07fd04fd09fd0afd04fd0bfd19fd10fd1bfd0ffd0af807f707f607f90bf907f909f80afd0bf809fb2efd19fd10fd7e51fd17fd11fd7e7e7e7e13f87e78fd05fd08fc09f709f907f808f606f608f907fd03fd07f90df905fc03fd06fb0bfd05fd05fd05fd08fb08fd05fd07fa09fd03fd07fd03fd07fd02fd08fd04fe07fd04fe07fd03fd06fd03fd09fd11fd08fd03fd07fd0cfc03fc05fd05fd07fd01fd07fd05fd06fd02fd08fd03fd06fd04fd07fd03fd07fd05ff07fd05ff06fd04fd06fd03fd09fd11fd08fd02fd08fd0cfb01fb05fc04fd06fd03fd06fd05fd05fd04fd07fd03fd06fd0efd03fd07fd0dfd0cfd04fd06fd03fd09fd11fd08fd01fd09fd0cf505fb03fd05fd05fd05fd02fa05fd04fd07fd03fd06fd0efd03fd07fd03fe08fd03fe07fd0dfd03fd09fd11fd08fa0afd0cf505fa02fd05fd05fd05fd02fa05fd04fd07f807fd0efd03fd07f808f807fd0df709fd11fd08fb0bfd0cfd01fd01fd05fd01fd01fd05fd05fd05fd02fa05fd04fd07f807fd0efd03fd07f808f807fd0df709fd11fd08fb0bfd0cfd02ff02fd05fd02fa05fd05fd05fd02fa05f607fd03fd06fd0efd03fd07fd03fe08fd03fe07fd02fb06fd03fd09fd0bfd03fd08fa0afd0cfd05fd05fd03fb05fd05fd05fd0dfd04fd07fd03fd06fd0efd03fd07fd0dfd0cfd04fd06fd03fd09fd0bfd03fd08fd01fd09fd05ff06fd05fd05fd04fc05fd05fd05fd0dfd04fd07fd03fd06fd04fd07fd03fd07fd05ff07fd0cfd04fd06fd03fd09fd0bfd03fd08fd02fd08fd04fe06fd05fd05fd05fd06fd03fd06fd0dfd04fd07fd03fd07fd03fd07fd02fd08fd04fe07fd0dfd03fd06fd03fd09fd0bfd03fd08fd03fd07fd03fd06fd05fd05fd05fd07fd01fd07fd0dfd04fd06f709f907f808f606fb0df806fd03fd07f90af908fc03fd06f606fd05fd05fd05fd08fb0af87e7e7e7e7e7e7e68fe1af70afb08f708f807f505fd03fd07fd03fd07fd05fd05fd03fd07fd03fd07f608f907ff11f90afc1afd03fd07fc01fc07fd03fd06fd04fd06fe02fd02fe05fd03fd07fd03fd07fd05fd05fd03fd07fd03fd07fd04fd08fd0bfe14fd09fa19fd03fd07fd03fd07fd03fd06fd04fd06ff03fd03ff05fd03fd07fd03fd07fd05fd05fd03fd07fd03fd07fe05fd08fd0bfd13fd08fd02fd18fd03fd06fd05fd06fd03fd06fd04fd0afd09fd03fd07fd03fd07fd05fd06fd01fd08fd03fd07ff05fd09fd0cfd12fd07fd04fd17fd03fd06fd05fd06fd03fd06fd11fd09fd03fd07fd03fd07fd05fd07fb09fd03fd0cfd0afd0dfd11fd28f807fd05fd06f808f90cfd09fd03fd07fd03fd07fd02ff02fd08fd0bfd01fd0cfd0bfd0efd10fd28f807fd05fd06f809f90bfd09fd03fd07fd03fd07fd02ff02fd08fd0cfb0cfd0cfd0ffd0ffd28fd0cfd03fb06fd02fd0efd0afd09fd03fd07fd03fd07fd02ff02fd07fb0cfd0cfd0dfd10fd0efd28fd0cfd02fa06fd03fd06fd04fd0afd09fd03fd07fd03fd08f707fd01fd0bfd0bfd05ff08fd11fd0dfd28fd0df707fd03fd06fd04fd0afd09fd03fd08fd01fd09fc01fc06fd03fd0afd0afd05fe08fd12fd0cfd28fd0df707fd03fd06fd04fd0afd09fd03fd09fb0bfd01fd07fd03fd0afd0afd04fd08fd13fd0bfd27fb12fd06fc03fd07f809f908f90bfd0cfd01fd07fd03fd08f908f608f910fd06f93cfa7e54f07e72f07e7e7e7e0bfd1dfc21fb19fb18fc10fd0ffd07fc0dfa39fd1efd22fd19fd01fd18fd10fd0ffd08fd10fd3bfd1cfd22fd19fd01fd18fd10fd0ffd08fd10fd3bfd1cfd22fd19fd1cfd2dfd10fd4af909f808f909f808f90afd0cfb02fe07fd01fc08fa0cfa08fd03fd0afd09f606f809f91efd08fd03fd06fd03fd07fd03fd07fd03fd07f808fd03fd08fc02fd0afd0ffd08fd02fd0bfd09fd02ff02fd05fd03fd07fd03fd1dfd08fd03fd06fd03fd07fd03fd07fd03fd07f808fd03fd08fc02fd0afd0ffd08fd01fd0cfd09fd02ff02fd05fd03fd07fd03fd18f808fd03fd06fd0dfd03fd07f709fd0bfd03fd08fd03fd0afd0ffd08fa0dfd09fd02ff02fd05fd03fd07fd03fd17fd03fd08fd03fd06fd0dfd03fd07fd0ffd0bfd03fd08fd03fd0afd0ffd08fd01fd0cfd09fd02ff02fd05fd03fd07fd03fd17fd03fd08fd03fd06fd03fd07fd03fd07fd03fd09fd0cf808fd03fd0afd0ffd08fd02fd0bfd09fd02ff02fd05fd03fd07fd03fd17fd03fd08fd03fd06fd03fd07fd03fd07fd03fd09fd0df908fd03fd0afd0ffd08fd03fd0afd09fd02ff02fd05fd03fd07fd03fd18fb02fe06fe02fb08f909fb02fe07f908f90ffd07fc03fd07f706fd03fd07fc03fd07f706fd05fd05fd03fd08f978fd03fd27fd03fd7e4af92afa7e7e7e7e7e7e18fa09fc09fa1efe4eff6efd0dfc0dfd1cfc4cfe6efd0dfc0dfd1bfa4afd6efd0dfc0dfd1afd02fd07fe02fb07fb02fe07fc02fd08f908f707fd03fd07fd03fd07fd05fd05fd02fd09fd03fd06f80afd0efc0efd08fb03fd05fd04fd07fd03fd05fd03fd09f706fd04fe09fd0bfd03fd07fd03fd07fd05fd05fd02fd09fd03fd06fe03fd08fd24fd05fd01fd02fd05fe06fe07fd03fd05fd03fd09fc02fd06fd04fe09fd0bfd03fd07fd03fd07fd05fd06fa0afd03fd06ff03fd09fd24fd05fd02fd01fd05fe06fe07fd03fd05fd03fd09fd0dfb0cfd0bfd03fd07fd03fd07fd02ff02fd07fc0bfd03fd09fd0cfd0efc0efd07fd03fb06fe06fe07fd03fd05fd03fd09fd0ffb0afd0bfd03fd07fd03fd07fd02ff02fd07fc0bfd03fd08fd0efd0dfc0dfd19fe06fe07fd03fd05fd03fd09fd0cfe04fd09fd01fd07fd03fd08fd01fd09fc01fc07fa0bf908fd03ff0bfd0dfc0dfd19fe06fe07f807f809fd0cfe04fd09fd01fd07fd03fd09fb0bfd01fd07fd02fd0bfb08fd03fe0bfd0dfc0dfd19f607fd11fd08fb0cf90bfb09fb02fe09fd0cfd01fd07fd02fd0dfd08f80cfa09fc09fa1af607fd11fd7cfd69fb0ffb77fa";

// src/local-framework/graphics/renderers/text-renderer/TextRenderer.ts
var k_gridSize = [16, 6];
var k_texCoord = [1 / k_gridSize[0], 1 / k_gridSize[1]];
var k_bufferSize5 = 36864;

class TextRenderer {
  _shader;
  _geometry;
  _texture = new Texture;
  _texCoordMap;
  _buffer = new Float32Array(k_bufferSize5);
  _currentSize = 0;
  _textScale = 14;
  _textColor = [1, 1, 1];
  _horizontalTextAlign = "left";
  _verticalTextAlign = "top";
  constructor() {
    this._shader = new ShaderProgram("TextRenderer", {
      vertexSrc: text_renderer_glsl_default,
      fragmentSrc: text_renderer_glsl_default2,
      attributes: [
        "a_vertex_position",
        "a_vertex_texCoord",
        "a_offset_position",
        "a_offset_texCoord",
        "a_offset_color",
        "a_offset_scale"
      ],
      uniforms: ["u_composedMatrix", "u_texture"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangles").addVbo().addVboAttribute("a_vertex_position", "vec2f").addVboAttribute("a_vertex_texCoord", "vec2f").setStride(16).addVbo().setVboAsDynamic().setVboAsInstanced().addVboAttribute("a_offset_position", "vec3f").addVboAttribute("a_offset_texCoord", "vec2f").addVboAttribute("a_offset_color", "vec3f").addVboAttribute("a_offset_scale", "float").setStride(36);
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    const vertices = [
      {
        position: [0.5, -0.5],
        texCoord: [k_texCoord[0] * 1, k_texCoord[1] * 1]
      },
      {
        position: [-0.5, -0.5],
        texCoord: [k_texCoord[0] * 0, k_texCoord[1] * 1]
      },
      {
        position: [0.5, 0.5],
        texCoord: [k_texCoord[0] * 1, k_texCoord[1] * 0]
      },
      {
        position: [-0.5, 0.5],
        texCoord: [k_texCoord[0] * 0, k_texCoord[1] * 0]
      }
    ];
    const indices = [1, 0, 2, 1, 2, 3];
    const letterVertices = [];
    for (const index of indices) {
      const vertex = vertices[index];
      letterVertices.push(vertex.position[0], vertex.position[1], vertex.texCoord[0], vertex.texCoord[1]);
    }
    this._geometry.allocateBuffer(0, letterVertices, letterVertices.length);
    this._geometry.setPrimitiveCount(letterVertices.length / 4);
    this._texCoordMap = new Map([
      [" ", [0 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["!", [1 * k_texCoord[0], 0 * k_texCoord[1]]],
      ['"', [2 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["#", [3 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["$", [4 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["%", [5 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["&", [6 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["'", [7 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["(", [8 * k_texCoord[0], 0 * k_texCoord[1]]],
      [")", [9 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["*", [10 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["+", [11 * k_texCoord[0], 0 * k_texCoord[1]]],
      [",", [12 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["-", [13 * k_texCoord[0], 0 * k_texCoord[1]]],
      [".", [14 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["/", [15 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["0", [0 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["1", [1 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["2", [2 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["3", [3 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["4", [4 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["5", [5 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["6", [6 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["7", [7 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["8", [8 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["9", [9 * k_texCoord[0], 1 * k_texCoord[1]]],
      [":", [10 * k_texCoord[0], 1 * k_texCoord[1]]],
      [";", [11 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["<", [12 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["=", [13 * k_texCoord[0], 1 * k_texCoord[1]]],
      [">", [14 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["?", [15 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["@", [0 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["A", [1 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["B", [2 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["C", [3 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["D", [4 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["E", [5 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["F", [6 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["G", [7 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["H", [8 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["I", [9 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["J", [10 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["K", [11 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["L", [12 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["M", [13 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["N", [14 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["O", [15 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["P", [0 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["Q", [1 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["R", [2 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["S", [3 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["T", [4 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["U", [5 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["V", [6 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["W", [7 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["X", [8 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["Y", [9 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["Z", [10 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["[", [11 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["\\", [12 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["]", [13 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["^", [14 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["_", [15 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["`", [0 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["a", [1 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["b", [2 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["c", [3 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["d", [4 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["e", [5 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["f", [6 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["g", [7 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["h", [8 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["i", [9 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["j", [10 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["k", [11 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["l", [12 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["m", [13 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["n", [14 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["o", [15 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["p", [0 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["q", [1 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["r", [2 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["s", [3 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["t", [4 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["u", [5 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["v", [6 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["w", [7 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["x", [8 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["y", [9 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["z", [10 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["{", [11 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["|", [12 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["}", [13 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["~", [14 * k_texCoord[0], 5 * k_texCoord[1]]]
    ]);
    const width = 256;
    const height = 96;
    const imagePixels = new Uint8Array(width * height * 4);
    {
      let index = 0;
      for (let ii = 0;ii < asciiTextureHex.length; ii += 2) {
        let currSize = parseInt(`${asciiTextureHex.substring(ii, ii + 2)}000000`, 16) >> 24;
        let currVal = 0;
        if (currSize < 0) {
          currSize = -currSize;
          currVal = 255;
        }
        for (let ii2 = 0;ii2 < currSize; ++ii2) {
          imagePixels[index * 4 + 0] = currVal;
          imagePixels[index * 4 + 1] = currVal;
          imagePixels[index * 4 + 2] = currVal;
          imagePixels[index * 4 + 3] = currVal;
          ++index;
        }
      }
    }
    this._texture.initialize();
    this._texture.bind((boundTexture) => {
      boundTexture.loadFromMemory(width, height, imagePixels);
    });
  }
  setTextAlign(inHorizontalTextAlign, inVerticalTextAlign) {
    this._horizontalTextAlign = inHorizontalTextAlign;
    this._verticalTextAlign = inVerticalTextAlign;
    return this;
  }
  setTextScale(inScale) {
    this._textScale = inScale;
    return this;
  }
  setTextColor(inRed, inGreen, inBlue) {
    this._textColor[0] = inRed;
    this._textColor[1] = inGreen;
    this._textColor[2] = inBlue;
    return this;
  }
  pushText(inMessage, inPosition) {
    if (inMessage.length === 0) {
      return this;
    }
    if (this._textScale <= 0) {
      return this;
    }
    const allLineWidth = [0];
    for (let ii = 0;ii < inMessage.length; ++ii) {
      if (inMessage[ii] == "\n") {
        allLineWidth.push(0);
      } else {
        allLineWidth[allLineWidth.length - 1] += 1;
      }
    }
    if (allLineWidth.length === 0) {
      return this;
    }
    let lineIndex = 0;
    const currPos = [0, 0];
    const hScale = this._textScale * 0.5;
    switch (this._horizontalTextAlign) {
      case "left":
        currPos[0] = inPosition[0];
        break;
      case "centered":
        currPos[0] = inPosition[0] - allLineWidth[lineIndex] * hScale + hScale;
        break;
      case "right":
        currPos[0] = inPosition[0] - allLineWidth[lineIndex] * this._textScale + this._textScale;
        break;
    }
    switch (this._verticalTextAlign) {
      case "top":
        currPos[1] = inPosition[1];
        break;
      case "centered":
        currPos[1] = inPosition[1] + allLineWidth.length * hScale - hScale;
        break;
      case "bottom":
        currPos[1] = inPosition[1] - (allLineWidth.length - 1) * this._textScale;
        break;
    }
    for (let ii = 0;ii < inMessage.length; ++ii) {
      const letter = inMessage[ii];
      if (letter == "\n") {
        lineIndex += 1;
        switch (this._horizontalTextAlign) {
          case "left":
            currPos[0] = inPosition[0];
            break;
          case "centered":
            currPos[0] = inPosition[0] - allLineWidth[lineIndex] * hScale + hScale;
            break;
          case "right":
            currPos[0] = inPosition[0] - allLineWidth[lineIndex] * this._textScale + this._textScale;
            break;
        }
        currPos[1] -= this._textScale;
      } else {
        this._pushLetter(letter, currPos);
        currPos[0] += this._textScale;
      }
    }
    return this;
  }
  _pushLetter(inCharacter, inPosition) {
    if (this._currentSize + 90 >= this._buffer.length) {
      return;
    }
    const texCoord = this._texCoordMap.get(inCharacter);
    if (!texCoord)
      throw new Error(`fail to find a letter, letter=${inCharacter}`);
    for (let yy = -1;yy <= 1; ++yy) {
      for (let xx = -1;xx <= 1; ++xx) {
        this._buffer[this._currentSize++] = inPosition[0] + 2 * xx;
        this._buffer[this._currentSize++] = inPosition[1] + 2 * yy;
        this._buffer[this._currentSize++] = -0.1;
        this._buffer[this._currentSize++] = texCoord[0];
        this._buffer[this._currentSize++] = texCoord[1];
        this._buffer[this._currentSize++] = 0;
        this._buffer[this._currentSize++] = 0;
        this._buffer[this._currentSize++] = 0;
        this._buffer[this._currentSize++] = this._textScale;
      }
    }
    this._buffer[this._currentSize++] = inPosition[0];
    this._buffer[this._currentSize++] = inPosition[1];
    this._buffer[this._currentSize++] = 0;
    this._buffer[this._currentSize++] = texCoord[0];
    this._buffer[this._currentSize++] = texCoord[1];
    this._buffer[this._currentSize++] = this._textColor[0];
    this._buffer[this._currentSize++] = this._textColor[1];
    this._buffer[this._currentSize++] = this._textColor[2];
    this._buffer[this._currentSize++] = this._textScale;
  }
  flush(composedMatrix) {
    if (this._currentSize === 0) {
      return this;
    }
    this._shader.bind((boundShader) => {
      boundShader.setMatrix4Uniform("u_composedMatrix", composedMatrix);
      boundShader.setTextureUniform("u_texture", this._texture, 0);
      this._geometry.allocateBuffer(1, this._buffer, this._currentSize);
      this._geometry.setInstancedCount(this._currentSize / 9);
      this._geometry.render();
    });
    Texture.unbind();
    this.clear();
    return this;
  }
  clear() {
    this._currentSize = 0;
    return this;
  }
}
// src/local-framework/graphics/renderers/widgets/index.ts
var exports_widgets = {};
__export(exports_widgets, {
  renderFpsMeter: () => {
    {
      return renderFpsMeter;
    }
  },
  addKeysTouchesWidgets: () => {
    {
      return addKeysTouchesWidgets;
    }
  },
  addKeyStrokesWidgets: () => {
    {
      return addKeyStrokesWidgets;
    }
  },
  addArrowStrokesWidgets: () => {
    {
      return addArrowStrokesWidgets;
    }
  }
});

// src/local-framework/graphics/renderers/widgets/renderControls.ts
var defaultColor = [0.2, 0.2, 0.2];
var activatedColor = [0.2, 0.6, 0.2];
var _renderIndicator = (currIndicator, stackRenderers, textRenderer) => {
  const { center } = currIndicator;
  stackRenderers.pushCenteredRectangle(exports_vec3.fromValues(center[0], center[1], -0.3), currIndicator.size, [0, 0, 0]);
  stackRenderers.pushCenteredRectangle(exports_vec3.fromValues(center[0], center[1], -0.2), [currIndicator.size[0] - 2, currIndicator.size[1] - 2], currIndicator.color);
  if (currIndicator.text) {
    textRenderer.setTextScale(16).setTextAlign("centered", "centered").pushText(currIndicator.text, center).setTextAlign("left", "top");
  }
  if (currIndicator.lines) {
    currIndicator.lines.forEach((currLine) => {
      stackRenderers.pushThickLine([center[0] + currLine.a[0], center[1] + currLine.a[1], 0], [center[0] + currLine.b[0], center[1] + currLine.b[1], 0], currLine.thickness, currLine.color);
    });
  }
};
var addKeyStrokesWidgets = (inPos, stackRenderers, textRenderer) => {
  _renderIndicator({
    center: [inPos[0], inPos[1]],
    size: [40, 40],
    text: "A\nQ",
    color: GlobalKeyboardManager.isPressed("A", "Q") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1]],
    size: [40, 40],
    text: "S",
    color: GlobalKeyboardManager.isPressed("S") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1] + 45],
    size: [40, 40],
    text: "W\nZ",
    color: GlobalKeyboardManager.isPressed("W", "Z") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 90, inPos[1]],
    size: [40, 40],
    text: "D",
    color: GlobalKeyboardManager.isPressed("D") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
};
var addArrowStrokesWidgets = (inPos, stackRenderers, textRenderer) => {
  _renderIndicator({
    center: [inPos[0], inPos[1]],
    size: [40, 40],
    lines: [
      { a: [15, 0], b: [-8, 0], thickness: 6, color: [1, 1, 1] },
      { a: [0, 10], b: [-12, -2], thickness: 6, color: [1, 1, 1] },
      { a: [0, -10], b: [-12, 2], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowLeft") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1]],
    size: [40, 40],
    lines: [
      { a: [0, 15], b: [0, -8], thickness: 6, color: [1, 1, 1] },
      { a: [10, 0], b: [-2, -12], thickness: 6, color: [1, 1, 1] },
      { a: [-10, 0], b: [2, -12], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowDown") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1] + 45],
    size: [40, 40],
    lines: [
      { a: [0, -15], b: [0, 8], thickness: 6, color: [1, 1, 1] },
      { a: [10, 0], b: [-2, 12], thickness: 6, color: [1, 1, 1] },
      { a: [-10, 0], b: [2, 12], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowUp") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 90, inPos[1]],
    size: [40, 40],
    lines: [
      { a: [-15, 0], b: [8, 0], thickness: 6, color: [1, 1, 1] },
      { a: [0, 10], b: [12, -2], thickness: 6, color: [1, 1, 1] },
      { a: [0, -10], b: [12, 2], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowRight") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
};
var addKeysTouchesWidgets = (inCanvasElement, inPos, stackRenderers, textRenderer) => {
  if (GlobalTouchManager.isSupported(inCanvasElement)) {
    _renderIndicator({
      center: [inPos[0] + 115, inPos[1]],
      size: [230, 60],
      text: "Touch Events\nSupported\n(double tap)",
      color: [0, 0.5, 0]
    }, stackRenderers, textRenderer);
  } else {
    _renderIndicator({
      center: [inPos[0] + 115, inPos[1]],
      size: [230, 60],
      text: "Touch Events\nNot Supported",
      color: [0.5, 0, 0]
    }, stackRenderers, textRenderer);
  }
  if (GlobalPointerLockManager.canBePointerLocked(inCanvasElement)) {
    _renderIndicator({
      center: [inPos[0] + 105, inPos[1] + 70],
      size: [210, 60],
      text: "Mouse\nSupported",
      color: [0, 0.5, 0]
    }, stackRenderers, textRenderer);
  } else {
    _renderIndicator({
      center: [inPos[0] + 105, inPos[1] + 70],
      size: [210, 60],
      text: "Mouse Events\nNot Supported",
      color: [0.5, 0, 0]
    }, stackRenderers, textRenderer);
  }
};
// src/local-framework/graphics/renderers/widgets/renderFpsMeter.ts
var renderFpsMeter = (inPos, inSize, inFrameProfiler, inStackRenderers, inTextRenderer, inShowFps = false) => {
  const k_divider = 5;
  const k_verticalSize = Math.ceil(inFrameProfiler.maxDelta / k_divider) * k_divider;
  {
    inStackRenderers.pushOriginBoundRectangle(inPos, inSize, [0, 0, 0, 0.5]);
    const allVertices = [
      [inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 0, 0],
      [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 0, 0],
      [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 1, 0],
      [inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 1, 0]
    ];
    inStackRenderers.pushLine(allVertices[0], allVertices[1], [1, 1, 1]);
    inStackRenderers.pushLine(allVertices[1], allVertices[2], [1, 1, 1]);
    inStackRenderers.pushLine(allVertices[2], allVertices[3], [1, 1, 1]);
    inStackRenderers.pushLine(allVertices[3], allVertices[0], [1, 1, 1]);
  }
  {
    for (let currDivider = k_divider;currDivider < k_verticalSize; currDivider += k_divider) {
      const ratio = currDivider / k_verticalSize;
      const pointA = [inPos[0] + 0, inPos[1] + inSize[1] * ratio, 0];
      const pointB = [inPos[0] + inSize[0], inPos[1] + inSize[1] * ratio, 0];
      inStackRenderers.pushLine(pointA, pointB, [0.5, 0.5, 0.5]);
    }
  }
  {
    if (inFrameProfiler.framesDelta.length >= 2) {
      const widthStep = inSize[0] / inFrameProfiler.framesDelta.length;
      let prevDelta = inFrameProfiler.framesDelta[0];
      let prevCoordX = 0;
      let prevCoordY = inSize[1] * prevDelta / k_verticalSize;
      for (let ii = 1;ii < inFrameProfiler.framesDelta.length; ++ii) {
        const currDelta = inFrameProfiler.framesDelta[ii];
        const currCoordX = ii * widthStep;
        const currCoordY = inSize[1] * currDelta / k_verticalSize;
        const pointA = [inPos[0] + prevCoordX, inPos[1] + prevCoordY, 0];
        const pointB = [inPos[0] + currCoordX, inPos[1] + currCoordY, 0];
        inStackRenderers.pushLine(pointA, pointB, [1, 1, 1]);
        prevDelta = currDelta;
        prevCoordX = currCoordX;
        prevCoordY = currCoordY;
      }
    }
  }
  {
    const k_textScale = 14;
    const k_textHScale = k_textScale * 0.5;
    const averageValue = inFrameProfiler.averageDelta;
    const maxValue = inFrameProfiler.maxDelta;
    const minValue = inFrameProfiler.minDelta;
    let averageStr = `~${averageValue.toFixed(0)}ms`;
    let maxStr = `<${maxValue}ms`;
    let minStr = `>${minValue}ms`;
    if (inShowFps === true) {
      const _getFpsStr = (inVal) => inVal < 999 ? inVal.toFixed(0) : "???";
      averageStr += `\n~${_getFpsStr(1000 / averageValue)}fps`;
      maxStr += `\n<${_getFpsStr(1000 / maxValue)}fps`;
      minStr += `\n>${_getFpsStr(1000 / minValue)}fps`;
    }
    inTextRenderer.setTextScale(k_textScale).setTextAlign("left", "top").setTextColor(1, 1, 0.75).pushText(averageStr, [inPos[0] + 7, inPos[1] - 8]).setTextAlign("left", "centered").setTextColor(1, 0.75, 0.75).pushText(maxStr, [inPos[0] + inSize[0] + k_textHScale, inPos[1] + inSize[1] - k_textHScale * 1]).setTextColor(0.75, 1, 0.75).pushText(minStr, [inPos[0] + inSize[0] + k_textHScale, inPos[1] + k_textHScale * 1]).setTextColor(1, 1, 1);
  }
};
// src/local-framework/graphics/images/index.ts
var exports_images = {};
__export(exports_images, {
  getImageFromUrl: () => {
    {
      return getImageFromUrl;
    }
  },
  getImageFromBuffer: () => {
    {
      return getImageFromBuffer;
    }
  },
  fetchImageBuffer: () => {
    {
      return fetchImageBuffer;
    }
  }
});

// src/local-framework/graphics/images/getImageFromUrl.ts
var getImageFromUrl = (url) => {
  return new Promise((resolve, reject) => {
    const image = new Image;
    image.onerror = reject;
    image.onload = () => {
      resolve(image);
    };
    image.src = url;
  });
};
var fetchImageBuffer = async (url, onProgress) => {
  const response = await fetch(url);
  const reader = response.body.getReader();
  const contentLength = +response.headers.get("Content-Length");
  const contentType = response.headers.get("Content-Type");
  let lastPercent = 0;
  let receivedLength = 0;
  let chunks = [];
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      break;
    }
    chunks.push(value);
    receivedLength += value.length;
    if (onProgress) {
      onProgress(receivedLength, contentLength);
    }
  }
  const chunksAll = new Uint8Array(receivedLength);
  let position = 0;
  for (let chunk of chunks) {
    chunksAll.set(chunk, position);
    position += chunk.length;
  }
  return {
    buffer: chunksAll,
    type: contentType
  };
};
var getImageFromBuffer = async (buffer, type) => {
  return new Promise((resolve, reject) => {
    const image = new Image;
    image.onerror = reject;
    image.onload = () => {
      resolve(image);
    };
    image.src = URL.createObjectURL(new Blob([buffer], { type }));
  });
};
// src/local-framework/graphics/geometries/index.ts
var exports_geometries = {};
__export(exports_geometries, {
  makeSphere: () => {
    {
      return makeSphere;
    }
  },
  makeBox: () => {
    {
      return makeBox;
    }
  }
});

// src/local-framework/graphics/geometries/makeBox.ts
var makeBox = (inSize) => {
  const hSizeX = inSize[0] * 0.5;
  const hSizeY = inSize[1] * 0.5;
  const hSizeZ = inSize[2] * 0.5;
  const allNormals = [];
  allNormals.push([-1, 0, 0]);
  allNormals.push([1, 0, 0]);
  allNormals.push([0, -1, 0]);
  allNormals.push([0, 1, 0]);
  allNormals.push([0, 0, -1]);
  allNormals.push([0, 0, 1]);
  const allVertices = [];
  allVertices.push([-hSizeX, -hSizeY, -hSizeZ]);
  allVertices.push([+hSizeX, -hSizeY, -hSizeZ]);
  allVertices.push([-hSizeX, +hSizeY, -hSizeZ]);
  allVertices.push([+hSizeX, +hSizeY, -hSizeZ]);
  allVertices.push([-hSizeX, -hSizeY, +hSizeZ]);
  allVertices.push([+hSizeX, -hSizeY, +hSizeZ]);
  allVertices.push([-hSizeX, +hSizeY, +hSizeZ]);
  allVertices.push([+hSizeX, +hSizeY, +hSizeZ]);
  const allIndices = [];
  allIndices.push([0, 2, 1, 4]);
  allIndices.push([2, 3, 1, 4]);
  allIndices.push([4, 5, 6, 5]);
  allIndices.push([6, 5, 7, 5]);
  allIndices.push([1, 3, 5, 1]);
  allIndices.push([5, 3, 7, 1]);
  allIndices.push([0, 4, 2, 0]);
  allIndices.push([4, 6, 2, 0]);
  allIndices.push([2, 6, 3, 3]);
  allIndices.push([6, 7, 3, 3]);
  allIndices.push([0, 1, 4, 2]);
  allIndices.push([4, 1, 5, 2]);
  const vertices = [];
  for (const index of allIndices) {
    vertices.push({
      pos: exports_vec3.copy([0, 0, 0], allVertices[index[0]]),
      normal: exports_vec3.copy([0, 0, 0], allNormals[index[3]])
    });
    vertices.push({
      pos: exports_vec3.copy([0, 0, 0], allVertices[index[1]]),
      normal: exports_vec3.copy([0, 0, 0], allNormals[index[3]])
    });
    vertices.push({
      pos: exports_vec3.copy([0, 0, 0], allVertices[index[2]]),
      normal: exports_vec3.copy([0, 0, 0], allNormals[index[3]])
    });
  }
  return vertices;
};
// src/local-framework/graphics/geometries/makeSphere.ts
var _drawSpherePatch = (vertices, quality, radius, v01, v02, v03) => {
  if (quality <= 0) {
    vertices.push({
      pos: exports_vec3.scale(exports_vec3.create(), v01, radius),
      normal: exports_vec3.copy(exports_vec3.create(), v01)
    });
    vertices.push({
      pos: exports_vec3.scale(exports_vec3.create(), v03, radius),
      normal: exports_vec3.copy(exports_vec3.create(), v03)
    });
    vertices.push({
      pos: exports_vec3.scale(exports_vec3.create(), v02, radius),
      normal: exports_vec3.copy(exports_vec3.create(), v02)
    });
  } else {
    const v12 = exports_vec3.normalize(exports_vec3.create(), exports_vec3.lerp(exports_vec3.create(), v01, v02, 0.5));
    const v23 = exports_vec3.normalize(exports_vec3.create(), exports_vec3.lerp(exports_vec3.create(), v02, v03, 0.5));
    const v31 = exports_vec3.normalize(exports_vec3.create(), exports_vec3.lerp(exports_vec3.create(), v03, v01, 0.5));
    quality -= 1;
    _drawSpherePatch(vertices, quality, radius, v01, v12, v31);
    _drawSpherePatch(vertices, quality, radius, v12, v02, v23);
    _drawSpherePatch(vertices, quality, radius, v31, v23, v03);
    _drawSpherePatch(vertices, quality, radius, v12, v23, v31);
  }
};
var makeSphere = (quality, radius) => {
  const k_icx = 0.5257311121191336;
  const k_icz = 0.8506508083520399;
  const tmpVertices = [
    [-k_icx, 0, +k_icz],
    [+k_icx, 0, +k_icz],
    [-k_icx, 0, -k_icz],
    [+k_icx, 0, -k_icz],
    [0, +k_icz, +k_icx],
    [0, +k_icz, -k_icx],
    [0, -k_icz, +k_icx],
    [0, -k_icz, -k_icx],
    [+k_icz, +k_icx, 0],
    [-k_icz, +k_icx, 0],
    [+k_icz, -k_icx, 0],
    [-k_icz, -k_icx, 0]
  ];
  const tmpIndices = [
    [0, 4, 1],
    [0, 9, 4],
    [9, 5, 4],
    [4, 5, 8],
    [4, 8, 1],
    [8, 10, 1],
    [8, 3, 10],
    [5, 3, 8],
    [5, 2, 3],
    [2, 7, 3],
    [7, 10, 3],
    [7, 6, 10],
    [7, 11, 6],
    [11, 0, 6],
    [0, 1, 6],
    [6, 1, 10],
    [9, 0, 11],
    [9, 11, 2],
    [9, 2, 5],
    [7, 2, 11]
  ];
  const vertices = [];
  for (const index of tmpIndices) {
    _drawSpherePatch(vertices, quality, radius, tmpVertices[index[0]], tmpVertices[index[1]], tmpVertices[index[2]]);
  }
  return vertices;
};
// src/main/configuration.ts
var chunkGraphicSize = 30;
var chunkLogicSize = 8;
var chunkRange = 2;
var controllerMovingSpeed = 32;
var controllerMouseSensibility = 15;
var controllerKeyboardSensibility = Math.PI * 0.55;
var controllerTouchSensibility = 15;
var workerFile = "./dist/worker.js";
var workerTotal = 2;

// src/main/experiment/generation/internals/Vec3HashSet.ts
class Vec3HashSet {
  _hashSet = new Set;
  clear() {
    this._hashSet.clear();
  }
  add(inVec3) {
    this._hashSet.add(Vec3HashSet._getName(inVec3));
  }
  delete(inVec3) {
    this._hashSet.delete(Vec3HashSet._getName(inVec3));
  }
  has(inVec3) {
    this._hashSet.has(Vec3HashSet._getName(inVec3));
  }
  static _getName(inVec3) {
    return `${inVec3[0]}/${inVec3[1]}/${inVec3[2]}`;
  }
}
// src/main/experiment/generation/internals/WorkerManager.ts
class WorkerManager {
  _unusedWorkers = [];
  _inUseWorkers = [];
  _onWorkerResult;
  constructor(inOnWorkerResult) {
    this._onWorkerResult = inOnWorkerResult;
  }
  areAllWorkerAvailable() {
    return this._inUseWorkers.length === 0;
  }
  isWorkerAvailable() {
    return this._unusedWorkers.length > 0;
  }
  getInUseWorkersData() {
    return this._inUseWorkers.map((worker) => worker.data);
  }
  pushTask(inCallback) {
    if (!this.isWorkerAvailable()) {
      return false;
    }
    const currentWorker = this._unusedWorkers.pop();
    this._inUseWorkers.push(currentWorker);
    inCallback(currentWorker.data, (inPayload, inTransfer) => {
      currentWorker.instance.postMessage(inPayload, inTransfer);
    });
    return true;
  }
  addOneWorker(inWorkerFile, inWorkerData) {
    const newWorker = {
      instance: new Worker(inWorkerFile),
      data: inWorkerData
    };
    this._unusedWorkers.push(newWorker);
    const onWorkerMessage = (event) => {
      const index = this._inUseWorkers.indexOf(newWorker);
      if (index >= 0) {
        this._unusedWorkers.push(newWorker);
        this._inUseWorkers.splice(index, 1);
      }
      this._onWorkerResult(newWorker.data, event.data);
    };
    newWorker.instance.addEventListener("message", onWorkerMessage, false);
  }
}
// src/main/experiment/generation/internals/ChunkManager.ts
class ChunkManager {
  _def;
  _cameraPosition = exports_vec3.fromValues(0, 0, 0);
  _chunkPositionQueue = [];
  _savedIndex = [999, 999, 999];
  _unusedChunks = [];
  _usedChunks = [];
  _usedSet = new Vec3HashSet;
  constructor(inDef) {
    this._def = inDef;
  }
  clear() {
    this._chunkPositionQueue.length = 0;
    this._unusedChunks.forEach((chunk) => this._def.releaseGeometry(chunk.geometry));
    this._unusedChunks.length = 0;
    this._usedChunks.forEach((chunk) => this._def.releaseGeometry(chunk.geometry));
    this._usedChunks.length = 0;
    this._usedSet.clear();
  }
  isEmpty() {
    return this._usedChunks.length === 0;
  }
  isNotDone() {
    return this._chunkPositionQueue.length > 0;
  }
  getChunks() {
    return this._usedChunks;
  }
  pushNew(inIndexPosition, inRealPosition, inGeometryDataBuffer, inGeometryDataLength, inGeometryUsedLength) {
    const geometry = this._def.acquireGeometry(inGeometryDataLength);
    const subBuffer = inGeometryDataBuffer.slice(0, inGeometryUsedLength);
    if (this._unusedChunks.length === 0) {
      this._usedChunks.push({
        realPosition: [...inRealPosition],
        indexPosition: [...inIndexPosition],
        geometry,
        isVisible: false,
        isDirty: true,
        geometryFloat32buffer: new Float32Array(subBuffer),
        geometryBufferSizeUsed: inGeometryUsedLength
      });
    } else {
      const reused = this._unusedChunks.pop();
      reused.realPosition = [...inRealPosition];
      reused.indexPosition = [...inIndexPosition];
      reused.isVisible = false;
      reused.isDirty = true;
      reused.geometryFloat32buffer = new Float32Array(subBuffer);
      reused.geometryBufferSizeUsed = inGeometryUsedLength;
      this._usedChunks.push(reused);
    }
    this._usedSet.add(inIndexPosition);
    this._def.onChunkCreated();
  }
  update(cameraPosition, inWorkerManager) {
    this._updateGeneration(cameraPosition, inWorkerManager);
    for (const currChunk of this._usedChunks) {
      const isVisible = this._def.chunkIsVisible(currChunk.realPosition);
      currChunk.isVisible = isVisible;
    }
    for (const currChunk of this._usedChunks) {
      if (!currChunk.isVisible || !currChunk.isDirty) {
        continue;
      }
      currChunk.geometry.update(currChunk.realPosition, currChunk.geometryBufferSizeUsed, currChunk.geometryFloat32buffer);
      currChunk.isDirty = false;
      break;
    }
  }
  _updateGeneration(inCameraPosition, inWorkerManager) {
    exports_vec3.copy(this._cameraPosition, inCameraPosition);
    const currIndex = [
      Math.floor(inCameraPosition[0] / this._def.chunkGraphicSize),
      Math.floor(inCameraPosition[1] / this._def.chunkGraphicSize),
      Math.floor(inCameraPosition[2] / this._def.chunkGraphicSize)
    ];
    let needRefresh = false;
    if (this._usedChunks.length === 0 && inWorkerManager.areAllWorkerAvailable()) {
      needRefresh = true;
    }
    if (!needRefresh && !exports_vec3.exactEquals(currIndex, this._savedIndex)) {
      needRefresh = true;
    }
    if (needRefresh === false) {
      return;
    }
    exports_vec3.copy(this._savedIndex, currIndex);
    this._chunkPositionQueue.length = 0;
    const { chunkGenerationRange } = this._def;
    const minChunkPos = [
      Math.floor(currIndex[0] - chunkGenerationRange),
      Math.floor(currIndex[1] - chunkGenerationRange),
      Math.floor(currIndex[2] - chunkGenerationRange)
    ];
    const maxChunkPos = [
      Math.floor(currIndex[0] + chunkGenerationRange),
      Math.floor(currIndex[1] + chunkGenerationRange),
      Math.floor(currIndex[2] + chunkGenerationRange)
    ];
    for (let ii = 0;ii < this._usedChunks.length; ) {
      const { indexPosition } = this._usedChunks[ii];
      const isOutOfRange = indexPosition[0] < minChunkPos[0] || indexPosition[0] > maxChunkPos[0] || indexPosition[1] < minChunkPos[1] || indexPosition[1] > maxChunkPos[1] || indexPosition[2] < minChunkPos[2] || indexPosition[2] > maxChunkPos[2];
      if (isOutOfRange) {
        this._def.releaseGeometry(this._usedChunks[ii].geometry);
        const removedChunks = this._usedChunks.splice(ii, 1);
        this._unusedChunks.push(removedChunks[0]);
        this._usedSet.delete(indexPosition);
        this._def.onChunkDiscarded();
      } else {
        ++ii;
      }
    }
    const currPos = [0, 0, 0];
    for (currPos[2] = minChunkPos[2];currPos[2] <= maxChunkPos[2]; ++currPos[2]) {
      for (currPos[1] = minChunkPos[1];currPos[1] <= maxChunkPos[1]; ++currPos[1]) {
        for (currPos[0] = minChunkPos[0];currPos[0] <= maxChunkPos[0]; ++currPos[0]) {
          {
            const tmpIndex = this._usedChunks.findIndex((currChunk) => {
              return this._usedSet.has(currChunk.indexPosition);
            });
            if (tmpIndex >= 0) {
              return;
            }
          }
          {
            const tmpIndex = inWorkerManager.getInUseWorkersData().findIndex((currWorker) => {
              return exports_vec3.exactEquals(currWorker.processing.indexPosition, currPos);
            });
            if (tmpIndex >= 0) {
              return;
            }
          }
          this._chunkPositionQueue.push({
            indexPosition: [...currPos],
            realPosition: [
              currPos[0] * this._def.chunkGraphicSize,
              currPos[1] * this._def.chunkGraphicSize,
              currPos[2] * this._def.chunkGraphicSize
            ]
          });
        }
      }
    }
  }
  getBestNextChunkPosition() {
    if (this._chunkPositionQueue.length === 0) {
      return;
    }
    const _getDistanceToCamera = (chunkPosition) => {
      const chunkHSize = this._def.chunkGraphicSize * 0.5;
      const chunkCenter = [
        this._cameraPosition[0] - (chunkPosition[0] + chunkHSize),
        this._cameraPosition[1] - (chunkPosition[1] + chunkHSize),
        this._cameraPosition[2] - (chunkPosition[2] + chunkHSize)
      ];
      return exports_vec3.length(chunkCenter);
    };
    let bestIndex = -1;
    let bestMagnitude = -1;
    for (let ii = 0;ii < this._chunkPositionQueue.length; ++ii) {
      const { realPosition } = this._chunkPositionQueue[ii];
      if (!this._def.chunkIsVisible(realPosition)) {
        continue;
      }
      const magnitude = _getDistanceToCamera(realPosition);
      if (bestMagnitude >= 0 && bestMagnitude < magnitude) {
        continue;
      }
      bestIndex = ii;
      bestMagnitude = magnitude;
    }
    if (bestIndex < 0) {
      return;
    }
    return this._chunkPositionQueue.splice(bestIndex, 1)[0];
  }
}
// src/main/experiment/generation/ChunkGenerator.ts
class ChunkGenerator {
  _def;
  _geometryBufferSize;
  _dataBufferSize;
  _running = false;
  _chunkManager;
  _workerManager;
  _frameProfiler = new exports_system.metrics.FrameProfiler;
  constructor(def) {
    this._def = def;
    this._chunkManager = new ChunkManager({
      chunkGraphicSize: def.chunkGraphicSize,
      chunkGenerationRange: def.chunkGenerationRange,
      chunkLogicSize: def.chunkLogicSize,
      chunkIsVisible: def.chunkIsVisible,
      acquireGeometry: def.acquireGeometry,
      releaseGeometry: def.releaseGeometry,
      onChunkCreated: def.onChunkCreated,
      onChunkDiscarded: def.onChunkDiscarded
    });
    const onWorkerResult = (inWorkerData, inMessageData) => {
      const {
        indexPosition,
        realPosition,
        geometryFloat32buffer,
        geometryBufferSize,
        sizeUsed
      } = inMessageData;
      const currTime = Date.now();
      const delta = currTime - inMessageData.time;
      this._frameProfiler.pushDelta(delta);
      inWorkerData.geometryFloat32buffer = geometryFloat32buffer;
      inWorkerData.processing = undefined;
      if (!this._running) {
        return;
      }
      this._chunkManager.pushNew(indexPosition, realPosition, inWorkerData.geometryFloat32buffer, geometryBufferSize, sizeUsed);
      this._launchWorker();
    };
    this._workerManager = new WorkerManager(onWorkerResult);
    this._dataBufferSize = Math.pow(this._def.chunkLogicSize + 1 + 1, 3);
    this._geometryBufferSize = this._dataBufferSize * 20 * 6 * 3;
    for (let ii = 0;ii < this._def.workerTotal; ++ii) {
      this._workerManager.addOneWorker(this._def.workerFile, {
        geometryFloat32buffer: new Float32Array(this._geometryBufferSize)
      });
    }
  }
  start() {
    this._running = true;
  }
  stop() {
    if (!this._running)
      return;
    this._running = false;
    this._chunkManager.clear();
  }
  update(cameraPosition) {
    if (!this._running) {
      return;
    }
    this._chunkManager.update(cameraPosition, this._workerManager);
    this._launchWorker();
  }
  _launchWorker() {
    while (this._chunkManager.isNotDone() && this._workerManager.isWorkerAvailable()) {
      const nextPositionData = this._chunkManager.getBestNextChunkPosition();
      if (!nextPositionData) {
        break;
      }
      this._workerManager.pushTask((inWorkerData, inPushTask) => {
        inWorkerData.processing = nextPositionData;
        const payload = {
          realPosition: nextPositionData.realPosition,
          indexPosition: nextPositionData.indexPosition,
          geometryFloat32buffer: inWorkerData.geometryFloat32buffer,
          geometryBufferSize: this._geometryBufferSize,
          sizeUsed: 0,
          time: Date.now()
        };
        const transferable = [
          inWorkerData.geometryFloat32buffer.buffer
        ];
        inPushTask(payload, transferable);
      });
    }
  }
  getChunks() {
    return this._chunkManager.getChunks();
  }
  getFrameProfiler() {
    return this._frameProfiler;
  }
  getProcessingRealPositions() {
    return this._workerManager.getInUseWorkersData().map((workerData) => workerData.processing.realPosition);
  }
}

// src/main/experiment/webGLRenderer/renderers/scene/chunks-renderer/shaders/chunks-renderer.glsl.vert
var chunks_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;
uniform float u_sceneScale;
uniform float u_tileRepeat;

in vec3 a_vertex_position;
in vec3 a_vertex_normal;
in vec3 a_offset_origin;

out vec3 v_chunkSpacePosition;
out vec3 v_worldSpacePosition;
out vec3 v_worldSpaceNormal;

void main(void)
{
  vec3 chunkSpacePosition = a_vertex_position * u_sceneScale;

  v_chunkSpacePosition = a_vertex_position * u_tileRepeat;
  v_worldSpacePosition = a_offset_origin + chunkSpacePosition;
  v_worldSpaceNormal = a_vertex_normal;

  gl_Position = u_composedMatrix * vec4(v_worldSpacePosition, 1.0);
}
`.trim();

// src/main/experiment/webGLRenderer/renderers/scene/chunks-renderer/shaders/chunks-renderer.glsl.frag
var chunks_renderer_glsl_default2 = `
#version 300 es

precision lowp float;
precision highp sampler2DArray;

const float k_ambiantCoef = 0.1;
const vec3 k_specColor = vec3(1.0, 1.0, 1.0);

uniform sampler2DArray u_textureArray;

uniform vec3 u_eyePosition;

in vec3 v_chunkSpacePosition;
in vec3 v_worldSpacePosition;
in vec3 v_worldSpaceNormal;

out vec4 o_color;

vec4 _getColorValue()
{

  // current 3d texture coordinate
  vec3 flooredPos = vec3(
    v_chunkSpacePosition.x - floor(v_chunkSpacePosition.x),
    v_chunkSpacePosition.y - floor(v_chunkSpacePosition.y),
    v_chunkSpacePosition.z - floor(v_chunkSpacePosition.z)
  );

  vec3 blendWeights = abs( normalize( v_worldSpaceNormal.xyz ) );
  blendWeights = max( ( blendWeights - 0.2 ) * 7.0, 0.0 );
  blendWeights /= ( blendWeights.x + blendWeights.y + blendWeights.z );

  // horizontal texture coordinates -> should be a wall
  vec2 texCoordX = vec2(flooredPos.y, flooredPos.z);
  vec2 texCoordY = vec2(flooredPos.x, flooredPos.z);

  // vertical texture coord -> should be green grass
  vec2 texCoordZ = vec2(flooredPos.x, flooredPos.y);

  // horizontal color
  vec3 texColorX = texture( u_textureArray, vec3(texCoordX, 2) ).rgb;
  vec3 texColorY = texture( u_textureArray, vec3(texCoordY, 2) ).rgb;

  float specularRatioX = texture( u_textureArray, vec3(texCoordX, 3) ).r * blendWeights.x;
  float specularRatioY = texture( u_textureArray, vec3(texCoordY, 3) ).r * blendWeights.y;
  float specularRatio = max( specularRatioX, specularRatioY );

  // vertical color
  vec3 texColorZ = vec3(0.0);
  if (v_worldSpaceNormal.z < 0.0)
  {
    texColorZ = texture( u_textureArray, vec3(texCoordZ, 0) ).rgb;
  }
  else
  {
    texColorZ = texture( u_textureArray, vec3(texCoordZ, 1) ).rgb;
  }

  return vec4(
    texColorX * blendWeights.xxx +
    texColorY * blendWeights.yyy +
    texColorZ * blendWeights.zzz,
    specularRatio
  );
}

vec3 _getLightColor(vec4 currentColor)
{
  vec3 normal = normalize(v_worldSpaceNormal);
  vec3 lightDir = normalize(u_eyePosition - v_worldSpacePosition);

  float diffuseCoef = max(dot(lightDir,v_worldSpaceNormal.xyz), 0.0);
  float specularCoef = 0.0;

  if (diffuseCoef > 0.0)
  {
    // specular

    vec3 reflectDir = reflect(-lightDir, normal);
    vec3 viewDir = normalize(u_eyePosition - v_worldSpacePosition);

    float specAngle = max(dot(reflectDir, viewDir), 0.0);
    specularCoef = pow(specAngle, 16.0);
  }

  vec3 diffuseColor = currentColor.rgb * (k_ambiantCoef + diffuseCoef);
  vec3 specularColor = k_specColor * specularCoef * currentColor.a;

  return diffuseColor + specularColor;
}

void main(void)
{
  o_color = vec4(_getLightColor(_getColorValue()), 1.0);
}
`.trim();

// src/main/experiment/webGLRenderer/renderers/scene/chunks-renderer/ChunksRenderer.ts
var { GeometryWrapper, ShaderProgram: ShaderProgram3, TextureArray: TextureArray3, FenceSync: FenceSync2 } = exports_graphics.webgl2;

class LiveGeometry {
  _origin = exports_vec3.fromValues(0, 0, 0);
  _size = 0;
  _geometry;
  _fence = new FenceSync2;
  constructor(inShader, inGeometryDefinition, preAllocatedSize) {
    this._geometry = new GeometryWrapper.Geometry(inShader, inGeometryDefinition);
    this._geometry.setFloatBufferSize(0, preAllocatedSize);
    this._geometry.setFloatBufferSize(1, 12);
  }
  update(inOrigin, inBufferLength, inBuffer) {
    exports_vec3.copy(this._origin, inOrigin);
    this._size = inBufferLength;
    this._geometry.updateBuffer(0, inBuffer, inBufferLength);
    this._geometry.setPrimitiveCount(inBufferLength / 6);
    const newBuffer = new Float32Array([inOrigin[0], inOrigin[1], inOrigin[2]]);
    this._geometry.updateBuffer(1, newBuffer, newBuffer.length);
    this._geometry.setInstancedCount(1);
    this._fence.start();
  }
  render() {
    if (this._fence.isStarted()) {
      if (this._fence.isSignaled()) {
        this._fence.dispose();
      } else {
        return;
      }
    }
    this._geometry.render();
  }
  reuse() {
    this._fence.dispose();
  }
  getOrigin() {
    return this._origin;
  }
  getSize() {
    return this._size;
  }
}

class ChunksRenderer {
  _shader;
  _textureArray = new TextureArray3;
  _geometryDefinition;
  _unusedGeometries = [];
  _inUseGeometries = [];
  constructor() {
    this._shader = new ShaderProgram3("ChunksRenderer", {
      vertexSrc: chunks_renderer_glsl_default,
      fragmentSrc: chunks_renderer_glsl_default2,
      attributes: ["a_vertex_position", "a_vertex_normal", "a_offset_origin"],
      uniforms: [
        "u_composedMatrix",
        "u_eyePosition",
        "u_sceneScale",
        "u_tileRepeat",
        "u_textureArray"
      ]
    });
    const geoBuilder = new GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangles").addVbo().addVboAttribute("a_vertex_position", "vec3f").addVboAttribute("a_vertex_normal", "vec3f").setStride(24).addVbo().setVboAsInstanced().addVboAttribute("a_offset_origin", "vec3f").setStride(12);
    this._geometryDefinition = geoBuilder.getDef();
  }
  async initialize() {
    const image = await exports_graphics.images.getImageFromUrl("assets/composed.png");
    this._textureArray.initialize();
    this._textureArray.bind((bound) => {
      bound.loadFromImage(512, 512, 4, image);
    });
    this._shader.bind((boundShader) => {
      boundShader.setTextureUniform("u_textureArray", this._textureArray, 1);
    });
  }
  acquireGeometry(inSize) {
    if (this._unusedGeometries.length > 0) {
      const reusedGeom = this._unusedGeometries.pop();
      this._inUseGeometries.push(reusedGeom);
      return reusedGeom;
    }
    const newGeom = new LiveGeometry(this._shader, this._geometryDefinition, inSize);
    this._inUseGeometries.push(newGeom);
    return newGeom;
  }
  releaseGeometry(geom) {
    const geomImpl = geom;
    const index = this._inUseGeometries.indexOf(geomImpl);
    if (index < 0) {
      return;
    }
    geomImpl.reuse();
    this._unusedGeometries.push(geomImpl);
    this._inUseGeometries.splice(index, 1);
  }
  render(inCamera, inFrustumCulling, inChunkSize) {
    const eyePos = inCamera.getEye();
    this._shader.bind((boundShader) => {
      boundShader.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      boundShader.setFloat3Uniform("u_eyePosition", eyePos[0], eyePos[1], eyePos[2]);
      boundShader.setFloat1Uniform("u_sceneScale", inChunkSize);
      boundShader.setFloat1Uniform("u_tileRepeat", 2);
      const toRender = this._inUseGeometries.map((geometry) => {
        const k_size = geometry.getSize();
        const k_hSize = k_size * 0.5;
        const centerX = geometry.getOrigin()[0] + k_hSize;
        const centerY = geometry.getOrigin()[1] + k_hSize;
        const centerZ = geometry.getOrigin()[2] + k_hSize;
        return {
          geometry,
          center: [centerX, centerY, centerZ],
          distance: 0
        };
      }).filter(({ center, geometry }) => inFrustumCulling.cubeInFrustumVec3(center, geometry.getSize())).map((sortableGeo) => {
        sortableGeo.distance = exports_vec3.distance(sortableGeo.center, inCamera.getEye());
        return sortableGeo;
      }).sort((a, b) => a.distance - b.distance);
      toRender.forEach((sortableGeo) => sortableGeo.geometry.render());
    });
  }
}
// src/main/experiment/webGLRenderer/renderers/scene/triangle-cubes-renderer/shaders/triangle-cubes-renderer.glsl.vert
var triangle_cubes_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3  a_vertex_position;

in vec3  a_offset_center;
in float a_offset_scale;
in vec4  a_offset_color;

flat out vec4 v_color;

void main(void)
{
  vec3 position = a_offset_center + a_vertex_position * a_offset_scale;

  gl_Position = u_composedMatrix * vec4(position, 1.0);

  v_color = a_offset_color;
}
`.trim();

// src/main/experiment/webGLRenderer/renderers/scene/triangle-cubes-renderer/shaders/triangle-cubes-renderer.glsl.frag
var triangle_cubes_renderer_glsl_default2 = `
#version 300 es

precision lowp float;

flat in vec4 v_color;

out vec4 out_color;

void main(void)
{
  out_color = v_color;
}
`.trim();

// src/main/experiment/webGLRenderer/renderers/scene/triangle-cubes-renderer/TriangleCubesRenderer.ts
var { ShaderProgram: ShaderProgram4, GeometryWrapper: GeometryWrapper2 } = exports_graphics.webgl2;
var generateCubeVertices = (inOrigin, inSize) => {
  const vertices = [];
  const hSizeX = inSize[0] * 0.5;
  const hSizeY = inSize[1] * 0.5;
  const hSizeZ = inSize[2] * 0.5;
  const tmpVertices = [
    [inOrigin[0] - hSizeX, inOrigin[1] - hSizeY, inOrigin[2] - hSizeZ],
    [inOrigin[0] + hSizeX, inOrigin[1] - hSizeY, inOrigin[2] - hSizeZ],
    [inOrigin[0] - hSizeX, inOrigin[1] + hSizeY, inOrigin[2] - hSizeZ],
    [inOrigin[0] + hSizeX, inOrigin[1] + hSizeY, inOrigin[2] - hSizeZ],
    [inOrigin[0] - hSizeX, inOrigin[1] - hSizeY, inOrigin[2] + hSizeZ],
    [inOrigin[0] + hSizeX, inOrigin[1] - hSizeY, inOrigin[2] + hSizeZ],
    [inOrigin[0] - hSizeX, inOrigin[1] + hSizeY, inOrigin[2] + hSizeZ],
    [inOrigin[0] + hSizeX, inOrigin[1] + hSizeY, inOrigin[2] + hSizeZ]
  ];
  const indices = [];
  indices.push(0, 2, 1);
  indices.push(2, 3, 1);
  indices.push(4, 5, 6);
  indices.push(6, 5, 7);
  indices.push(1, 3, 5);
  indices.push(5, 3, 7);
  indices.push(0, 4, 2);
  indices.push(4, 6, 2);
  indices.push(2, 6, 3);
  indices.push(6, 7, 3);
  indices.push(0, 1, 4);
  indices.push(4, 1, 5);
  for (const index of indices) {
    vertices.push(tmpVertices[index]);
  }
  return vertices;
};
var generateWireFrameCubeVertices = (inSize) => {
  const rectSize = 0.001953125;
  const rectPos = 0.5 - rectSize * 0.5;
  const vertices = [
    ...generateCubeVertices([inSize * -rectPos, inSize * -rectPos, 0], [rectSize, rectSize, 1]),
    ...generateCubeVertices([inSize * +rectPos, inSize * -rectPos, 0], [rectSize, rectSize, 1]),
    ...generateCubeVertices([inSize * +rectPos, inSize * +rectPos, 0], [rectSize, rectSize, 1]),
    ...generateCubeVertices([inSize * -rectPos, inSize * +rectPos, 0], [rectSize, rectSize, 1]),
    ...generateCubeVertices([inSize * -rectPos, 0, inSize * -rectPos], [rectSize, 1, rectSize]),
    ...generateCubeVertices([inSize * +rectPos, 0, inSize * -rectPos], [rectSize, 1, rectSize]),
    ...generateCubeVertices([inSize * +rectPos, 0, inSize * +rectPos], [rectSize, 1, rectSize]),
    ...generateCubeVertices([inSize * -rectPos, 0, inSize * +rectPos], [rectSize, 1, rectSize]),
    ...generateCubeVertices([0, inSize * -rectPos, inSize * -rectPos], [1, rectSize, rectSize]),
    ...generateCubeVertices([0, inSize * +rectPos, inSize * -rectPos], [1, rectSize, rectSize]),
    ...generateCubeVertices([0, inSize * +rectPos, inSize * +rectPos], [1, rectSize, rectSize]),
    ...generateCubeVertices([0, inSize * -rectPos, inSize * +rectPos], [1, rectSize, rectSize])
  ];
  const finalVertices = [];
  vertices.forEach((vertex) => {
    finalVertices.push(vertex[0], vertex[1], vertex[2]);
  });
  return finalVertices;
};
var k_bufferSize6 = 32768;

class TriangleCubesRenderer {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize6);
  _currentSize = 0;
  constructor() {
    this._shader = new ShaderProgram4("TriangleCubesRenderer", {
      vertexSrc: triangle_cubes_renderer_glsl_default,
      fragmentSrc: triangle_cubes_renderer_glsl_default2,
      attributes: [
        "a_vertex_position",
        "a_offset_center",
        "a_offset_scale",
        "a_offset_color"
      ],
      uniforms: ["u_composedMatrix"]
    });
    const geoBuilder = new GeometryWrapper2.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangles").addVbo().addVboAttribute("a_vertex_position", "vec3f").setStride(12).addVbo().setVboAsDynamic().setVboAsInstanced().addVboAttribute("a_offset_center", "vec3f").addVboAttribute("a_offset_scale", "float").addVboAttribute("a_offset_color", "vec4f").setStride(32);
    const vertices = generateWireFrameCubeVertices(1);
    this._geometry = new GeometryWrapper2.Geometry(this._shader, geoBuilder.getDef());
    this._geometry.allocateBuffer(0, vertices, vertices.length);
    this._geometry.setPrimitiveCount(vertices.length / 3);
    this._geometry.setFloatBufferSize(1, k_bufferSize6);
  }
  pushCenteredCube(inCenter, inScale, inColor) {
    if (this._currentSize + 8 >= this._buffer.length) {
      return;
    }
    this._buffer[this._currentSize++] = inCenter[0];
    this._buffer[this._currentSize++] = inCenter[1];
    this._buffer[this._currentSize++] = inCenter[2];
    this._buffer[this._currentSize++] = inScale;
    this._buffer[this._currentSize++] = inColor[0];
    this._buffer[this._currentSize++] = inColor[1];
    this._buffer[this._currentSize++] = inColor[2];
    this._buffer[this._currentSize++] = inColor[3] || 1;
  }
  pushOriginBoundCube(inOrigin, inScale, inColor) {
    if (this._currentSize + 8 >= this._buffer.length) {
      return;
    }
    const hScale = inScale * 0.5;
    this._buffer[this._currentSize++] = inOrigin[0] + hScale;
    this._buffer[this._currentSize++] = inOrigin[1] + hScale;
    this._buffer[this._currentSize++] = inOrigin[2] + hScale;
    this._buffer[this._currentSize++] = inScale;
    this._buffer[this._currentSize++] = inColor[0];
    this._buffer[this._currentSize++] = inColor[1];
    this._buffer[this._currentSize++] = inColor[2];
    this._buffer[this._currentSize++] = inColor[3] || 1;
  }
  flush(inCamera) {
    if (this._currentSize <= 0) {
      return;
    }
    this._shader.bind((boundShader) => {
      boundShader.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      this._geometry.updateBuffer(1, this._buffer, this._currentSize);
      this._geometry.setInstancedCount(this._currentSize / 8);
      this._geometry.render();
    });
    this.clear();
  }
  clear() {
    this._currentSize = 0;
  }
}
// src/main/experiment/webGLRenderer/renderers/hud/wireFrame-cubes-renderer/shaders/wireFrame-cubes-renderer.glsl.vert
var wireFrame_cubes_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3  a_vertex_position;

in vec3  a_offset_center;
in float a_offset_scale;
in vec4  a_offset_color;

flat out vec4 v_color;

void main(void)
{
  vec3 position = a_offset_center + a_vertex_position * a_offset_scale;

  gl_Position = u_composedMatrix * vec4(position, 1.0);

  v_color = a_offset_color;
}
`.trim();

// src/main/experiment/webGLRenderer/renderers/hud/wireFrame-cubes-renderer/shaders/wireFrame-cubes-renderer.glsl.frag
var wireFrame_cubes_renderer_glsl_default2 = `
#version 300 es

precision lowp float;

flat in vec4 v_color;

out vec4 out_color;

void main(void)
{
  out_color = v_color;
}
`.trim();

// src/main/experiment/webGLRenderer/renderers/hud/wireFrame-cubes-renderer/WireFrameCubesRenderer.ts
var { ShaderProgram: ShaderProgram5, GeometryWrapper: GeometryWrapper3 } = exports_graphics.webgl2;
var generateWireFrameCubeVertices2 = (inSize) => {
  const hSize = inSize * 0.5;
  const vertices = [];
  vertices.push([+hSize, +hSize, +hSize]);
  vertices.push([-hSize, +hSize, +hSize]);
  vertices.push([+hSize, -hSize, +hSize]);
  vertices.push([-hSize, -hSize, +hSize]);
  vertices.push([+hSize, +hSize, -hSize]);
  vertices.push([-hSize, +hSize, -hSize]);
  vertices.push([+hSize, -hSize, -hSize]);
  vertices.push([-hSize, -hSize, -hSize]);
  const indices = [];
  indices.push(0, 1, 1, 3, 3, 2, 2, 0);
  indices.push(4, 5, 5, 7, 7, 6, 6, 4);
  indices.push(0, 4, 1, 5, 3, 7, 2, 6);
  const finalVertices = [];
  for (let ii = 0;ii < indices.length; ++ii) {
    const vertex = vertices[indices[ii]];
    finalVertices.push(vertex[0], vertex[1], vertex[2]);
  }
  return finalVertices;
};
var k_bufferSize7 = 32768;

class WireFrameCubesRenderer {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize7);
  _currentSize = 0;
  constructor() {
    this._shader = new ShaderProgram5("WireFrameCubesRenderer", {
      vertexSrc: wireFrame_cubes_renderer_glsl_default,
      fragmentSrc: wireFrame_cubes_renderer_glsl_default2,
      attributes: [
        "a_vertex_position",
        "a_offset_center",
        "a_offset_scale",
        "a_offset_color"
      ],
      uniforms: ["u_composedMatrix"]
    });
    const geoBuilder = new GeometryWrapper3.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("lines").addVbo().addVboAttribute("a_vertex_position", "vec3f").setStride(12).addVbo().setVboAsDynamic().setVboAsInstanced().addVboAttribute("a_offset_center", "vec3f").addVboAttribute("a_offset_scale", "float").addVboAttribute("a_offset_color", "vec4f").setStride(32);
    const vertices = generateWireFrameCubeVertices2(1);
    this._geometry = new GeometryWrapper3.Geometry(this._shader, geoBuilder.getDef());
    this._geometry.allocateBuffer(0, vertices, vertices.length);
    this._geometry.setPrimitiveCount(vertices.length / 3);
    this._geometry.setFloatBufferSize(1, k_bufferSize7);
  }
  pushCenteredCube(inCenter, inScale, inColor) {
    if (this._currentSize + 8 >= this._buffer.length) {
      return;
    }
    this._buffer[this._currentSize++] = inCenter[0];
    this._buffer[this._currentSize++] = inCenter[1];
    this._buffer[this._currentSize++] = inCenter[2];
    this._buffer[this._currentSize++] = inScale;
    this._buffer[this._currentSize++] = inColor[0];
    this._buffer[this._currentSize++] = inColor[1];
    this._buffer[this._currentSize++] = inColor[2];
    this._buffer[this._currentSize++] = inColor[3] || 1;
  }
  pushOriginBoundCube(inOrigin, inScale, inColor) {
    if (this._currentSize + 8 >= this._buffer.length) {
      return;
    }
    const hScale = inScale * 0.5;
    this._buffer[this._currentSize++] = inOrigin[0] + hScale;
    this._buffer[this._currentSize++] = inOrigin[1] + hScale;
    this._buffer[this._currentSize++] = inOrigin[2] + hScale;
    this._buffer[this._currentSize++] = inScale;
    this._buffer[this._currentSize++] = inColor[0];
    this._buffer[this._currentSize++] = inColor[1];
    this._buffer[this._currentSize++] = inColor[2];
    this._buffer[this._currentSize++] = inColor[3] || 1;
  }
  flush(composedMatrix) {
    if (this._currentSize <= 0) {
      return;
    }
    this._shader.bind((boundShader) => {
      boundShader.setMatrix4Uniform("u_composedMatrix", composedMatrix);
      this._geometry.updateBuffer(1, this._buffer, this._currentSize);
      this._geometry.setInstancedCount(this._currentSize / 8);
      this._geometry.render();
    });
    this.clear();
  }
  clear() {
    this._currentSize = 0;
  }
}
// src/main/experiment/webGLRenderer/WebGLRenderer.ts
var { GlobalMouseManager: GlobalMouseManager2, GlobalTouchManager: GlobalTouchManager2 } = exports_system.browser;
var { WebGLContext: WebGLContext14, ShaderProgram: ShaderProgram6 } = exports_graphics.webgl2;

class WebGLRenderer {
  _def;
  _viewportSize = exports_vec2.create();
  _frustumCulling = new exports_graphics.camera.FrustumCulling;
  _mainCamera = new exports_graphics.camera.Camera;
  _mainHudCamera = new exports_graphics.camera.Camera;
  onContextLost = null;
  onContextRestored = null;
  _scene;
  _hud;
  constructor(def) {
    this._def = def;
    WebGLContext14.initialize(this._def.canvasDomElement);
    const onContextLost = (event) => {
      event.preventDefault();
      console.log("context is lost");
      if (this.onContextLost) {
        this.onContextLost();
      }
    };
    const onContextRestored = () => {
      console.log("context is restored");
      WebGLContext14.initialize(this._def.canvasDomElement);
      if (this.onContextRestored) {
        this.onContextRestored();
      }
    };
    this._def.canvasDomElement.addEventListener("webglcontextlost", onContextLost, false);
    this._def.canvasDomElement.addEventListener("webglcontextrestored", onContextRestored, false);
    this._scene = {
      chunksRenderer: new ChunksRenderer,
      triangleCubesRenderer: new TriangleCubesRenderer
    };
    this._hud = {
      textRenderer: new exports_graphics.renderers.TextRenderer,
      stackRenderers: new exports_graphics.renderers.StackRenderers,
      wireFrameCubesRenderer: new WireFrameCubesRenderer,
      multipleBuffering: new exports_graphics.renderers.MultiBuffersRendering(this._def.canvasDomElement.width, this._def.canvasDomElement.height)
    };
    this.resize(this._def.canvasDomElement.width, this._def.canvasDomElement.height);
  }
  resize(width, height) {
    this._viewportSize[0] = width;
    this._viewportSize[1] = height;
    this._mainCamera.setViewportSize(width, height);
    this._mainCamera.setAsPerspective({ fovy: 70, near: 0.1, far: 70 });
    this._mainHudCamera.setViewportSize(width, height);
    this._mainHudCamera.setAsOrthogonal({
      left: -width * 0.5,
      right: +width * 0.5,
      top: -height * 0.5,
      bottom: +height * 0.5,
      near: -200,
      far: 200
    });
    this._mainHudCamera.setEye([+width * 0.5, +height * 0.5, 1]);
    this._mainHudCamera.setTarget([+width * 0.5, +height * 0.5, 0]);
    this._mainHudCamera.setUpAxis([0, 1, 0]);
    this._mainHudCamera.computeMatrices();
    this._hud.multipleBuffering.resize(width, height);
  }
  toggleContextLoss() {
    const gl = WebGLContext14.getContext();
    const extensionLoseContext = WebGLContext14.getExtensionLoseContext();
    if (extensionLoseContext) {
      if (gl.isContextLost()) {
        extensionLoseContext.restoreContext();
      } else {
        extensionLoseContext.loseContext();
      }
    }
  }
  contextIsLost() {
    const gl = WebGLContext14.getContext();
    return gl.isContextLost();
  }
  setOnContextLost(callback) {
    this.onContextLost = callback;
  }
  setOnContextRestored(callback) {
    this.onContextRestored = callback;
  }
  async init() {
    const gl = WebGLContext14.getContext();
    gl.clearColor(0, 0, 0, 1);
    gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LESS);
    gl.disable(gl.BLEND);
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR);
    gl.activeTexture(gl.TEXTURE0);
    gl.enable(gl.CULL_FACE);
    await this._scene.chunksRenderer.initialize();
  }
  getSize() {
    return this._viewportSize;
  }
  lookAt(inEye, inTarget, inUpAxis) {
    this._mainCamera.setEye(inEye);
    this._mainCamera.setTarget(inTarget);
    this._mainCamera.setUpAxis(inUpAxis);
    this._mainCamera.computeMatrices();
  }
  update() {
    GlobalMouseManager2.resetDeltas();
    GlobalTouchManager2.resetDeltas();
    this._frustumCulling.calculateFrustum(this._mainCamera.getProjectionMatrix(), this._mainCamera.getViewMatrix());
  }
  renderScene(callback) {
    const gl = WebGLContext14.getContext();
    const viewPos = this._mainCamera.getViewportPos();
    const viewSize = this._mainCamera.getViewportSize();
    gl.viewport(viewPos[0], viewPos[1], viewSize[0], viewSize[1]);
    gl.clearColor(0, 0, 0, 1);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    callback();
  }
  renderHUD(callback) {
    const gl = WebGLContext14.getContext();
    const viewPos = this._mainHudCamera.getViewportPos();
    const viewSize = this._mainHudCamera.getViewportSize();
    gl.viewport(viewPos[0], viewPos[1], viewSize[0], viewSize[1]);
    gl.clear(gl.DEPTH_BUFFER_BIT);
    ShaderProgram6.unbind();
    callback();
  }
  flush() {
    const gl = exports_graphics.webgl2.WebGLContext.getContext();
    gl.flush();
  }
  get mainCamera() {
    return this._mainCamera;
  }
  get hudCamera() {
    return this._mainHudCamera;
  }
  get frustumCulling() {
    return this._frustumCulling;
  }
  get chunksRenderer() {
    return this._scene.chunksRenderer;
  }
  get triangleCubesRenderer() {
    return this._scene.triangleCubesRenderer;
  }
  get stackRenderers() {
    return this._hud.stackRenderers;
  }
  get wireFrameCubesRenderer() {
    return this._hud.wireFrameCubesRenderer;
  }
  get textRenderer() {
    return this._hud.textRenderer;
  }
  get multipleBuffering() {
    return this._hud.multipleBuffering;
  }
}

// src/main/experiment/webGLRenderer/renderers/hud/widgets/renderCurrentCoordinates.ts
var renderCurrentCoordinates = (inViewportSize, inChunkSize, inEyePos, inTextRenderer) => {
  const chunkCoord = [
    Math.floor(inEyePos[0] / inChunkSize),
    Math.floor(inEyePos[1] / inChunkSize),
    Math.floor(inEyePos[2] / inChunkSize)
  ];
  const allLines = [
    `Coordinates:`,
    `X: ${chunkCoord[0]}`,
    `Y: ${chunkCoord[1]}`,
    `Z: ${chunkCoord[2]}`
  ];
  const textsOrigin = [14, inViewportSize[1] - 200];
  inTextRenderer.setTextScale(14).setTextAlign("left", "top").pushText(allLines.join("\n"), textsOrigin);
};
// src/main/experiment/webGLRenderer/renderers/hud/widgets/renderGenerationMetrics.ts
var renderGenerationMetrics = (inViewportSize, inChunksCreated, inChunksDiscarded, inVisibleChunks, inTextRenderer) => {
  const textsOrigin = [
    inViewportSize[0] - 10,
    inViewportSize[1] - 10
  ];
  const text = [
    `Chunks\nGenerated:\n${inChunksCreated} <`,
    "",
    `Chunks\nDiscarded:\n${inChunksDiscarded} <`,
    "",
    `Live\nChunks:\n${inChunksCreated - inChunksDiscarded} <`,
    "",
    `Visible\nChunks:\n${inVisibleChunks} <`
  ].join("\n");
  inTextRenderer.setTextScale(14).setTextAlign("right", "top").pushText(text, textsOrigin);
};
// src/main/experiment/webGLRenderer/renderers/hud/widgets/utils/renderPerspectiveFrustum.ts
var renderPerspectiveFrustum = (inFovY, inAspect, inNear, inFar, eyePos, theta, phi, inStackRenderers) => {
  const fH = Math.tan(inFovY / 360 * Math.PI) * inNear;
  const fW = fH * inAspect;
  const nearLeft = -fW;
  const nearRight = +fW;
  const nearTop = +fH;
  const nearBottom = -fH;
  const farHalfZ = inFar * Math.sin(inFovY * Math.PI / 180);
  const farHalfY = farHalfZ * inAspect;
  const tmpVertices = [];
  tmpVertices.push([inNear, nearLeft, nearTop]);
  tmpVertices.push([inNear, nearRight, nearTop]);
  tmpVertices.push([inNear, nearLeft, nearBottom]);
  tmpVertices.push([inNear, nearRight, nearBottom]);
  tmpVertices.push([inFar, -farHalfY, +farHalfZ]);
  tmpVertices.push([inFar, +farHalfY, +farHalfZ]);
  tmpVertices.push([inFar, -farHalfY, -farHalfZ]);
  tmpVertices.push([inFar, +farHalfY, -farHalfZ]);
  tmpVertices.push([0, 0, 0]);
  tmpVertices.push([100, 0, 0]);
  tmpVertices.push([0, 100, 0]);
  tmpVertices.push([0, 0, 100]);
  {
    const tmpMatrix = exports_mat4.identity(exports_mat4.create());
    exports_mat4.translate(tmpMatrix, tmpMatrix, eyePos);
    exports_mat4.rotate(tmpMatrix, tmpMatrix, theta, [0, 0, 1]);
    exports_mat4.rotate(tmpMatrix, tmpMatrix, phi, [0, -1, 0]);
    for (let ii = 0;ii < tmpVertices.length; ++ii) {
      tmpVertices[ii] = exports_vec3.transformMat4(tmpVertices[ii], tmpVertices[ii], tmpMatrix);
    }
  }
  {
    const indices = [];
    indices.push(0, 1, 1, 3, 3, 2, 2, 0);
    indices.push(0, 4, 1, 5, 2, 6, 3, 7);
    indices.push(4, 5, 5, 7, 7, 6, 6, 4);
    const colorTop = [1, 1, 0];
    for (let ii = 0;ii < indices.length; ii += 2) {
      const posA = tmpVertices[indices[ii + 0]];
      const posB = tmpVertices[indices[ii + 1]];
      inStackRenderers.pushLine(posA, posB, colorTop);
    }
    {
      const posA = tmpVertices[8];
      const posB1 = tmpVertices[9];
      const posB2 = tmpVertices[10];
      const posB3 = tmpVertices[11];
      inStackRenderers.pushLine(posA, posB1, [1, 0, 0]);
      inStackRenderers.pushLine(posA, posB2, [0, 1, 0]);
      inStackRenderers.pushLine(posA, posB3, [0, 0, 1]);
    }
  }
};
// src/main/experiment/webGLRenderer/renderers/hud/widgets/renderMiniMap.ts
var { WebGLContext: WebGLContext15 } = exports_graphics.webgl2;
var renderMiniMap = (inCamera, inMinScreenSize, inMinViewSize, inChunks, inChunkSize, inViewportSize, inProcessingPos, inWireFrameCubesRenderer, inStackRenderers) => {
  const gl = WebGLContext15.getContext();
  const [width, height] = inViewportSize;
  const miniMapHudCamera = new exports_graphics.camera.Camera;
  const minViewportSize = Math.min(width, height) * 0.5;
  const minimapWidth = Math.max(minViewportSize, inMinScreenSize);
  const minimapHeight = Math.max(minViewportSize, inMinScreenSize);
  const minimapPosX = width - minimapWidth;
  miniMapHudCamera.setViewportPos(minimapPosX, 0);
  miniMapHudCamera.setViewportSize(minimapWidth, minimapHeight);
  const aspectRatio = minimapWidth / minimapHeight;
  const orthoSizeH = aspectRatio >= 1 ? inMinViewSize : inMinViewSize * (1 / aspectRatio);
  const orthoSizeW = orthoSizeH * aspectRatio;
  miniMapHudCamera.setAsOrthogonal({
    left: -orthoSizeW,
    right: +orthoSizeW,
    top: -orthoSizeH,
    bottom: +orthoSizeH,
    near: -inMinViewSize,
    far: +inMinViewSize
  });
  miniMapHudCamera.setUpAxis([0, 0, 1]);
  const mainEyePos = inCamera.getEye();
  const targetPos = inCamera.getTarget();
  const diff = exports_vec3.sub(exports_vec3.create(), targetPos, mainEyePos);
  const forwardTheta = Math.atan2(diff[1], diff[0]);
  const forwardPhi = Math.atan2(diff[2], exports_vec2.length(exports_vec2.fromValues(diff[1], diff[0])));
  const inclinedTheta = forwardTheta - Math.PI * 0.25;
  const upPhi = forwardPhi + Math.PI * 0.5;
  const inclinedCosTheta = Math.cos(inclinedTheta);
  const inclinedSinTheta = Math.sin(inclinedTheta);
  const upAxisZ = Math.sin(upPhi);
  const miniMapEyePos = exports_vec3.copy(exports_vec3.create(), mainEyePos);
  miniMapEyePos[0] -= inclinedCosTheta * 20;
  miniMapEyePos[1] -= inclinedSinTheta * 20;
  miniMapEyePos[2] += upAxisZ * 10;
  miniMapHudCamera.setEye(miniMapEyePos);
  miniMapHudCamera.setTarget(mainEyePos);
  miniMapHudCamera.computeMatrices();
  const viewPos = miniMapHudCamera.getViewportPos();
  const viewSize = miniMapHudCamera.getViewportSize();
  gl.viewport(viewPos[0], viewPos[1], viewSize[0], viewSize[1]);
  gl.clear(gl.DEPTH_BUFFER_BIT);
  gl.disable(gl.DEPTH_TEST);
  gl.enable(gl.BLEND);
  inWireFrameCubesRenderer.clear();
  const k_whiteColor = exports_vec3.fromValues(1, 1, 1);
  const k_redColor = exports_vec4.fromValues(1, 0, 0, 0.8);
  const k_greenColor = exports_vec3.fromValues(0, 1, 0);
  const hSize = inChunkSize * 0.5;
  const chunkCenter = exports_vec3.create();
  const chunkHalfSize = exports_vec3.fromValues(hSize, hSize, hSize);
  inChunks.forEach((currChunk) => {
    exports_vec3.copy(chunkCenter, currChunk.realPosition);
    exports_vec3.add(chunkCenter, chunkCenter, chunkHalfSize);
    if (currChunk.isVisible) {
      inWireFrameCubesRenderer.pushCenteredCube(chunkCenter, hSize, k_whiteColor);
    } else {
      inWireFrameCubesRenderer.pushCenteredCube(chunkCenter, hSize, k_redColor);
    }
  });
  if (inProcessingPos.length > 0) {
    const extraSize = inChunkSize * 1.2;
    inProcessingPos.forEach((currPos) => {
      exports_vec3.copy(chunkCenter, currPos);
      exports_vec3.add(chunkCenter, chunkCenter, chunkHalfSize);
      inWireFrameCubesRenderer.pushCenteredCube(chunkCenter, extraSize, k_greenColor);
    });
  }
  inWireFrameCubesRenderer.flush(miniMapHudCamera.getComposedMatrix());
  inStackRenderers.flush(miniMapHudCamera.getComposedMatrix());
  {
    const projData = inCamera.getPerspectiveData();
    renderPerspectiveFrustum(projData.fovy, projData.aspectRatio, projData.near, projData.far, mainEyePos, forwardTheta, forwardPhi, inStackRenderers);
    inStackRenderers.flush(miniMapHudCamera.getComposedMatrix());
  }
  gl.disable(gl.BLEND);
  gl.enable(gl.DEPTH_TEST);
};
// src/main/experiment/webGLRenderer/renderers/hud/widgets/renderTouchEvents.ts
var { GlobalTouchManager: GlobalTouchManager3 } = exports_system.browser;
var _touchesAngleMap = new Map;
var renderTouchEvents = (viewportSize, stackRenderers, isMovingForward) => {
  const allTouchData = GlobalTouchManager3.getTouchData();
  if (allTouchData.length === 0) {
    _touchesAngleMap.clear();
  } else {
    const latestTouchIds = new Set;
    const redColor = [1, 0, 0];
    const greenColor = [0, 1, 0];
    const color = allTouchData.length > 1 ? redColor : greenColor;
    allTouchData.forEach((currTouch) => {
      latestTouchIds.add(currTouch.id);
      let angle3 = _touchesAngleMap.get(currTouch.id);
      if (angle3 === undefined) {
        angle3 = 0;
        _touchesAngleMap.set(currTouch.id, angle3);
      }
      const angles4 = [0, 0.5];
      if (isMovingForward)
        angles4.push(0.25, 0.75);
      for (const offsetAngle of angles4) {
        const finalAngle = angle3 + offsetAngle * Math.PI;
        const position = [
          currTouch.positionX,
          viewportSize[1] - currTouch.positionY,
          0
        ];
        stackRenderers.pushRotatedLine(position, finalAngle, 150, 15, color);
      }
      angle3 += 0.1;
      _touchesAngleMap.set(currTouch.id, angle3);
    });
    const idNotInUse = new Set;
    _touchesAngleMap.forEach((value, key) => {
      if (!latestTouchIds.has(key))
        idNotInUse.add(key);
    });
    idNotInUse.forEach((value) => {
      _touchesAngleMap.delete(value);
    });
  }
};
// src/main/experiment/WebGLExperiment.ts
var {
  GlobalKeyboardManager: GlobalKeyboardManager2,
  GlobalTouchManager: GlobalTouchManager4,
  GlobalMouseManager: GlobalMouseManager3,
  GlobalPointerLockManager: GlobalPointerLockManager2
} = exports_system.browser;

class WebGLExperiment {
  _canvasElement;
  _freeFlyController;
  _renderer;
  _chunkGenerator;
  _running;
  _errorGraphicContext;
  _chunksCreated = 0;
  _chunksDiscarded = 0;
  _currFrameTime = 0;
  _frameProfiler = new exports_system.metrics.FrameProfiler;
  constructor(canvasElement) {
    this._canvasElement = canvasElement;
    this._freeFlyController = new exports_system.controllers.FreeFlyController({
      position: exports_vec3.fromValues(0, 0, 0),
      coordinates: ["X", "Y", "Z"],
      theta: 0,
      phi: 0,
      mouseSensibility: controllerMouseSensibility,
      movingSpeed: controllerMovingSpeed,
      keyboardSensibility: controllerKeyboardSensibility,
      touchSensibility: controllerTouchSensibility
    });
    this._renderer = new WebGLRenderer({
      canvasDomElement: canvasElement
    });
    this._chunkGenerator = new ChunkGenerator({
      chunkGraphicSize,
      chunkGenerationRange: chunkRange,
      chunkLogicSize,
      workerTotal,
      workerFile,
      chunkIsVisible: (pos) => {
        const k_size = chunkGraphicSize;
        const k_hSize = k_size * 0.5;
        return this._renderer.frustumCulling.cubeInFrustum(pos[0] + k_hSize, pos[1] + k_hSize, pos[2] + k_hSize, k_size);
      },
      acquireGeometry: (inSize) => {
        return this._renderer.chunksRenderer.acquireGeometry(inSize);
      },
      releaseGeometry: (inGeom) => {
        this._renderer.chunksRenderer.releaseGeometry(inGeom);
      },
      onChunkCreated: () => {
        ++this._chunksCreated;
      },
      onChunkDiscarded: () => {
        ++this._chunksDiscarded;
      }
    });
    {
      GlobalKeyboardManager2.activate();
      GlobalTouchManager4.activate(this._canvasElement);
      GlobalPointerLockManager2.allowPointerLockedOnClickEvent(canvasElement);
      GlobalPointerLockManager2.addOnLockChange(() => {
        const isLocked = GlobalPointerLockManager2.isPointerLocked(canvasElement);
        if (isLocked) {
          GlobalMouseManager3.activate(document.body);
        } else {
          GlobalMouseManager3.deactivate(document.body);
          GlobalPointerLockManager2.allowPointerLockedOnClickEvent(canvasElement);
        }
      });
      GlobalPointerLockManager2.addOnLockError((event) => {
      });
    }
    this._running = false;
    this._errorGraphicContext = false;
    this._renderer.setOnContextLost(() => {
      console.log("on_context_lost");
      throw new Error("WebGL2 context was lost");
    });
  }
  async init() {
    await this._renderer.init();
  }
  resize(inWidth, inHeight) {
    this._renderer.resize(inWidth, inHeight);
  }
  start() {
    if (this.isRunning()) {
      return;
    }
    this._running = true;
    this._chunkGenerator.start();
    this._tick();
  }
  stop() {
    this._running = false;
    this._chunkGenerator.stop();
  }
  isRunning() {
    return this._running && !this._errorGraphicContext;
  }
  _tick() {
    const tick = () => {
      if (!this._running || this._errorGraphicContext) {
        return;
      }
      window.setTimeout(tick, 16.666666666666668);
      this._mainLoop();
    };
    tick();
  }
  _mainLoop() {
    const currentTime = Date.now();
    const elapsedTimeMsec = exports_system.math.clamp(currentTime - this._currFrameTime, 0, 1000);
    this._currFrameTime = currentTime;
    this._frameProfiler.pushDelta(elapsedTimeMsec);
    const deltaTimeSec = elapsedTimeMsec / 1000;
    this._freeFlyController.update(deltaTimeSec);
    this._renderer.lookAt(this._freeFlyController.getPosition(), this._freeFlyController.getTarget(), this._freeFlyController.getUpAxis());
    this._renderer.update();
    const eyePos = this._freeFlyController.getPosition();
    this._chunkGenerator.update(eyePos);
    let visibleChunks = 0;
    this._chunkGenerator.getChunks().forEach((chunk) => {
      if (chunk.isVisible) {
        ++visibleChunks;
      }
    });
    this._renderer.multipleBuffering.captureScene(() => {
      this._renderer.renderScene(() => {
        this._renderer.wireFrameCubesRenderer.clear();
        this._chunkGenerator.getChunks().forEach((chunk) => {
          if (!chunk.isVisible) {
            return;
          }
          this._renderer.triangleCubesRenderer.pushOriginBoundCube(chunk.realPosition, chunkGraphicSize, [1, 1, 1]);
        });
        this._renderer.triangleCubesRenderer.flush(this._renderer.mainCamera);
        this._renderer.chunksRenderer.render(this._renderer.mainCamera, this._renderer.frustumCulling, chunkGraphicSize);
      });
    });
    this._renderer.renderHUD(() => {
      const gl = exports_graphics.webgl2.WebGLContext.getContext();
      gl.clearColor(0, 0, 0, 1);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      this._renderer.multipleBuffering.renderHud(this._renderer.hudCamera.getComposedMatrix());
      this._renderer.stackRenderers.clear();
      this._renderer.textRenderer.clear();
      renderGenerationMetrics(this._renderer.getSize(), this._chunksCreated, this._chunksDiscarded, visibleChunks, this._renderer.textRenderer);
      renderCurrentCoordinates(this._renderer.getSize(), chunkGraphicSize, eyePos, this._renderer.textRenderer);
      {
        const keyEventsPos = [27, 165];
        const touchEventsPos = [27, 260];
        const boardPos = [7, 35];
        exports_graphics.renderers.widgets.addArrowStrokesWidgets(keyEventsPos, this._renderer.stackRenderers, this._renderer.textRenderer);
        exports_graphics.renderers.widgets.addArrowStrokesWidgets(touchEventsPos, this._renderer.stackRenderers, this._renderer.textRenderer);
        exports_graphics.renderers.widgets.addKeysTouchesWidgets(this._canvasElement, boardPos, this._renderer.stackRenderers, this._renderer.textRenderer);
      }
      exports_graphics.renderers.widgets.renderFpsMeter([10, this._canvasElement.height - 60, 0], [100, 50], this._frameProfiler, this._renderer.stackRenderers, this._renderer.textRenderer, true);
      exports_graphics.renderers.widgets.renderFpsMeter([10, this._canvasElement.height - 150, 0], [100, 50], this._chunkGenerator.getFrameProfiler(), this._renderer.stackRenderers, this._renderer.textRenderer);
      renderTouchEvents(this._renderer.getSize(), this._renderer.stackRenderers, this._freeFlyController.getTouchMoveForward());
      this._renderer.stackRenderers.flush(this._renderer.hudCamera.getComposedMatrix());
      this._renderer.textRenderer.flush(this._renderer.hudCamera.getComposedMatrix());
      this._renderer.stackRenderers.clear();
      this._renderer.textRenderer.clear();
      const k_minScreenSize = 300;
      const k_minViewSize = 150;
      renderMiniMap(this._renderer.mainCamera, k_minScreenSize, k_minViewSize, this._chunkGenerator.getChunks(), chunkGraphicSize, this._renderer.getSize(), this._chunkGenerator.getProcessingRealPositions(), this._renderer.wireFrameCubesRenderer, this._renderer.stackRenderers);
      this._renderer.flush();
    });
  }
}

// src/main/utilities/setupFullScreenFeature.ts
var setupFullScreenFeature = (app, button, canvasElement) => {
  if (!exports_system.browser.GlobalFullScreenManager.isCompatible(canvasElement)) {
    return;
  }
  button.addEventListener("click", () => {
    exports_system.browser.GlobalFullScreenManager.requestFullScreen(canvasElement);
  });
  exports_system.browser.GlobalFullScreenManager.addOnFullScreenChange(() => {
    let currentWidth = null;
    let currentHeight = null;
    const isInFullScreen = exports_system.browser.GlobalFullScreenManager.isFullScreen(canvasElement);
    if (isInFullScreen) {
      canvasElement.style.position = "absolute";
      currentWidth = window.innerWidth;
      currentHeight = window.innerHeight;
    } else {
      canvasElement.style.position = "relative";
      currentWidth = 800;
      currentHeight = 600;
    }
    canvasElement.style.left = "0px";
    canvasElement.style.top = "0px";
    canvasElement.width = currentWidth;
    canvasElement.height = currentHeight;
    app.resize(currentWidth, currentHeight);
  });
};
// src/main/utilities/setupOutdatedPage.ts
var setupOutdatedPage = (maxDuration, onTimeout) => {
  if (!exports_system.browser.GlobalVisibilityManager.isSupported()) {
    return;
  }
  let timeoutHandle = -1;
  exports_system.browser.GlobalVisibilityManager.addVisibilityChange((isVisible) => {
    if (isVisible) {
      if (timeoutHandle >= 0) {
        clearTimeout(timeoutHandle);
        timeoutHandle = -1;
      }
    } else {
      timeoutHandle = window.setTimeout(onTimeout, maxDuration);
    }
  });
  exports_system.browser.GlobalVisibilityManager.activate();
};
// src/main/main.ts
var { isWebGL2Supported: isWebGL2Supported3, isWebWorkerSupported: isWebWorkerSupported3, GlobalFullScreenManager: GlobalFullScreenManager2 } = exports_system.browser;
var _queryDomElement = (inName) => {
  const newElement = document.querySelector(inName);
  if (!newElement) {
    throw new Error(`html element "${inName}" not found`);
  }
  return newElement;
};
var onPageLoad = async () => {
  const canvasElement = _queryDomElement("#main-canvas");
  const guiToggleStart = _queryDomElement("#gui_toggle_start");
  const buttonFullscreen = _queryDomElement("#gui_fullscreen");
  const errorText = _queryDomElement("#error-text");
  let mainDemo = null;
  const _onPageError = (err) => {
    if (mainDemo) {
      console.log("onPageError", err);
      mainDemo.stop();
      mainDemo = null;
      exports_system.browser.GlobalKeyboardManager.deactivate();
      exports_system.browser.GlobalMouseManager.deactivate(canvasElement);
      exports_system.browser.GlobalTouchManager.deactivate(canvasElement);
      exports_system.browser.GlobalFullScreenManager.removeAllCallbacks();
      exports_system.browser.GlobalPointerLockManager.removeAllCallbacks();
      exports_system.browser.GlobalVisibilityManager.removeAllCallbacks();
      exports_system.browser.GlobalVisibilityManager.deactivate();
      errorText.style.width = "800px";
      errorText.style.height = "600px";
      errorText.innerHTML = err.message;
      canvasElement.style.display = "none";
      errorText.style.display = "block";
      buttonFullscreen.disabled = true;
      guiToggleStart.disabled = true;
      document.title += " (ERR)";
    }
  };
  window.addEventListener("error", _onPageError);
  if (!isWebGL2Supported3()) {
    throw new Error("missing WebGL2 feature (unsupported)");
  }
  if (!isWebWorkerSupported3()) {
    throw new Error("missing WebWorker feature (unsupported)");
  }
  guiToggleStart.addEventListener("click", () => {
    if (!mainDemo) {
      return;
    }
    if (mainDemo.isRunning()) {
      mainDemo.stop();
    } else {
      mainDemo.start();
    }
  });
  mainDemo = new WebGLExperiment(canvasElement);
  await mainDemo.init();
  mainDemo.start();
  const pageMaxTimeInvisible = 60000;
  setupOutdatedPage(pageMaxTimeInvisible, () => {
    throw new Error("<br/><br/><br/>The page was inactive for too long<br/><br/>please reload");
  });
  setupFullScreenFeature(mainDemo, buttonFullscreen, canvasElement);
};
window.addEventListener("load", onPageLoad);

//# debugId=D8BEA343569CC93564756e2164756e21
//# sourceMappingURL=data:application/json;base64,
